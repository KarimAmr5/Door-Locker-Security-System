
Final_Project_Control_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002856  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  00002856  000028ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  0080007a  0080007a  00002904  2**0
                  ALLOC
  3 .stab         00002a6c  00000000  00000000  00002904  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000143b  00000000  00000000  00005370  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000067ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000068eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006a5b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000086a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000958f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a33c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a49c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a729  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000aef7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 5f 0d 	jmp	0x1abe	; 0x1abe <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 92 0d 	jmp	0x1b24	; 0x1b24 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e5       	ldi	r30, 0x56	; 86
      68:	f8 e2       	ldi	r31, 0x28	; 40
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 37       	cpi	r26, 0x7A	; 122
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa e7       	ldi	r26, 0x7A	; 122
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 37       	cpi	r26, 0x7E	; 126
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 33 06 	call	0xc66	; 0xc66 <main>
      8a:	0c 94 29 14 	jmp	0x2852	; 0x2852 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 f2 13 	jmp	0x27e4	; 0x27e4 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 0e 14 	jmp	0x281c	; 0x281c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 fe 13 	jmp	0x27fc	; 0x27fc <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 1a 14 	jmp	0x2834	; 0x2834 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 fe 13 	jmp	0x27fc	; 0x27fc <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 1a 14 	jmp	0x2834	; 0x2834 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 f2 13 	jmp	0x27e4	; 0x27e4 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 0e 14 	jmp	0x281c	; 0x281c <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 fe 13 	jmp	0x27fc	; 0x27fc <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 1a 14 	jmp	0x2834	; 0x2834 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 fe 13 	jmp	0x27fc	; 0x27fc <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 1a 14 	jmp	0x2834	; 0x2834 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 fe 13 	jmp	0x27fc	; 0x27fc <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 1a 14 	jmp	0x2834	; 0x2834 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 02 14 	jmp	0x2804	; 0x2804 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 1e 14 	jmp	0x283c	; 0x283c <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Buzzer_init>:

/* Description
 * Initialize Pin to output & Turn OFF buzzer
 */
void Buzzer_init(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT,BUZZER_PIN,PIN_OUTPUT); /*Set Pin to output*/
     b4e:	81 e0       	ldi	r24, 0x01	; 1
     b50:	64 e0       	ldi	r22, 0x04	; 4
     b52:	41 e0       	ldi	r20, 0x01	; 1
     b54:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <GPIO_setupPinDirection>

	GPIO_writePin(BUZZER_PORT,BUZZER_PIN,LOGIC_LOW); /*Turn Off Buzzer*/
     b58:	81 e0       	ldi	r24, 0x01	; 1
     b5a:	64 e0       	ldi	r22, 0x04	; 4
     b5c:	40 e0       	ldi	r20, 0x00	; 0
     b5e:	0e 94 a9 10 	call	0x2152	; 0x2152 <GPIO_writePin>

}
     b62:	cf 91       	pop	r28
     b64:	df 91       	pop	r29
     b66:	08 95       	ret

00000b68 <Buzzer_on>:

/* Description
 * Turns ON Buzzer
 */
void Buzzer_on(void)
{
     b68:	df 93       	push	r29
     b6a:	cf 93       	push	r28
     b6c:	cd b7       	in	r28, 0x3d	; 61
     b6e:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT,BUZZER_PIN,LOGIC_HIGH); /*Turn On Buzzer*/
     b70:	81 e0       	ldi	r24, 0x01	; 1
     b72:	64 e0       	ldi	r22, 0x04	; 4
     b74:	41 e0       	ldi	r20, 0x01	; 1
     b76:	0e 94 a9 10 	call	0x2152	; 0x2152 <GPIO_writePin>
}
     b7a:	cf 91       	pop	r28
     b7c:	df 91       	pop	r29
     b7e:	08 95       	ret

00000b80 <Buzzer_off>:

/* Description
 * Turns OFF Buzzer
 */
void Buzzer_off(void)
{
     b80:	df 93       	push	r29
     b82:	cf 93       	push	r28
     b84:	cd b7       	in	r28, 0x3d	; 61
     b86:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT,BUZZER_PIN,LOGIC_LOW);/*Turn Off Buzzer*/
     b88:	81 e0       	ldi	r24, 0x01	; 1
     b8a:	64 e0       	ldi	r22, 0x04	; 4
     b8c:	40 e0       	ldi	r20, 0x00	; 0
     b8e:	0e 94 a9 10 	call	0x2152	; 0x2152 <GPIO_writePin>
}
     b92:	cf 91       	pop	r28
     b94:	df 91       	pop	r29
     b96:	08 95       	ret

00000b98 <DcMotor_init>:
/* Description :
 * Initialize the DC MOTOR by
 * setting required pins to output
 * and set its initial state to : STOP*/
void DcMotor_init(void)
{
     b98:	df 93       	push	r29
     b9a:	cf 93       	push	r28
     b9c:	cd b7       	in	r28, 0x3d	; 61
     b9e:	de b7       	in	r29, 0x3e	; 62
	/*set both pins to output */
	GPIO_setupPinDirection(DC_MOTOR_PORT1,DC_MOTOR_PIN1,PIN_OUTPUT);
     ba0:	81 e0       	ldi	r24, 0x01	; 1
     ba2:	62 e0       	ldi	r22, 0x02	; 2
     ba4:	41 e0       	ldi	r20, 0x01	; 1
     ba6:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_MOTOR_PORT2,DC_MOTOR_PIN2,PIN_OUTPUT);
     baa:	81 e0       	ldi	r24, 0x01	; 1
     bac:	61 e0       	ldi	r22, 0x01	; 1
     bae:	41 e0       	ldi	r20, 0x01	; 1
     bb0:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <GPIO_setupPinDirection>

	/*Set the motor to STOP position*/
	GPIO_writePin(DC_MOTOR_PORT1,DC_MOTOR_PIN1,LOGIC_LOW);
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	62 e0       	ldi	r22, 0x02	; 2
     bb8:	40 e0       	ldi	r20, 0x00	; 0
     bba:	0e 94 a9 10 	call	0x2152	; 0x2152 <GPIO_writePin>
	GPIO_writePin(DC_MOTOR_PORT2,DC_MOTOR_PIN2,LOGIC_LOW);
     bbe:	81 e0       	ldi	r24, 0x01	; 1
     bc0:	61 e0       	ldi	r22, 0x01	; 1
     bc2:	40 e0       	ldi	r20, 0x00	; 0
     bc4:	0e 94 a9 10 	call	0x2152	; 0x2152 <GPIO_writePin>

	/*Set initial speed to ZERO using PWM driver */
	PWM_Timer0_Start(MOTOR_STOP);
     bc8:	80 e0       	ldi	r24, 0x00	; 0
     bca:	0e 94 89 0c 	call	0x1912	; 0x1912 <PWM_Timer0_Start>
}
     bce:	cf 91       	pop	r28
     bd0:	df 91       	pop	r29
     bd2:	08 95       	ret

00000bd4 <DcMotor_Rotate>:

/* Description :
 * set both motor speed and direction by the given function arguments
 * State : STOP OR CW OR ACW*/
void DcMotor_Rotate(DcMotor_State state)
{
     bd4:	df 93       	push	r29
     bd6:	cf 93       	push	r28
     bd8:	00 d0       	rcall	.+0      	; 0xbda <DcMotor_Rotate+0x6>
     bda:	0f 92       	push	r0
     bdc:	cd b7       	in	r28, 0x3d	; 61
     bde:	de b7       	in	r29, 0x3e	; 62
     be0:	89 83       	std	Y+1, r24	; 0x01
	switch(state)
     be2:	89 81       	ldd	r24, Y+1	; 0x01
     be4:	28 2f       	mov	r18, r24
     be6:	30 e0       	ldi	r19, 0x00	; 0
     be8:	3b 83       	std	Y+3, r19	; 0x03
     bea:	2a 83       	std	Y+2, r18	; 0x02
     bec:	8a 81       	ldd	r24, Y+2	; 0x02
     bee:	9b 81       	ldd	r25, Y+3	; 0x03
     bf0:	81 30       	cpi	r24, 0x01	; 1
     bf2:	91 05       	cpc	r25, r1
     bf4:	29 f1       	breq	.+74     	; 0xc40 <DcMotor_Rotate+0x6c>
     bf6:	2a 81       	ldd	r18, Y+2	; 0x02
     bf8:	3b 81       	ldd	r19, Y+3	; 0x03
     bfa:	22 30       	cpi	r18, 0x02	; 2
     bfc:	31 05       	cpc	r19, r1
     bfe:	91 f0       	breq	.+36     	; 0xc24 <DcMotor_Rotate+0x50>
     c00:	8a 81       	ldd	r24, Y+2	; 0x02
     c02:	9b 81       	ldd	r25, Y+3	; 0x03
     c04:	00 97       	sbiw	r24, 0x00	; 0
     c06:	49 f5       	brne	.+82     	; 0xc5a <DcMotor_Rotate+0x86>
	{
	case STOP:
		/*Set Direction*/
		GPIO_writePin(DC_MOTOR_PORT1,DC_MOTOR_PIN1,LOGIC_LOW);
     c08:	81 e0       	ldi	r24, 0x01	; 1
     c0a:	62 e0       	ldi	r22, 0x02	; 2
     c0c:	40 e0       	ldi	r20, 0x00	; 0
     c0e:	0e 94 a9 10 	call	0x2152	; 0x2152 <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT2,DC_MOTOR_PIN2,LOGIC_LOW);
     c12:	81 e0       	ldi	r24, 0x01	; 1
     c14:	61 e0       	ldi	r22, 0x01	; 1
     c16:	40 e0       	ldi	r20, 0x00	; 0
     c18:	0e 94 a9 10 	call	0x2152	; 0x2152 <GPIO_writePin>

		/*Set speed */
		PWM_Timer0_Start(MOTOR_STOP); /*OR ZERo ?*/
     c1c:	80 e0       	ldi	r24, 0x00	; 0
     c1e:	0e 94 89 0c 	call	0x1912	; 0x1912 <PWM_Timer0_Start>
     c22:	1b c0       	rjmp	.+54     	; 0xc5a <DcMotor_Rotate+0x86>
		break;
	case ACW :
		/*Set Direction*/
		GPIO_writePin(DC_MOTOR_PORT1,DC_MOTOR_PIN1,LOGIC_LOW);
     c24:	81 e0       	ldi	r24, 0x01	; 1
     c26:	62 e0       	ldi	r22, 0x02	; 2
     c28:	40 e0       	ldi	r20, 0x00	; 0
     c2a:	0e 94 a9 10 	call	0x2152	; 0x2152 <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT2,DC_MOTOR_PIN2,LOGIC_HIGH);
     c2e:	81 e0       	ldi	r24, 0x01	; 1
     c30:	61 e0       	ldi	r22, 0x01	; 1
     c32:	41 e0       	ldi	r20, 0x01	; 1
     c34:	0e 94 a9 10 	call	0x2152	; 0x2152 <GPIO_writePin>

		/*Set speed */
		PWM_Timer0_Start(MOTOR_RUN);
     c38:	84 e6       	ldi	r24, 0x64	; 100
     c3a:	0e 94 89 0c 	call	0x1912	; 0x1912 <PWM_Timer0_Start>
     c3e:	0d c0       	rjmp	.+26     	; 0xc5a <DcMotor_Rotate+0x86>
		break;
	case CW:
		/*Set Direction*/
		GPIO_writePin(DC_MOTOR_PORT1,DC_MOTOR_PIN1,LOGIC_HIGH);
     c40:	81 e0       	ldi	r24, 0x01	; 1
     c42:	62 e0       	ldi	r22, 0x02	; 2
     c44:	41 e0       	ldi	r20, 0x01	; 1
     c46:	0e 94 a9 10 	call	0x2152	; 0x2152 <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT2,DC_MOTOR_PIN2,LOGIC_LOW);
     c4a:	81 e0       	ldi	r24, 0x01	; 1
     c4c:	61 e0       	ldi	r22, 0x01	; 1
     c4e:	40 e0       	ldi	r20, 0x00	; 0
     c50:	0e 94 a9 10 	call	0x2152	; 0x2152 <GPIO_writePin>

		/*Set speed */
		PWM_Timer0_Start(MOTOR_RUN);
     c54:	84 e6       	ldi	r24, 0x64	; 100
     c56:	0e 94 89 0c 	call	0x1912	; 0x1912 <PWM_Timer0_Start>
		break;
	}
}
     c5a:	0f 90       	pop	r0
     c5c:	0f 90       	pop	r0
     c5e:	0f 90       	pop	r0
     c60:	cf 91       	pop	r28
     c62:	df 91       	pop	r29
     c64:	08 95       	ret

00000c66 <main>:
 ********************************************************************************/



int main()
{
     c66:	df 93       	push	r29
     c68:	cf 93       	push	r28
     c6a:	cd b7       	in	r28, 0x3d	; 61
     c6c:	de b7       	in	r29, 0x3e	; 62
     c6e:	ef 97       	sbiw	r28, 0x3f	; 63
     c70:	0f b6       	in	r0, 0x3f	; 63
     c72:	f8 94       	cli
     c74:	de bf       	out	0x3e, r29	; 62
     c76:	0f be       	out	0x3f, r0	; 63
     c78:	cd bf       	out	0x3d, r28	; 61
	*  Data Bit Mode 		= 8 Bits
	*  Parity Check 		= Even Parity
	*  Number of Stop Bits  = One
	*  Baud Rate			= 9600
	*************************************************/
	UART_ConfigType s_UARTconfig = {EightBit,EvenParity,OneStopBit,9600};
     c7a:	9e 01       	movw	r18, r28
     c7c:	23 5e       	subi	r18, 0xE3	; 227
     c7e:	3f 4f       	sbci	r19, 0xFF	; 255
     c80:	3a ab       	std	Y+50, r19	; 0x32
     c82:	29 ab       	std	Y+49, r18	; 0x31
     c84:	83 e7       	ldi	r24, 0x73	; 115
     c86:	90 e0       	ldi	r25, 0x00	; 0
     c88:	9c ab       	std	Y+52, r25	; 0x34
     c8a:	8b ab       	std	Y+51, r24	; 0x33
     c8c:	97 e0       	ldi	r25, 0x07	; 7
     c8e:	9d ab       	std	Y+53, r25	; 0x35
     c90:	eb a9       	ldd	r30, Y+51	; 0x33
     c92:	fc a9       	ldd	r31, Y+52	; 0x34
     c94:	00 80       	ld	r0, Z
     c96:	2b a9       	ldd	r18, Y+51	; 0x33
     c98:	3c a9       	ldd	r19, Y+52	; 0x34
     c9a:	2f 5f       	subi	r18, 0xFF	; 255
     c9c:	3f 4f       	sbci	r19, 0xFF	; 255
     c9e:	3c ab       	std	Y+52, r19	; 0x34
     ca0:	2b ab       	std	Y+51, r18	; 0x33
     ca2:	e9 a9       	ldd	r30, Y+49	; 0x31
     ca4:	fa a9       	ldd	r31, Y+50	; 0x32
     ca6:	00 82       	st	Z, r0
     ca8:	29 a9       	ldd	r18, Y+49	; 0x31
     caa:	3a a9       	ldd	r19, Y+50	; 0x32
     cac:	2f 5f       	subi	r18, 0xFF	; 255
     cae:	3f 4f       	sbci	r19, 0xFF	; 255
     cb0:	3a ab       	std	Y+50, r19	; 0x32
     cb2:	29 ab       	std	Y+49, r18	; 0x31
     cb4:	3d a9       	ldd	r19, Y+53	; 0x35
     cb6:	31 50       	subi	r19, 0x01	; 1
     cb8:	3d ab       	std	Y+53, r19	; 0x35
     cba:	8d a9       	ldd	r24, Y+53	; 0x35
     cbc:	88 23       	and	r24, r24
     cbe:	41 f7       	brne	.-48     	; 0xc90 <main+0x2a>
	*  Initial Value 	= 0
	*  Compare Value 	= 7813 ( every one second )
	*  Pre-Scalar 		= F_CPU/1024
	*  Timer1 Mode		= CTC (Compare Mode)
	*************************************************/
	Timer1_ConfigType s_Timer1Config = {0,7813,FCPU_1024,Compare};
     cc0:	fe 01       	movw	r30, r28
     cc2:	b4 96       	adiw	r30, 0x24	; 36
     cc4:	ff ab       	std	Y+55, r31	; 0x37
     cc6:	ee ab       	std	Y+54, r30	; 0x36
     cc8:	2d e6       	ldi	r18, 0x6D	; 109
     cca:	30 e0       	ldi	r19, 0x00	; 0
     ccc:	39 af       	std	Y+57, r19	; 0x39
     cce:	28 af       	std	Y+56, r18	; 0x38
     cd0:	36 e0       	ldi	r19, 0x06	; 6
     cd2:	3a af       	std	Y+58, r19	; 0x3a
     cd4:	e8 ad       	ldd	r30, Y+56	; 0x38
     cd6:	f9 ad       	ldd	r31, Y+57	; 0x39
     cd8:	00 80       	ld	r0, Z
     cda:	28 ad       	ldd	r18, Y+56	; 0x38
     cdc:	39 ad       	ldd	r19, Y+57	; 0x39
     cde:	2f 5f       	subi	r18, 0xFF	; 255
     ce0:	3f 4f       	sbci	r19, 0xFF	; 255
     ce2:	39 af       	std	Y+57, r19	; 0x39
     ce4:	28 af       	std	Y+56, r18	; 0x38
     ce6:	ee a9       	ldd	r30, Y+54	; 0x36
     ce8:	ff a9       	ldd	r31, Y+55	; 0x37
     cea:	00 82       	st	Z, r0
     cec:	2e a9       	ldd	r18, Y+54	; 0x36
     cee:	3f a9       	ldd	r19, Y+55	; 0x37
     cf0:	2f 5f       	subi	r18, 0xFF	; 255
     cf2:	3f 4f       	sbci	r19, 0xFF	; 255
     cf4:	3f ab       	std	Y+55, r19	; 0x37
     cf6:	2e ab       	std	Y+54, r18	; 0x36
     cf8:	3a ad       	ldd	r19, Y+58	; 0x3a
     cfa:	31 50       	subi	r19, 0x01	; 1
     cfc:	3a af       	std	Y+58, r19	; 0x3a
     cfe:	8a ad       	ldd	r24, Y+58	; 0x3a
     d00:	88 23       	and	r24, r24
     d02:	41 f7       	brne	.-48     	; 0xcd4 <main+0x6e>

   /***************** TWI(I2) Settings ****************
	*  Address  = 10
	*  Bit Rate = 400 Kb/s
	*************************************************/
	TWI_ConfigType s_TWIconfig = {0b00001010,Fast_Mode};
     d04:	fe 01       	movw	r30, r28
     d06:	ba 96       	adiw	r30, 0x2a	; 42
     d08:	fc af       	std	Y+60, r31	; 0x3c
     d0a:	eb af       	std	Y+59, r30	; 0x3b
     d0c:	28 e6       	ldi	r18, 0x68	; 104
     d0e:	30 e0       	ldi	r19, 0x00	; 0
     d10:	3e af       	std	Y+62, r19	; 0x3e
     d12:	2d af       	std	Y+61, r18	; 0x3d
     d14:	35 e0       	ldi	r19, 0x05	; 5
     d16:	3f af       	std	Y+63, r19	; 0x3f
     d18:	ed ad       	ldd	r30, Y+61	; 0x3d
     d1a:	fe ad       	ldd	r31, Y+62	; 0x3e
     d1c:	00 80       	ld	r0, Z
     d1e:	2d ad       	ldd	r18, Y+61	; 0x3d
     d20:	3e ad       	ldd	r19, Y+62	; 0x3e
     d22:	2f 5f       	subi	r18, 0xFF	; 255
     d24:	3f 4f       	sbci	r19, 0xFF	; 255
     d26:	3e af       	std	Y+62, r19	; 0x3e
     d28:	2d af       	std	Y+61, r18	; 0x3d
     d2a:	eb ad       	ldd	r30, Y+59	; 0x3b
     d2c:	fc ad       	ldd	r31, Y+60	; 0x3c
     d2e:	00 82       	st	Z, r0
     d30:	2b ad       	ldd	r18, Y+59	; 0x3b
     d32:	3c ad       	ldd	r19, Y+60	; 0x3c
     d34:	2f 5f       	subi	r18, 0xFF	; 255
     d36:	3f 4f       	sbci	r19, 0xFF	; 255
     d38:	3c af       	std	Y+60, r19	; 0x3c
     d3a:	2b af       	std	Y+59, r18	; 0x3b
     d3c:	3f ad       	ldd	r19, Y+63	; 0x3f
     d3e:	31 50       	subi	r19, 0x01	; 1
     d40:	3f af       	std	Y+63, r19	; 0x3f
     d42:	8f ad       	ldd	r24, Y+63	; 0x3f
     d44:	88 23       	and	r24, r24
     d46:	41 f7       	brne	.-48     	; 0xd18 <main+0xb2>

	/*********************************************************************/

	/************************ Drivers Initializations *********************/

	UART_init(&s_UARTconfig);
     d48:	ce 01       	movw	r24, r28
     d4a:	4d 96       	adiw	r24, 0x1d	; 29
     d4c:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <UART_init>
     d50:	80 e0       	ldi	r24, 0x00	; 0
     d52:	90 e0       	ldi	r25, 0x00	; 0
     d54:	a0 e2       	ldi	r26, 0x20	; 32
     d56:	b1 e4       	ldi	r27, 0x41	; 65
     d58:	89 8f       	std	Y+25, r24	; 0x19
     d5a:	9a 8f       	std	Y+26, r25	; 0x1a
     d5c:	ab 8f       	std	Y+27, r26	; 0x1b
     d5e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d60:	69 8d       	ldd	r22, Y+25	; 0x19
     d62:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d64:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d66:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d68:	20 e0       	ldi	r18, 0x00	; 0
     d6a:	30 e0       	ldi	r19, 0x00	; 0
     d6c:	4a ef       	ldi	r20, 0xFA	; 250
     d6e:	54 e4       	ldi	r21, 0x44	; 68
     d70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d74:	dc 01       	movw	r26, r24
     d76:	cb 01       	movw	r24, r22
     d78:	8d 8b       	std	Y+21, r24	; 0x15
     d7a:	9e 8b       	std	Y+22, r25	; 0x16
     d7c:	af 8b       	std	Y+23, r26	; 0x17
     d7e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     d80:	6d 89       	ldd	r22, Y+21	; 0x15
     d82:	7e 89       	ldd	r23, Y+22	; 0x16
     d84:	8f 89       	ldd	r24, Y+23	; 0x17
     d86:	98 8d       	ldd	r25, Y+24	; 0x18
     d88:	20 e0       	ldi	r18, 0x00	; 0
     d8a:	30 e0       	ldi	r19, 0x00	; 0
     d8c:	40 e8       	ldi	r20, 0x80	; 128
     d8e:	5f e3       	ldi	r21, 0x3F	; 63
     d90:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d94:	88 23       	and	r24, r24
     d96:	2c f4       	brge	.+10     	; 0xda2 <main+0x13c>
		__ticks = 1;
     d98:	81 e0       	ldi	r24, 0x01	; 1
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	9c 8b       	std	Y+20, r25	; 0x14
     d9e:	8b 8b       	std	Y+19, r24	; 0x13
     da0:	3f c0       	rjmp	.+126    	; 0xe20 <main+0x1ba>
	else if (__tmp > 65535)
     da2:	6d 89       	ldd	r22, Y+21	; 0x15
     da4:	7e 89       	ldd	r23, Y+22	; 0x16
     da6:	8f 89       	ldd	r24, Y+23	; 0x17
     da8:	98 8d       	ldd	r25, Y+24	; 0x18
     daa:	20 e0       	ldi	r18, 0x00	; 0
     dac:	3f ef       	ldi	r19, 0xFF	; 255
     dae:	4f e7       	ldi	r20, 0x7F	; 127
     db0:	57 e4       	ldi	r21, 0x47	; 71
     db2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     db6:	18 16       	cp	r1, r24
     db8:	4c f5       	brge	.+82     	; 0xe0c <main+0x1a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     dba:	69 8d       	ldd	r22, Y+25	; 0x19
     dbc:	7a 8d       	ldd	r23, Y+26	; 0x1a
     dbe:	8b 8d       	ldd	r24, Y+27	; 0x1b
     dc0:	9c 8d       	ldd	r25, Y+28	; 0x1c
     dc2:	20 e0       	ldi	r18, 0x00	; 0
     dc4:	30 e0       	ldi	r19, 0x00	; 0
     dc6:	40 e2       	ldi	r20, 0x20	; 32
     dc8:	51 e4       	ldi	r21, 0x41	; 65
     dca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dce:	dc 01       	movw	r26, r24
     dd0:	cb 01       	movw	r24, r22
     dd2:	bc 01       	movw	r22, r24
     dd4:	cd 01       	movw	r24, r26
     dd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     dda:	dc 01       	movw	r26, r24
     ddc:	cb 01       	movw	r24, r22
     dde:	9c 8b       	std	Y+20, r25	; 0x14
     de0:	8b 8b       	std	Y+19, r24	; 0x13
     de2:	0f c0       	rjmp	.+30     	; 0xe02 <main+0x19c>
     de4:	88 ec       	ldi	r24, 0xC8	; 200
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	9a 8b       	std	Y+18, r25	; 0x12
     dea:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     dec:	89 89       	ldd	r24, Y+17	; 0x11
     dee:	9a 89       	ldd	r25, Y+18	; 0x12
     df0:	01 97       	sbiw	r24, 0x01	; 1
     df2:	f1 f7       	brne	.-4      	; 0xdf0 <main+0x18a>
     df4:	9a 8b       	std	Y+18, r25	; 0x12
     df6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     df8:	8b 89       	ldd	r24, Y+19	; 0x13
     dfa:	9c 89       	ldd	r25, Y+20	; 0x14
     dfc:	01 97       	sbiw	r24, 0x01	; 1
     dfe:	9c 8b       	std	Y+20, r25	; 0x14
     e00:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e02:	8b 89       	ldd	r24, Y+19	; 0x13
     e04:	9c 89       	ldd	r25, Y+20	; 0x14
     e06:	00 97       	sbiw	r24, 0x00	; 0
     e08:	69 f7       	brne	.-38     	; 0xde4 <main+0x17e>
     e0a:	14 c0       	rjmp	.+40     	; 0xe34 <main+0x1ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e0c:	6d 89       	ldd	r22, Y+21	; 0x15
     e0e:	7e 89       	ldd	r23, Y+22	; 0x16
     e10:	8f 89       	ldd	r24, Y+23	; 0x17
     e12:	98 8d       	ldd	r25, Y+24	; 0x18
     e14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e18:	dc 01       	movw	r26, r24
     e1a:	cb 01       	movw	r24, r22
     e1c:	9c 8b       	std	Y+20, r25	; 0x14
     e1e:	8b 8b       	std	Y+19, r24	; 0x13
     e20:	8b 89       	ldd	r24, Y+19	; 0x13
     e22:	9c 89       	ldd	r25, Y+20	; 0x14
     e24:	98 8b       	std	Y+16, r25	; 0x10
     e26:	8f 87       	std	Y+15, r24	; 0x0f
     e28:	8f 85       	ldd	r24, Y+15	; 0x0f
     e2a:	98 89       	ldd	r25, Y+16	; 0x10
     e2c:	01 97       	sbiw	r24, 0x01	; 1
     e2e:	f1 f7       	brne	.-4      	; 0xe2c <main+0x1c6>
     e30:	98 8b       	std	Y+16, r25	; 0x10
     e32:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(10);  /*Allow time for transmission & initialization*/

	TWI_init(&s_TWIconfig);
     e34:	ce 01       	movw	r24, r28
     e36:	8a 96       	adiw	r24, 0x2a	; 42
     e38:	0e 94 09 13 	call	0x2612	; 0x2612 <TWI_init>
     e3c:	80 e0       	ldi	r24, 0x00	; 0
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	a0 e2       	ldi	r26, 0x20	; 32
     e42:	b1 e4       	ldi	r27, 0x41	; 65
     e44:	8b 87       	std	Y+11, r24	; 0x0b
     e46:	9c 87       	std	Y+12, r25	; 0x0c
     e48:	ad 87       	std	Y+13, r26	; 0x0d
     e4a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e4c:	6b 85       	ldd	r22, Y+11	; 0x0b
     e4e:	7c 85       	ldd	r23, Y+12	; 0x0c
     e50:	8d 85       	ldd	r24, Y+13	; 0x0d
     e52:	9e 85       	ldd	r25, Y+14	; 0x0e
     e54:	20 e0       	ldi	r18, 0x00	; 0
     e56:	30 e0       	ldi	r19, 0x00	; 0
     e58:	4a ef       	ldi	r20, 0xFA	; 250
     e5a:	54 e4       	ldi	r21, 0x44	; 68
     e5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e60:	dc 01       	movw	r26, r24
     e62:	cb 01       	movw	r24, r22
     e64:	8f 83       	std	Y+7, r24	; 0x07
     e66:	98 87       	std	Y+8, r25	; 0x08
     e68:	a9 87       	std	Y+9, r26	; 0x09
     e6a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e6c:	6f 81       	ldd	r22, Y+7	; 0x07
     e6e:	78 85       	ldd	r23, Y+8	; 0x08
     e70:	89 85       	ldd	r24, Y+9	; 0x09
     e72:	9a 85       	ldd	r25, Y+10	; 0x0a
     e74:	20 e0       	ldi	r18, 0x00	; 0
     e76:	30 e0       	ldi	r19, 0x00	; 0
     e78:	40 e8       	ldi	r20, 0x80	; 128
     e7a:	5f e3       	ldi	r21, 0x3F	; 63
     e7c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e80:	88 23       	and	r24, r24
     e82:	2c f4       	brge	.+10     	; 0xe8e <main+0x228>
		__ticks = 1;
     e84:	81 e0       	ldi	r24, 0x01	; 1
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	9e 83       	std	Y+6, r25	; 0x06
     e8a:	8d 83       	std	Y+5, r24	; 0x05
     e8c:	3f c0       	rjmp	.+126    	; 0xf0c <main+0x2a6>
	else if (__tmp > 65535)
     e8e:	6f 81       	ldd	r22, Y+7	; 0x07
     e90:	78 85       	ldd	r23, Y+8	; 0x08
     e92:	89 85       	ldd	r24, Y+9	; 0x09
     e94:	9a 85       	ldd	r25, Y+10	; 0x0a
     e96:	20 e0       	ldi	r18, 0x00	; 0
     e98:	3f ef       	ldi	r19, 0xFF	; 255
     e9a:	4f e7       	ldi	r20, 0x7F	; 127
     e9c:	57 e4       	ldi	r21, 0x47	; 71
     e9e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     ea2:	18 16       	cp	r1, r24
     ea4:	4c f5       	brge	.+82     	; 0xef8 <main+0x292>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ea6:	6b 85       	ldd	r22, Y+11	; 0x0b
     ea8:	7c 85       	ldd	r23, Y+12	; 0x0c
     eaa:	8d 85       	ldd	r24, Y+13	; 0x0d
     eac:	9e 85       	ldd	r25, Y+14	; 0x0e
     eae:	20 e0       	ldi	r18, 0x00	; 0
     eb0:	30 e0       	ldi	r19, 0x00	; 0
     eb2:	40 e2       	ldi	r20, 0x20	; 32
     eb4:	51 e4       	ldi	r21, 0x41	; 65
     eb6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     eba:	dc 01       	movw	r26, r24
     ebc:	cb 01       	movw	r24, r22
     ebe:	bc 01       	movw	r22, r24
     ec0:	cd 01       	movw	r24, r26
     ec2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ec6:	dc 01       	movw	r26, r24
     ec8:	cb 01       	movw	r24, r22
     eca:	9e 83       	std	Y+6, r25	; 0x06
     ecc:	8d 83       	std	Y+5, r24	; 0x05
     ece:	0f c0       	rjmp	.+30     	; 0xeee <main+0x288>
     ed0:	88 ec       	ldi	r24, 0xC8	; 200
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	9c 83       	std	Y+4, r25	; 0x04
     ed6:	8b 83       	std	Y+3, r24	; 0x03
     ed8:	8b 81       	ldd	r24, Y+3	; 0x03
     eda:	9c 81       	ldd	r25, Y+4	; 0x04
     edc:	01 97       	sbiw	r24, 0x01	; 1
     ede:	f1 f7       	brne	.-4      	; 0xedc <main+0x276>
     ee0:	9c 83       	std	Y+4, r25	; 0x04
     ee2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ee4:	8d 81       	ldd	r24, Y+5	; 0x05
     ee6:	9e 81       	ldd	r25, Y+6	; 0x06
     ee8:	01 97       	sbiw	r24, 0x01	; 1
     eea:	9e 83       	std	Y+6, r25	; 0x06
     eec:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     eee:	8d 81       	ldd	r24, Y+5	; 0x05
     ef0:	9e 81       	ldd	r25, Y+6	; 0x06
     ef2:	00 97       	sbiw	r24, 0x00	; 0
     ef4:	69 f7       	brne	.-38     	; 0xed0 <main+0x26a>
     ef6:	14 c0       	rjmp	.+40     	; 0xf20 <main+0x2ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ef8:	6f 81       	ldd	r22, Y+7	; 0x07
     efa:	78 85       	ldd	r23, Y+8	; 0x08
     efc:	89 85       	ldd	r24, Y+9	; 0x09
     efe:	9a 85       	ldd	r25, Y+10	; 0x0a
     f00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f04:	dc 01       	movw	r26, r24
     f06:	cb 01       	movw	r24, r22
     f08:	9e 83       	std	Y+6, r25	; 0x06
     f0a:	8d 83       	std	Y+5, r24	; 0x05
     f0c:	8d 81       	ldd	r24, Y+5	; 0x05
     f0e:	9e 81       	ldd	r25, Y+6	; 0x06
     f10:	9a 83       	std	Y+2, r25	; 0x02
     f12:	89 83       	std	Y+1, r24	; 0x01
     f14:	89 81       	ldd	r24, Y+1	; 0x01
     f16:	9a 81       	ldd	r25, Y+2	; 0x02
     f18:	01 97       	sbiw	r24, 0x01	; 1
     f1a:	f1 f7       	brne	.-4      	; 0xf18 <main+0x2b2>
     f1c:	9a 83       	std	Y+2, r25	; 0x02
     f1e:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(10);  /*Allow time for transmission & initialization*/

	DcMotor_init();
     f20:	0e 94 cc 05 	call	0xb98	; 0xb98 <DcMotor_init>

	Buzzer_init();
     f24:	0e 94 a3 05 	call	0xb46	; 0xb46 <Buzzer_init>

	/*Set the UART to state to ready until command (Byte) is received*/
	UART_nextState = UART_recieveByte();
     f28:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <UART_recieveByte>
     f2c:	80 93 7d 00 	sts	0x007D, r24
	/***************************** Main Loop ****************************/

	while(1)
	{
		/*Checks the required application function*/
		switch(UART_nextState)
     f30:	80 91 7d 00 	lds	r24, 0x007D
     f34:	e8 2f       	mov	r30, r24
     f36:	f0 e0       	ldi	r31, 0x00	; 0
     f38:	f8 ab       	std	Y+48, r31	; 0x30
     f3a:	ef a7       	std	Y+47, r30	; 0x2f
     f3c:	2f a5       	ldd	r18, Y+47	; 0x2f
     f3e:	38 a9       	ldd	r19, Y+48	; 0x30
     f40:	22 30       	cpi	r18, 0x02	; 2
     f42:	31 05       	cpc	r19, r1
     f44:	11 f1       	breq	.+68     	; 0xf8a <main+0x324>
     f46:	8f a5       	ldd	r24, Y+47	; 0x2f
     f48:	98 a9       	ldd	r25, Y+48	; 0x30
     f4a:	83 30       	cpi	r24, 0x03	; 3
     f4c:	91 05       	cpc	r25, r1
     f4e:	54 f4       	brge	.+20     	; 0xf64 <main+0x2fe>
     f50:	ef a5       	ldd	r30, Y+47	; 0x2f
     f52:	f8 a9       	ldd	r31, Y+48	; 0x30
     f54:	30 97       	sbiw	r30, 0x00	; 0
     f56:	89 f0       	breq	.+34     	; 0xf7a <main+0x314>
     f58:	2f a5       	ldd	r18, Y+47	; 0x2f
     f5a:	38 a9       	ldd	r19, Y+48	; 0x30
     f5c:	21 30       	cpi	r18, 0x01	; 1
     f5e:	31 05       	cpc	r19, r1
     f60:	89 f0       	breq	.+34     	; 0xf84 <main+0x31e>
     f62:	e6 cf       	rjmp	.-52     	; 0xf30 <main+0x2ca>
     f64:	8f a5       	ldd	r24, Y+47	; 0x2f
     f66:	98 a9       	ldd	r25, Y+48	; 0x30
     f68:	83 30       	cpi	r24, 0x03	; 3
     f6a:	91 05       	cpc	r25, r1
     f6c:	89 f0       	breq	.+34     	; 0xf90 <main+0x32a>
     f6e:	ef a5       	ldd	r30, Y+47	; 0x2f
     f70:	f8 a9       	ldd	r31, Y+48	; 0x30
     f72:	e4 30       	cpi	r30, 0x04	; 4
     f74:	f1 05       	cpc	r31, r1
     f76:	e1 f0       	breq	.+56     	; 0xfb0 <main+0x34a>
     f78:	db cf       	rjmp	.-74     	; 0xf30 <main+0x2ca>
		{

		case Loop: /*Ready mode until command is received*/
			UART_nextState = UART_recieveByte();
     f7a:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <UART_recieveByte>
     f7e:	80 93 7d 00 	sts	0x007D, r24
     f82:	d6 cf       	rjmp	.-84     	; 0xf30 <main+0x2ca>
			break;

		case SetPW: /*Match & set password inside EEPROM*/
			setPassword();
     f84:	0e 94 db 07 	call	0xfb6	; 0xfb6 <setPassword>
     f88:	d3 cf       	rjmp	.-90     	; 0xf30 <main+0x2ca>
			break;

		case EnterPW: /*Compare the entered password with the one saved inside EEPROM*/
			passwordEntry();
     f8a:	0e 94 c9 09 	call	0x1392	; 0x1392 <passwordEntry>
     f8e:	d0 cf       	rjmp	.-96     	; 0xf30 <main+0x2ca>
			break;

		case OpenningDoor: /*Start door opening operation */

			/*Set the function to be called by TIMER 1 ISR*/
			Timer1_setCallBack(&doorAction);
     f90:	80 e3       	ldi	r24, 0x30	; 48
     f92:	9b e0       	ldi	r25, 0x0B	; 11
     f94:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <Timer1_setCallBack>

			/*Initiate TIMER with the required configuration*/
			Timer1_init(&s_Timer1Config);
     f98:	ce 01       	movw	r24, r28
     f9a:	84 96       	adiw	r24, 0x24	; 36
     f9c:	0e 94 c6 0c 	call	0x198c	; 0x198c <Timer1_init>

			/*Send feedback command to HMI ECU for time synchronization*/
			UART_sendByte(UART_nextState);
     fa0:	80 91 7d 00 	lds	r24, 0x007D
     fa4:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <UART_sendByte>

			/*Send the application to empty loop until the operation is complete*/
			UART_nextState = EmptyLoop ;
     fa8:	85 e0       	ldi	r24, 0x05	; 5
     faa:	80 93 7d 00 	sts	0x007D, r24
     fae:	c0 cf       	rjmp	.-128    	; 0xf30 <main+0x2ca>

			break;

		case LockedMode :/*Enters the system into locked mode for predefined amount of time */

			lockedMode();
     fb0:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <lockedMode>
     fb4:	bd cf       	rjmp	.-134    	; 0xf30 <main+0x2ca>

00000fb6 <setPassword>:
/********************************************************************************
 *                              Functions Definitions                           *
 ********************************************************************************/

void setPassword()
{
     fb6:	df 93       	push	r29
     fb8:	cf 93       	push	r28
     fba:	cd b7       	in	r28, 0x3d	; 61
     fbc:	de b7       	in	r29, 0x3e	; 62
     fbe:	e6 97       	sbiw	r28, 0x36	; 54
     fc0:	0f b6       	in	r0, 0x3f	; 63
     fc2:	f8 94       	cli
     fc4:	de bf       	out	0x3e, r29	; 62
     fc6:	0f be       	out	0x3f, r0	; 63
     fc8:	cd bf       	out	0x3d, r28	; 61
	/*2 Local array of password size to receive the password digit in it*/
	uint8 firstPasswordEntry[PASSWORD_LENGTH] = {0} ;
     fca:	85 e0       	ldi	r24, 0x05	; 5
     fcc:	fe 01       	movw	r30, r28
     fce:	bd 96       	adiw	r30, 0x2d	; 45
     fd0:	df 01       	movw	r26, r30
     fd2:	98 2f       	mov	r25, r24
     fd4:	1d 92       	st	X+, r1
     fd6:	9a 95       	dec	r25
     fd8:	e9 f7       	brne	.-6      	; 0xfd4 <setPassword+0x1e>
	uint8 secondPasswordEntry[PASSWORD_LENGTH] = {0} ;
     fda:	85 e0       	ldi	r24, 0x05	; 5
     fdc:	fe 01       	movw	r30, r28
     fde:	f2 96       	adiw	r30, 0x32	; 50
     fe0:	df 01       	movw	r26, r30
     fe2:	98 2f       	mov	r25, r24
     fe4:	1d 92       	st	X+, r1
     fe6:	9a 95       	dec	r25
     fe8:	e9 f7       	brne	.-6      	; 0xfe4 <setPassword+0x2e>

	uint8 checkResults = 0;
     fea:	1c a6       	std	Y+44, r1	; 0x2c

	uint8 passwordDigit ;

	/*Receive first password Entry*/
	UART_recieveData(firstPasswordEntry,PASSWORD_LENGTH);
     fec:	ce 01       	movw	r24, r28
     fee:	8d 96       	adiw	r24, 0x2d	; 45
     ff0:	65 e0       	ldi	r22, 0x05	; 5
     ff2:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <UART_recieveData>
     ff6:	80 e0       	ldi	r24, 0x00	; 0
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	a8 ec       	ldi	r26, 0xC8	; 200
     ffc:	b2 e4       	ldi	r27, 0x42	; 66
     ffe:	8f a3       	std	Y+39, r24	; 0x27
    1000:	98 a7       	std	Y+40, r25	; 0x28
    1002:	a9 a7       	std	Y+41, r26	; 0x29
    1004:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1006:	6f a1       	ldd	r22, Y+39	; 0x27
    1008:	78 a5       	ldd	r23, Y+40	; 0x28
    100a:	89 a5       	ldd	r24, Y+41	; 0x29
    100c:	9a a5       	ldd	r25, Y+42	; 0x2a
    100e:	20 e0       	ldi	r18, 0x00	; 0
    1010:	30 e0       	ldi	r19, 0x00	; 0
    1012:	4a ef       	ldi	r20, 0xFA	; 250
    1014:	54 e4       	ldi	r21, 0x44	; 68
    1016:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    101a:	dc 01       	movw	r26, r24
    101c:	cb 01       	movw	r24, r22
    101e:	8b a3       	std	Y+35, r24	; 0x23
    1020:	9c a3       	std	Y+36, r25	; 0x24
    1022:	ad a3       	std	Y+37, r26	; 0x25
    1024:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1026:	6b a1       	ldd	r22, Y+35	; 0x23
    1028:	7c a1       	ldd	r23, Y+36	; 0x24
    102a:	8d a1       	ldd	r24, Y+37	; 0x25
    102c:	9e a1       	ldd	r25, Y+38	; 0x26
    102e:	20 e0       	ldi	r18, 0x00	; 0
    1030:	30 e0       	ldi	r19, 0x00	; 0
    1032:	40 e8       	ldi	r20, 0x80	; 128
    1034:	5f e3       	ldi	r21, 0x3F	; 63
    1036:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    103a:	88 23       	and	r24, r24
    103c:	2c f4       	brge	.+10     	; 0x1048 <setPassword+0x92>
		__ticks = 1;
    103e:	81 e0       	ldi	r24, 0x01	; 1
    1040:	90 e0       	ldi	r25, 0x00	; 0
    1042:	9a a3       	std	Y+34, r25	; 0x22
    1044:	89 a3       	std	Y+33, r24	; 0x21
    1046:	3f c0       	rjmp	.+126    	; 0x10c6 <setPassword+0x110>
	else if (__tmp > 65535)
    1048:	6b a1       	ldd	r22, Y+35	; 0x23
    104a:	7c a1       	ldd	r23, Y+36	; 0x24
    104c:	8d a1       	ldd	r24, Y+37	; 0x25
    104e:	9e a1       	ldd	r25, Y+38	; 0x26
    1050:	20 e0       	ldi	r18, 0x00	; 0
    1052:	3f ef       	ldi	r19, 0xFF	; 255
    1054:	4f e7       	ldi	r20, 0x7F	; 127
    1056:	57 e4       	ldi	r21, 0x47	; 71
    1058:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    105c:	18 16       	cp	r1, r24
    105e:	4c f5       	brge	.+82     	; 0x10b2 <setPassword+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1060:	6f a1       	ldd	r22, Y+39	; 0x27
    1062:	78 a5       	ldd	r23, Y+40	; 0x28
    1064:	89 a5       	ldd	r24, Y+41	; 0x29
    1066:	9a a5       	ldd	r25, Y+42	; 0x2a
    1068:	20 e0       	ldi	r18, 0x00	; 0
    106a:	30 e0       	ldi	r19, 0x00	; 0
    106c:	40 e2       	ldi	r20, 0x20	; 32
    106e:	51 e4       	ldi	r21, 0x41	; 65
    1070:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1074:	dc 01       	movw	r26, r24
    1076:	cb 01       	movw	r24, r22
    1078:	bc 01       	movw	r22, r24
    107a:	cd 01       	movw	r24, r26
    107c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1080:	dc 01       	movw	r26, r24
    1082:	cb 01       	movw	r24, r22
    1084:	9a a3       	std	Y+34, r25	; 0x22
    1086:	89 a3       	std	Y+33, r24	; 0x21
    1088:	0f c0       	rjmp	.+30     	; 0x10a8 <setPassword+0xf2>
    108a:	88 ec       	ldi	r24, 0xC8	; 200
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	98 a3       	std	Y+32, r25	; 0x20
    1090:	8f 8f       	std	Y+31, r24	; 0x1f
    1092:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1094:	98 a1       	ldd	r25, Y+32	; 0x20
    1096:	01 97       	sbiw	r24, 0x01	; 1
    1098:	f1 f7       	brne	.-4      	; 0x1096 <setPassword+0xe0>
    109a:	98 a3       	std	Y+32, r25	; 0x20
    109c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    109e:	89 a1       	ldd	r24, Y+33	; 0x21
    10a0:	9a a1       	ldd	r25, Y+34	; 0x22
    10a2:	01 97       	sbiw	r24, 0x01	; 1
    10a4:	9a a3       	std	Y+34, r25	; 0x22
    10a6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10a8:	89 a1       	ldd	r24, Y+33	; 0x21
    10aa:	9a a1       	ldd	r25, Y+34	; 0x22
    10ac:	00 97       	sbiw	r24, 0x00	; 0
    10ae:	69 f7       	brne	.-38     	; 0x108a <setPassword+0xd4>
    10b0:	14 c0       	rjmp	.+40     	; 0x10da <setPassword+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10b2:	6b a1       	ldd	r22, Y+35	; 0x23
    10b4:	7c a1       	ldd	r23, Y+36	; 0x24
    10b6:	8d a1       	ldd	r24, Y+37	; 0x25
    10b8:	9e a1       	ldd	r25, Y+38	; 0x26
    10ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10be:	dc 01       	movw	r26, r24
    10c0:	cb 01       	movw	r24, r22
    10c2:	9a a3       	std	Y+34, r25	; 0x22
    10c4:	89 a3       	std	Y+33, r24	; 0x21
    10c6:	89 a1       	ldd	r24, Y+33	; 0x21
    10c8:	9a a1       	ldd	r25, Y+34	; 0x22
    10ca:	9e 8f       	std	Y+30, r25	; 0x1e
    10cc:	8d 8f       	std	Y+29, r24	; 0x1d
    10ce:	8d 8d       	ldd	r24, Y+29	; 0x1d
    10d0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    10d2:	01 97       	sbiw	r24, 0x01	; 1
    10d4:	f1 f7       	brne	.-4      	; 0x10d2 <setPassword+0x11c>
    10d6:	9e 8f       	std	Y+30, r25	; 0x1e
    10d8:	8d 8f       	std	Y+29, r24	; 0x1d

	_delay_ms(100); /*Allow time for transmission*/

	/*Receive second password Entry*/
	UART_recieveData(secondPasswordEntry,PASSWORD_LENGTH);
    10da:	ce 01       	movw	r24, r28
    10dc:	c2 96       	adiw	r24, 0x32	; 50
    10de:	65 e0       	ldi	r22, 0x05	; 5
    10e0:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <UART_recieveData>
    10e4:	80 e0       	ldi	r24, 0x00	; 0
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	a8 ec       	ldi	r26, 0xC8	; 200
    10ea:	b2 e4       	ldi	r27, 0x42	; 66
    10ec:	89 8f       	std	Y+25, r24	; 0x19
    10ee:	9a 8f       	std	Y+26, r25	; 0x1a
    10f0:	ab 8f       	std	Y+27, r26	; 0x1b
    10f2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10f4:	69 8d       	ldd	r22, Y+25	; 0x19
    10f6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    10f8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    10fa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    10fc:	20 e0       	ldi	r18, 0x00	; 0
    10fe:	30 e0       	ldi	r19, 0x00	; 0
    1100:	4a ef       	ldi	r20, 0xFA	; 250
    1102:	54 e4       	ldi	r21, 0x44	; 68
    1104:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1108:	dc 01       	movw	r26, r24
    110a:	cb 01       	movw	r24, r22
    110c:	8d 8b       	std	Y+21, r24	; 0x15
    110e:	9e 8b       	std	Y+22, r25	; 0x16
    1110:	af 8b       	std	Y+23, r26	; 0x17
    1112:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1114:	6d 89       	ldd	r22, Y+21	; 0x15
    1116:	7e 89       	ldd	r23, Y+22	; 0x16
    1118:	8f 89       	ldd	r24, Y+23	; 0x17
    111a:	98 8d       	ldd	r25, Y+24	; 0x18
    111c:	20 e0       	ldi	r18, 0x00	; 0
    111e:	30 e0       	ldi	r19, 0x00	; 0
    1120:	40 e8       	ldi	r20, 0x80	; 128
    1122:	5f e3       	ldi	r21, 0x3F	; 63
    1124:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1128:	88 23       	and	r24, r24
    112a:	2c f4       	brge	.+10     	; 0x1136 <setPassword+0x180>
		__ticks = 1;
    112c:	81 e0       	ldi	r24, 0x01	; 1
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	9c 8b       	std	Y+20, r25	; 0x14
    1132:	8b 8b       	std	Y+19, r24	; 0x13
    1134:	3f c0       	rjmp	.+126    	; 0x11b4 <setPassword+0x1fe>
	else if (__tmp > 65535)
    1136:	6d 89       	ldd	r22, Y+21	; 0x15
    1138:	7e 89       	ldd	r23, Y+22	; 0x16
    113a:	8f 89       	ldd	r24, Y+23	; 0x17
    113c:	98 8d       	ldd	r25, Y+24	; 0x18
    113e:	20 e0       	ldi	r18, 0x00	; 0
    1140:	3f ef       	ldi	r19, 0xFF	; 255
    1142:	4f e7       	ldi	r20, 0x7F	; 127
    1144:	57 e4       	ldi	r21, 0x47	; 71
    1146:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    114a:	18 16       	cp	r1, r24
    114c:	4c f5       	brge	.+82     	; 0x11a0 <setPassword+0x1ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    114e:	69 8d       	ldd	r22, Y+25	; 0x19
    1150:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1152:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1154:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1156:	20 e0       	ldi	r18, 0x00	; 0
    1158:	30 e0       	ldi	r19, 0x00	; 0
    115a:	40 e2       	ldi	r20, 0x20	; 32
    115c:	51 e4       	ldi	r21, 0x41	; 65
    115e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1162:	dc 01       	movw	r26, r24
    1164:	cb 01       	movw	r24, r22
    1166:	bc 01       	movw	r22, r24
    1168:	cd 01       	movw	r24, r26
    116a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    116e:	dc 01       	movw	r26, r24
    1170:	cb 01       	movw	r24, r22
    1172:	9c 8b       	std	Y+20, r25	; 0x14
    1174:	8b 8b       	std	Y+19, r24	; 0x13
    1176:	0f c0       	rjmp	.+30     	; 0x1196 <setPassword+0x1e0>
    1178:	88 ec       	ldi	r24, 0xC8	; 200
    117a:	90 e0       	ldi	r25, 0x00	; 0
    117c:	9a 8b       	std	Y+18, r25	; 0x12
    117e:	89 8b       	std	Y+17, r24	; 0x11
    1180:	89 89       	ldd	r24, Y+17	; 0x11
    1182:	9a 89       	ldd	r25, Y+18	; 0x12
    1184:	01 97       	sbiw	r24, 0x01	; 1
    1186:	f1 f7       	brne	.-4      	; 0x1184 <setPassword+0x1ce>
    1188:	9a 8b       	std	Y+18, r25	; 0x12
    118a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    118c:	8b 89       	ldd	r24, Y+19	; 0x13
    118e:	9c 89       	ldd	r25, Y+20	; 0x14
    1190:	01 97       	sbiw	r24, 0x01	; 1
    1192:	9c 8b       	std	Y+20, r25	; 0x14
    1194:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1196:	8b 89       	ldd	r24, Y+19	; 0x13
    1198:	9c 89       	ldd	r25, Y+20	; 0x14
    119a:	00 97       	sbiw	r24, 0x00	; 0
    119c:	69 f7       	brne	.-38     	; 0x1178 <setPassword+0x1c2>
    119e:	14 c0       	rjmp	.+40     	; 0x11c8 <setPassword+0x212>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11a0:	6d 89       	ldd	r22, Y+21	; 0x15
    11a2:	7e 89       	ldd	r23, Y+22	; 0x16
    11a4:	8f 89       	ldd	r24, Y+23	; 0x17
    11a6:	98 8d       	ldd	r25, Y+24	; 0x18
    11a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11ac:	dc 01       	movw	r26, r24
    11ae:	cb 01       	movw	r24, r22
    11b0:	9c 8b       	std	Y+20, r25	; 0x14
    11b2:	8b 8b       	std	Y+19, r24	; 0x13
    11b4:	8b 89       	ldd	r24, Y+19	; 0x13
    11b6:	9c 89       	ldd	r25, Y+20	; 0x14
    11b8:	98 8b       	std	Y+16, r25	; 0x10
    11ba:	8f 87       	std	Y+15, r24	; 0x0f
    11bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    11be:	98 89       	ldd	r25, Y+16	; 0x10
    11c0:	01 97       	sbiw	r24, 0x01	; 1
    11c2:	f1 f7       	brne	.-4      	; 0x11c0 <setPassword+0x20a>
    11c4:	98 8b       	std	Y+16, r25	; 0x10
    11c6:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(100); /*Allow time for transmission*/

	/*Return the results of the password matching inside checkResults */
	checkResults = passwordMatching(firstPasswordEntry,secondPasswordEntry);
    11c8:	ce 01       	movw	r24, r28
    11ca:	8d 96       	adiw	r24, 0x2d	; 45
    11cc:	9e 01       	movw	r18, r28
    11ce:	2e 5c       	subi	r18, 0xCE	; 206
    11d0:	3f 4f       	sbci	r19, 0xFF	; 255
    11d2:	b9 01       	movw	r22, r18
    11d4:	0e 94 94 09 	call	0x1328	; 0x1328 <passwordMatching>
    11d8:	8c a7       	std	Y+44, r24	; 0x2c


	/*If password is unmatched , send the required command to HMI ECU to try again*/
	if(1 == checkResults)
    11da:	8c a5       	ldd	r24, Y+44	; 0x2c
    11dc:	81 30       	cpi	r24, 0x01	; 1
    11de:	21 f4       	brne	.+8      	; 0x11e8 <setPassword+0x232>
	{
		UART_sendByte(UNMATCHED_PASSWORD);
    11e0:	81 e0       	ldi	r24, 0x01	; 1
    11e2:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <UART_sendByte>
    11e6:	95 c0       	rjmp	.+298    	; 0x1312 <setPassword+0x35c>
	}
	/*If password is matched , save the password inside EEPROM memory at the pre-defined location*/
	else if (0 == checkResults)
    11e8:	8c a5       	ldd	r24, Y+44	; 0x2c
    11ea:	88 23       	and	r24, r24
    11ec:	09 f0       	breq	.+2      	; 0x11f0 <setPassword+0x23a>
    11ee:	91 c0       	rjmp	.+290    	; 0x1312 <setPassword+0x35c>
	{
		for(passwordDigit = 0 ; passwordDigit < PASSWORD_LENGTH ; passwordDigit++)
    11f0:	1b a6       	std	Y+43, r1	; 0x2b
    11f2:	88 c0       	rjmp	.+272    	; 0x1304 <setPassword+0x34e>
		{
			EEPROM_writeByte((PASSWORD_ADDRESS)+passwordDigit,firstPasswordEntry[passwordDigit]);
    11f4:	8b a5       	ldd	r24, Y+43	; 0x2b
    11f6:	88 2f       	mov	r24, r24
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	80 50       	subi	r24, 0x00	; 0
    11fc:	9f 4f       	sbci	r25, 0xFF	; 255
    11fe:	ac 01       	movw	r20, r24
    1200:	8b a5       	ldd	r24, Y+43	; 0x2b
    1202:	28 2f       	mov	r18, r24
    1204:	30 e0       	ldi	r19, 0x00	; 0
    1206:	ce 01       	movw	r24, r28
    1208:	8d 96       	adiw	r24, 0x2d	; 45
    120a:	fc 01       	movw	r30, r24
    120c:	e2 0f       	add	r30, r18
    120e:	f3 1f       	adc	r31, r19
    1210:	20 81       	ld	r18, Z
    1212:	ca 01       	movw	r24, r20
    1214:	62 2f       	mov	r22, r18
    1216:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <EEPROM_writeByte>
    121a:	80 e0       	ldi	r24, 0x00	; 0
    121c:	90 e0       	ldi	r25, 0x00	; 0
    121e:	a0 ea       	ldi	r26, 0xA0	; 160
    1220:	b1 e4       	ldi	r27, 0x41	; 65
    1222:	8b 87       	std	Y+11, r24	; 0x0b
    1224:	9c 87       	std	Y+12, r25	; 0x0c
    1226:	ad 87       	std	Y+13, r26	; 0x0d
    1228:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    122a:	6b 85       	ldd	r22, Y+11	; 0x0b
    122c:	7c 85       	ldd	r23, Y+12	; 0x0c
    122e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1230:	9e 85       	ldd	r25, Y+14	; 0x0e
    1232:	20 e0       	ldi	r18, 0x00	; 0
    1234:	30 e0       	ldi	r19, 0x00	; 0
    1236:	4a ef       	ldi	r20, 0xFA	; 250
    1238:	54 e4       	ldi	r21, 0x44	; 68
    123a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    123e:	dc 01       	movw	r26, r24
    1240:	cb 01       	movw	r24, r22
    1242:	8f 83       	std	Y+7, r24	; 0x07
    1244:	98 87       	std	Y+8, r25	; 0x08
    1246:	a9 87       	std	Y+9, r26	; 0x09
    1248:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    124a:	6f 81       	ldd	r22, Y+7	; 0x07
    124c:	78 85       	ldd	r23, Y+8	; 0x08
    124e:	89 85       	ldd	r24, Y+9	; 0x09
    1250:	9a 85       	ldd	r25, Y+10	; 0x0a
    1252:	20 e0       	ldi	r18, 0x00	; 0
    1254:	30 e0       	ldi	r19, 0x00	; 0
    1256:	40 e8       	ldi	r20, 0x80	; 128
    1258:	5f e3       	ldi	r21, 0x3F	; 63
    125a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    125e:	88 23       	and	r24, r24
    1260:	2c f4       	brge	.+10     	; 0x126c <setPassword+0x2b6>
		__ticks = 1;
    1262:	81 e0       	ldi	r24, 0x01	; 1
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	9e 83       	std	Y+6, r25	; 0x06
    1268:	8d 83       	std	Y+5, r24	; 0x05
    126a:	3f c0       	rjmp	.+126    	; 0x12ea <setPassword+0x334>
	else if (__tmp > 65535)
    126c:	6f 81       	ldd	r22, Y+7	; 0x07
    126e:	78 85       	ldd	r23, Y+8	; 0x08
    1270:	89 85       	ldd	r24, Y+9	; 0x09
    1272:	9a 85       	ldd	r25, Y+10	; 0x0a
    1274:	20 e0       	ldi	r18, 0x00	; 0
    1276:	3f ef       	ldi	r19, 0xFF	; 255
    1278:	4f e7       	ldi	r20, 0x7F	; 127
    127a:	57 e4       	ldi	r21, 0x47	; 71
    127c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1280:	18 16       	cp	r1, r24
    1282:	4c f5       	brge	.+82     	; 0x12d6 <setPassword+0x320>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1284:	6b 85       	ldd	r22, Y+11	; 0x0b
    1286:	7c 85       	ldd	r23, Y+12	; 0x0c
    1288:	8d 85       	ldd	r24, Y+13	; 0x0d
    128a:	9e 85       	ldd	r25, Y+14	; 0x0e
    128c:	20 e0       	ldi	r18, 0x00	; 0
    128e:	30 e0       	ldi	r19, 0x00	; 0
    1290:	40 e2       	ldi	r20, 0x20	; 32
    1292:	51 e4       	ldi	r21, 0x41	; 65
    1294:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1298:	dc 01       	movw	r26, r24
    129a:	cb 01       	movw	r24, r22
    129c:	bc 01       	movw	r22, r24
    129e:	cd 01       	movw	r24, r26
    12a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12a4:	dc 01       	movw	r26, r24
    12a6:	cb 01       	movw	r24, r22
    12a8:	9e 83       	std	Y+6, r25	; 0x06
    12aa:	8d 83       	std	Y+5, r24	; 0x05
    12ac:	0f c0       	rjmp	.+30     	; 0x12cc <setPassword+0x316>
    12ae:	88 ec       	ldi	r24, 0xC8	; 200
    12b0:	90 e0       	ldi	r25, 0x00	; 0
    12b2:	9c 83       	std	Y+4, r25	; 0x04
    12b4:	8b 83       	std	Y+3, r24	; 0x03
    12b6:	8b 81       	ldd	r24, Y+3	; 0x03
    12b8:	9c 81       	ldd	r25, Y+4	; 0x04
    12ba:	01 97       	sbiw	r24, 0x01	; 1
    12bc:	f1 f7       	brne	.-4      	; 0x12ba <setPassword+0x304>
    12be:	9c 83       	std	Y+4, r25	; 0x04
    12c0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12c2:	8d 81       	ldd	r24, Y+5	; 0x05
    12c4:	9e 81       	ldd	r25, Y+6	; 0x06
    12c6:	01 97       	sbiw	r24, 0x01	; 1
    12c8:	9e 83       	std	Y+6, r25	; 0x06
    12ca:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12cc:	8d 81       	ldd	r24, Y+5	; 0x05
    12ce:	9e 81       	ldd	r25, Y+6	; 0x06
    12d0:	00 97       	sbiw	r24, 0x00	; 0
    12d2:	69 f7       	brne	.-38     	; 0x12ae <setPassword+0x2f8>
    12d4:	14 c0       	rjmp	.+40     	; 0x12fe <setPassword+0x348>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12d6:	6f 81       	ldd	r22, Y+7	; 0x07
    12d8:	78 85       	ldd	r23, Y+8	; 0x08
    12da:	89 85       	ldd	r24, Y+9	; 0x09
    12dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    12de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12e2:	dc 01       	movw	r26, r24
    12e4:	cb 01       	movw	r24, r22
    12e6:	9e 83       	std	Y+6, r25	; 0x06
    12e8:	8d 83       	std	Y+5, r24	; 0x05
    12ea:	8d 81       	ldd	r24, Y+5	; 0x05
    12ec:	9e 81       	ldd	r25, Y+6	; 0x06
    12ee:	9a 83       	std	Y+2, r25	; 0x02
    12f0:	89 83       	std	Y+1, r24	; 0x01
    12f2:	89 81       	ldd	r24, Y+1	; 0x01
    12f4:	9a 81       	ldd	r25, Y+2	; 0x02
    12f6:	01 97       	sbiw	r24, 0x01	; 1
    12f8:	f1 f7       	brne	.-4      	; 0x12f6 <setPassword+0x340>
    12fa:	9a 83       	std	Y+2, r25	; 0x02
    12fc:	89 83       	std	Y+1, r24	; 0x01
		UART_sendByte(UNMATCHED_PASSWORD);
	}
	/*If password is matched , save the password inside EEPROM memory at the pre-defined location*/
	else if (0 == checkResults)
	{
		for(passwordDigit = 0 ; passwordDigit < PASSWORD_LENGTH ; passwordDigit++)
    12fe:	8b a5       	ldd	r24, Y+43	; 0x2b
    1300:	8f 5f       	subi	r24, 0xFF	; 255
    1302:	8b a7       	std	Y+43, r24	; 0x2b
    1304:	8b a5       	ldd	r24, Y+43	; 0x2b
    1306:	85 30       	cpi	r24, 0x05	; 5
    1308:	08 f4       	brcc	.+2      	; 0x130c <setPassword+0x356>
    130a:	74 cf       	rjmp	.-280    	; 0x11f4 <setPassword+0x23e>
		{
			EEPROM_writeByte((PASSWORD_ADDRESS)+passwordDigit,firstPasswordEntry[passwordDigit]);
			_delay_ms(20); /*Allow transmition time*/
		}
		/*send the required command to HMI ECU to proceed to Main Menu*/
		UART_sendByte(MAIN_MENU);
    130c:	80 e0       	ldi	r24, 0x00	; 0
    130e:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <UART_sendByte>
	}
	/*Set application status back to ready mode*/
	UART_nextState = Loop;
    1312:	10 92 7d 00 	sts	0x007D, r1
}
    1316:	e6 96       	adiw	r28, 0x36	; 54
    1318:	0f b6       	in	r0, 0x3f	; 63
    131a:	f8 94       	cli
    131c:	de bf       	out	0x3e, r29	; 62
    131e:	0f be       	out	0x3f, r0	; 63
    1320:	cd bf       	out	0x3d, r28	; 61
    1322:	cf 91       	pop	r28
    1324:	df 91       	pop	r29
    1326:	08 95       	ret

00001328 <passwordMatching>:

uint8 passwordMatching(const uint8 * a_firstEntry , const uint8 * a_secondEntry)
{
    1328:	df 93       	push	r29
    132a:	cf 93       	push	r28
    132c:	00 d0       	rcall	.+0      	; 0x132e <passwordMatching+0x6>
    132e:	00 d0       	rcall	.+0      	; 0x1330 <passwordMatching+0x8>
    1330:	00 d0       	rcall	.+0      	; 0x1332 <passwordMatching+0xa>
    1332:	cd b7       	in	r28, 0x3d	; 61
    1334:	de b7       	in	r29, 0x3e	; 62
    1336:	9c 83       	std	Y+4, r25	; 0x04
    1338:	8b 83       	std	Y+3, r24	; 0x03
    133a:	7e 83       	std	Y+6, r23	; 0x06
    133c:	6d 83       	std	Y+5, r22	; 0x05
	uint8 mismatchFlag = 0; /*Default value for no mismatch */
    133e:	1a 82       	std	Y+2, r1	; 0x02

	uint8 passwordDigit ;

	/*Loop on the two password entries and check if there is any mismatch*/
	for(passwordDigit = 0 ; passwordDigit < PASSWORD_LENGTH ; passwordDigit++)
    1340:	19 82       	std	Y+1, r1	; 0x01
    1342:	1a c0       	rjmp	.+52     	; 0x1378 <passwordMatching+0x50>
	{
		if(a_firstEntry[passwordDigit] != a_secondEntry[passwordDigit])
    1344:	89 81       	ldd	r24, Y+1	; 0x01
    1346:	28 2f       	mov	r18, r24
    1348:	30 e0       	ldi	r19, 0x00	; 0
    134a:	8b 81       	ldd	r24, Y+3	; 0x03
    134c:	9c 81       	ldd	r25, Y+4	; 0x04
    134e:	fc 01       	movw	r30, r24
    1350:	e2 0f       	add	r30, r18
    1352:	f3 1f       	adc	r31, r19
    1354:	40 81       	ld	r20, Z
    1356:	89 81       	ldd	r24, Y+1	; 0x01
    1358:	28 2f       	mov	r18, r24
    135a:	30 e0       	ldi	r19, 0x00	; 0
    135c:	8d 81       	ldd	r24, Y+5	; 0x05
    135e:	9e 81       	ldd	r25, Y+6	; 0x06
    1360:	fc 01       	movw	r30, r24
    1362:	e2 0f       	add	r30, r18
    1364:	f3 1f       	adc	r31, r19
    1366:	80 81       	ld	r24, Z
    1368:	48 17       	cp	r20, r24
    136a:	19 f0       	breq	.+6      	; 0x1372 <passwordMatching+0x4a>
		{
			/*If mismatch occur , return with the results & break the loop*/
			mismatchFlag = 1;
    136c:	81 e0       	ldi	r24, 0x01	; 1
    136e:	8a 83       	std	Y+2, r24	; 0x02
    1370:	06 c0       	rjmp	.+12     	; 0x137e <passwordMatching+0x56>
	uint8 mismatchFlag = 0; /*Default value for no mismatch */

	uint8 passwordDigit ;

	/*Loop on the two password entries and check if there is any mismatch*/
	for(passwordDigit = 0 ; passwordDigit < PASSWORD_LENGTH ; passwordDigit++)
    1372:	89 81       	ldd	r24, Y+1	; 0x01
    1374:	8f 5f       	subi	r24, 0xFF	; 255
    1376:	89 83       	std	Y+1, r24	; 0x01
    1378:	89 81       	ldd	r24, Y+1	; 0x01
    137a:	85 30       	cpi	r24, 0x05	; 5
    137c:	18 f3       	brcs	.-58     	; 0x1344 <passwordMatching+0x1c>
			mismatchFlag = 1;
			break;
		}
	}
	/*If no mismatch occurs , just return the default value*/
	return mismatchFlag ;
    137e:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1380:	26 96       	adiw	r28, 0x06	; 6
    1382:	0f b6       	in	r0, 0x3f	; 63
    1384:	f8 94       	cli
    1386:	de bf       	out	0x3e, r29	; 62
    1388:	0f be       	out	0x3f, r0	; 63
    138a:	cd bf       	out	0x3d, r28	; 61
    138c:	cf 91       	pop	r28
    138e:	df 91       	pop	r29
    1390:	08 95       	ret

00001392 <passwordEntry>:

void passwordEntry(void)
{
    1392:	df 93       	push	r29
    1394:	cf 93       	push	r28
    1396:	cd b7       	in	r28, 0x3d	; 61
    1398:	de b7       	in	r29, 0x3e	; 62
    139a:	64 97       	sbiw	r28, 0x14	; 20
    139c:	0f b6       	in	r0, 0x3f	; 63
    139e:	f8 94       	cli
    13a0:	de bf       	out	0x3e, r29	; 62
    13a2:	0f be       	out	0x3f, r0	; 63
    13a4:	cd bf       	out	0x3d, r28	; 61
	uint8 checkResults = 0;
    13a6:	1f 86       	std	Y+15, r1	; 0x0f

	/*Local array of password size to receive the password digits in it*/
	uint8 passwordBuffer[PASSWORD_LENGTH] = {0};
    13a8:	85 e0       	ldi	r24, 0x05	; 5
    13aa:	fe 01       	movw	r30, r28
    13ac:	70 96       	adiw	r30, 0x10	; 16
    13ae:	df 01       	movw	r26, r30
    13b0:	98 2f       	mov	r25, r24
    13b2:	1d 92       	st	X+, r1
    13b4:	9a 95       	dec	r25
    13b6:	e9 f7       	brne	.-6      	; 0x13b2 <passwordEntry+0x20>

	/*Receive the password Entry*/
	UART_recieveData(passwordBuffer,PASSWORD_LENGTH);
    13b8:	ce 01       	movw	r24, r28
    13ba:	40 96       	adiw	r24, 0x10	; 16
    13bc:	65 e0       	ldi	r22, 0x05	; 5
    13be:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <UART_recieveData>
    13c2:	80 e0       	ldi	r24, 0x00	; 0
    13c4:	90 e0       	ldi	r25, 0x00	; 0
    13c6:	a8 ec       	ldi	r26, 0xC8	; 200
    13c8:	b2 e4       	ldi	r27, 0x42	; 66
    13ca:	8b 87       	std	Y+11, r24	; 0x0b
    13cc:	9c 87       	std	Y+12, r25	; 0x0c
    13ce:	ad 87       	std	Y+13, r26	; 0x0d
    13d0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    13d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    13d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    13d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    13da:	20 e0       	ldi	r18, 0x00	; 0
    13dc:	30 e0       	ldi	r19, 0x00	; 0
    13de:	4a ef       	ldi	r20, 0xFA	; 250
    13e0:	54 e4       	ldi	r21, 0x44	; 68
    13e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13e6:	dc 01       	movw	r26, r24
    13e8:	cb 01       	movw	r24, r22
    13ea:	8f 83       	std	Y+7, r24	; 0x07
    13ec:	98 87       	std	Y+8, r25	; 0x08
    13ee:	a9 87       	std	Y+9, r26	; 0x09
    13f0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    13f2:	6f 81       	ldd	r22, Y+7	; 0x07
    13f4:	78 85       	ldd	r23, Y+8	; 0x08
    13f6:	89 85       	ldd	r24, Y+9	; 0x09
    13f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    13fa:	20 e0       	ldi	r18, 0x00	; 0
    13fc:	30 e0       	ldi	r19, 0x00	; 0
    13fe:	40 e8       	ldi	r20, 0x80	; 128
    1400:	5f e3       	ldi	r21, 0x3F	; 63
    1402:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1406:	88 23       	and	r24, r24
    1408:	2c f4       	brge	.+10     	; 0x1414 <passwordEntry+0x82>
		__ticks = 1;
    140a:	81 e0       	ldi	r24, 0x01	; 1
    140c:	90 e0       	ldi	r25, 0x00	; 0
    140e:	9e 83       	std	Y+6, r25	; 0x06
    1410:	8d 83       	std	Y+5, r24	; 0x05
    1412:	3f c0       	rjmp	.+126    	; 0x1492 <passwordEntry+0x100>
	else if (__tmp > 65535)
    1414:	6f 81       	ldd	r22, Y+7	; 0x07
    1416:	78 85       	ldd	r23, Y+8	; 0x08
    1418:	89 85       	ldd	r24, Y+9	; 0x09
    141a:	9a 85       	ldd	r25, Y+10	; 0x0a
    141c:	20 e0       	ldi	r18, 0x00	; 0
    141e:	3f ef       	ldi	r19, 0xFF	; 255
    1420:	4f e7       	ldi	r20, 0x7F	; 127
    1422:	57 e4       	ldi	r21, 0x47	; 71
    1424:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1428:	18 16       	cp	r1, r24
    142a:	4c f5       	brge	.+82     	; 0x147e <passwordEntry+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    142c:	6b 85       	ldd	r22, Y+11	; 0x0b
    142e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1430:	8d 85       	ldd	r24, Y+13	; 0x0d
    1432:	9e 85       	ldd	r25, Y+14	; 0x0e
    1434:	20 e0       	ldi	r18, 0x00	; 0
    1436:	30 e0       	ldi	r19, 0x00	; 0
    1438:	40 e2       	ldi	r20, 0x20	; 32
    143a:	51 e4       	ldi	r21, 0x41	; 65
    143c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1440:	dc 01       	movw	r26, r24
    1442:	cb 01       	movw	r24, r22
    1444:	bc 01       	movw	r22, r24
    1446:	cd 01       	movw	r24, r26
    1448:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    144c:	dc 01       	movw	r26, r24
    144e:	cb 01       	movw	r24, r22
    1450:	9e 83       	std	Y+6, r25	; 0x06
    1452:	8d 83       	std	Y+5, r24	; 0x05
    1454:	0f c0       	rjmp	.+30     	; 0x1474 <passwordEntry+0xe2>
    1456:	88 ec       	ldi	r24, 0xC8	; 200
    1458:	90 e0       	ldi	r25, 0x00	; 0
    145a:	9c 83       	std	Y+4, r25	; 0x04
    145c:	8b 83       	std	Y+3, r24	; 0x03
    145e:	8b 81       	ldd	r24, Y+3	; 0x03
    1460:	9c 81       	ldd	r25, Y+4	; 0x04
    1462:	01 97       	sbiw	r24, 0x01	; 1
    1464:	f1 f7       	brne	.-4      	; 0x1462 <passwordEntry+0xd0>
    1466:	9c 83       	std	Y+4, r25	; 0x04
    1468:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    146a:	8d 81       	ldd	r24, Y+5	; 0x05
    146c:	9e 81       	ldd	r25, Y+6	; 0x06
    146e:	01 97       	sbiw	r24, 0x01	; 1
    1470:	9e 83       	std	Y+6, r25	; 0x06
    1472:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1474:	8d 81       	ldd	r24, Y+5	; 0x05
    1476:	9e 81       	ldd	r25, Y+6	; 0x06
    1478:	00 97       	sbiw	r24, 0x00	; 0
    147a:	69 f7       	brne	.-38     	; 0x1456 <passwordEntry+0xc4>
    147c:	14 c0       	rjmp	.+40     	; 0x14a6 <passwordEntry+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    147e:	6f 81       	ldd	r22, Y+7	; 0x07
    1480:	78 85       	ldd	r23, Y+8	; 0x08
    1482:	89 85       	ldd	r24, Y+9	; 0x09
    1484:	9a 85       	ldd	r25, Y+10	; 0x0a
    1486:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    148a:	dc 01       	movw	r26, r24
    148c:	cb 01       	movw	r24, r22
    148e:	9e 83       	std	Y+6, r25	; 0x06
    1490:	8d 83       	std	Y+5, r24	; 0x05
    1492:	8d 81       	ldd	r24, Y+5	; 0x05
    1494:	9e 81       	ldd	r25, Y+6	; 0x06
    1496:	9a 83       	std	Y+2, r25	; 0x02
    1498:	89 83       	std	Y+1, r24	; 0x01
    149a:	89 81       	ldd	r24, Y+1	; 0x01
    149c:	9a 81       	ldd	r25, Y+2	; 0x02
    149e:	01 97       	sbiw	r24, 0x01	; 1
    14a0:	f1 f7       	brne	.-4      	; 0x149e <passwordEntry+0x10c>
    14a2:	9a 83       	std	Y+2, r25	; 0x02
    14a4:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(100); /*Allow time for transmission*/

	/*Send the for password comparing with the one saved in EEPROM
	 * & return the results*/
	checkResults = passwordEntryMatching(passwordBuffer);
    14a6:	ce 01       	movw	r24, r28
    14a8:	40 96       	adiw	r24, 0x10	; 16
    14aa:	0e 94 6d 0a 	call	0x14da	; 0x14da <passwordEntryMatching>
    14ae:	8f 87       	std	Y+15, r24	; 0x0f

	/*Send the relative command whether it's correct / incorrect*/
	checkResults==1?UART_sendByte(IncorrectPW):UART_sendByte(CorrectPW);
    14b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    14b2:	81 30       	cpi	r24, 0x01	; 1
    14b4:	21 f4       	brne	.+8      	; 0x14be <passwordEntry+0x12c>
    14b6:	81 e0       	ldi	r24, 0x01	; 1
    14b8:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <UART_sendByte>
    14bc:	03 c0       	rjmp	.+6      	; 0x14c4 <passwordEntry+0x132>
    14be:	82 e0       	ldi	r24, 0x02	; 2
    14c0:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <UART_sendByte>

	/*Set application status back to ready mode*/
	UART_nextState = Loop;
    14c4:	10 92 7d 00 	sts	0x007D, r1
}
    14c8:	64 96       	adiw	r28, 0x14	; 20
    14ca:	0f b6       	in	r0, 0x3f	; 63
    14cc:	f8 94       	cli
    14ce:	de bf       	out	0x3e, r29	; 62
    14d0:	0f be       	out	0x3f, r0	; 63
    14d2:	cd bf       	out	0x3d, r28	; 61
    14d4:	cf 91       	pop	r28
    14d6:	df 91       	pop	r29
    14d8:	08 95       	ret

000014da <passwordEntryMatching>:

uint8 passwordEntryMatching(const uint8 * pwBuffer)
{
    14da:	df 93       	push	r29
    14dc:	cf 93       	push	r28
    14de:	cd b7       	in	r28, 0x3d	; 61
    14e0:	de b7       	in	r29, 0x3e	; 62
    14e2:	67 97       	sbiw	r28, 0x17	; 23
    14e4:	0f b6       	in	r0, 0x3f	; 63
    14e6:	f8 94       	cli
    14e8:	de bf       	out	0x3e, r29	; 62
    14ea:	0f be       	out	0x3f, r0	; 63
    14ec:	cd bf       	out	0x3d, r28	; 61
    14ee:	9f 8b       	std	Y+23, r25	; 0x17
    14f0:	8e 8b       	std	Y+22, r24	; 0x16
	uint8 mismatchFlag = 0; /*Default value for no mismatch */
    14f2:	18 8a       	std	Y+16, r1	; 0x10

	uint8 passwordDigit ;

	/*Local array of password size call in the saved password from EEPROM*/
	uint8 savedPassword[PASSWORD_LENGTH] = {0};
    14f4:	85 e0       	ldi	r24, 0x05	; 5
    14f6:	fe 01       	movw	r30, r28
    14f8:	71 96       	adiw	r30, 0x11	; 17
    14fa:	df 01       	movw	r26, r30
    14fc:	98 2f       	mov	r25, r24
    14fe:	1d 92       	st	X+, r1
    1500:	9a 95       	dec	r25
    1502:	e9 f7       	brne	.-6      	; 0x14fe <passwordEntryMatching+0x24>

	for(passwordDigit = 0 ; passwordDigit < PASSWORD_LENGTH ; passwordDigit++)
    1504:	1f 86       	std	Y+15, r1	; 0x0f
    1506:	9e c0       	rjmp	.+316    	; 0x1644 <passwordEntryMatching+0x16a>
	{
		/*Read the saved password digits from EEPROM pre-define location
		 * set it inside the local array*/
		EEPROM_readByte((PASSWORD_ADDRESS)+passwordDigit,&savedPassword[passwordDigit]);
    1508:	8f 85       	ldd	r24, Y+15	; 0x0f
    150a:	88 2f       	mov	r24, r24
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	80 50       	subi	r24, 0x00	; 0
    1510:	9f 4f       	sbci	r25, 0xFF	; 255
    1512:	ac 01       	movw	r20, r24
    1514:	8f 85       	ldd	r24, Y+15	; 0x0f
    1516:	88 2f       	mov	r24, r24
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	9e 01       	movw	r18, r28
    151c:	2f 5e       	subi	r18, 0xEF	; 239
    151e:	3f 4f       	sbci	r19, 0xFF	; 255
    1520:	28 0f       	add	r18, r24
    1522:	39 1f       	adc	r19, r25
    1524:	ca 01       	movw	r24, r20
    1526:	b9 01       	movw	r22, r18
    1528:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <EEPROM_readByte>
    152c:	80 e0       	ldi	r24, 0x00	; 0
    152e:	90 e0       	ldi	r25, 0x00	; 0
    1530:	a0 ea       	ldi	r26, 0xA0	; 160
    1532:	b1 e4       	ldi	r27, 0x41	; 65
    1534:	8b 87       	std	Y+11, r24	; 0x0b
    1536:	9c 87       	std	Y+12, r25	; 0x0c
    1538:	ad 87       	std	Y+13, r26	; 0x0d
    153a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    153c:	6b 85       	ldd	r22, Y+11	; 0x0b
    153e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1540:	8d 85       	ldd	r24, Y+13	; 0x0d
    1542:	9e 85       	ldd	r25, Y+14	; 0x0e
    1544:	20 e0       	ldi	r18, 0x00	; 0
    1546:	30 e0       	ldi	r19, 0x00	; 0
    1548:	4a ef       	ldi	r20, 0xFA	; 250
    154a:	54 e4       	ldi	r21, 0x44	; 68
    154c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1550:	dc 01       	movw	r26, r24
    1552:	cb 01       	movw	r24, r22
    1554:	8f 83       	std	Y+7, r24	; 0x07
    1556:	98 87       	std	Y+8, r25	; 0x08
    1558:	a9 87       	std	Y+9, r26	; 0x09
    155a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    155c:	6f 81       	ldd	r22, Y+7	; 0x07
    155e:	78 85       	ldd	r23, Y+8	; 0x08
    1560:	89 85       	ldd	r24, Y+9	; 0x09
    1562:	9a 85       	ldd	r25, Y+10	; 0x0a
    1564:	20 e0       	ldi	r18, 0x00	; 0
    1566:	30 e0       	ldi	r19, 0x00	; 0
    1568:	40 e8       	ldi	r20, 0x80	; 128
    156a:	5f e3       	ldi	r21, 0x3F	; 63
    156c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1570:	88 23       	and	r24, r24
    1572:	2c f4       	brge	.+10     	; 0x157e <passwordEntryMatching+0xa4>
		__ticks = 1;
    1574:	81 e0       	ldi	r24, 0x01	; 1
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	9e 83       	std	Y+6, r25	; 0x06
    157a:	8d 83       	std	Y+5, r24	; 0x05
    157c:	3f c0       	rjmp	.+126    	; 0x15fc <passwordEntryMatching+0x122>
	else if (__tmp > 65535)
    157e:	6f 81       	ldd	r22, Y+7	; 0x07
    1580:	78 85       	ldd	r23, Y+8	; 0x08
    1582:	89 85       	ldd	r24, Y+9	; 0x09
    1584:	9a 85       	ldd	r25, Y+10	; 0x0a
    1586:	20 e0       	ldi	r18, 0x00	; 0
    1588:	3f ef       	ldi	r19, 0xFF	; 255
    158a:	4f e7       	ldi	r20, 0x7F	; 127
    158c:	57 e4       	ldi	r21, 0x47	; 71
    158e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1592:	18 16       	cp	r1, r24
    1594:	4c f5       	brge	.+82     	; 0x15e8 <passwordEntryMatching+0x10e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1596:	6b 85       	ldd	r22, Y+11	; 0x0b
    1598:	7c 85       	ldd	r23, Y+12	; 0x0c
    159a:	8d 85       	ldd	r24, Y+13	; 0x0d
    159c:	9e 85       	ldd	r25, Y+14	; 0x0e
    159e:	20 e0       	ldi	r18, 0x00	; 0
    15a0:	30 e0       	ldi	r19, 0x00	; 0
    15a2:	40 e2       	ldi	r20, 0x20	; 32
    15a4:	51 e4       	ldi	r21, 0x41	; 65
    15a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15aa:	dc 01       	movw	r26, r24
    15ac:	cb 01       	movw	r24, r22
    15ae:	bc 01       	movw	r22, r24
    15b0:	cd 01       	movw	r24, r26
    15b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15b6:	dc 01       	movw	r26, r24
    15b8:	cb 01       	movw	r24, r22
    15ba:	9e 83       	std	Y+6, r25	; 0x06
    15bc:	8d 83       	std	Y+5, r24	; 0x05
    15be:	0f c0       	rjmp	.+30     	; 0x15de <passwordEntryMatching+0x104>
    15c0:	88 ec       	ldi	r24, 0xC8	; 200
    15c2:	90 e0       	ldi	r25, 0x00	; 0
    15c4:	9c 83       	std	Y+4, r25	; 0x04
    15c6:	8b 83       	std	Y+3, r24	; 0x03
    15c8:	8b 81       	ldd	r24, Y+3	; 0x03
    15ca:	9c 81       	ldd	r25, Y+4	; 0x04
    15cc:	01 97       	sbiw	r24, 0x01	; 1
    15ce:	f1 f7       	brne	.-4      	; 0x15cc <passwordEntryMatching+0xf2>
    15d0:	9c 83       	std	Y+4, r25	; 0x04
    15d2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15d4:	8d 81       	ldd	r24, Y+5	; 0x05
    15d6:	9e 81       	ldd	r25, Y+6	; 0x06
    15d8:	01 97       	sbiw	r24, 0x01	; 1
    15da:	9e 83       	std	Y+6, r25	; 0x06
    15dc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15de:	8d 81       	ldd	r24, Y+5	; 0x05
    15e0:	9e 81       	ldd	r25, Y+6	; 0x06
    15e2:	00 97       	sbiw	r24, 0x00	; 0
    15e4:	69 f7       	brne	.-38     	; 0x15c0 <passwordEntryMatching+0xe6>
    15e6:	14 c0       	rjmp	.+40     	; 0x1610 <passwordEntryMatching+0x136>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15e8:	6f 81       	ldd	r22, Y+7	; 0x07
    15ea:	78 85       	ldd	r23, Y+8	; 0x08
    15ec:	89 85       	ldd	r24, Y+9	; 0x09
    15ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    15f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15f4:	dc 01       	movw	r26, r24
    15f6:	cb 01       	movw	r24, r22
    15f8:	9e 83       	std	Y+6, r25	; 0x06
    15fa:	8d 83       	std	Y+5, r24	; 0x05
    15fc:	8d 81       	ldd	r24, Y+5	; 0x05
    15fe:	9e 81       	ldd	r25, Y+6	; 0x06
    1600:	9a 83       	std	Y+2, r25	; 0x02
    1602:	89 83       	std	Y+1, r24	; 0x01
    1604:	89 81       	ldd	r24, Y+1	; 0x01
    1606:	9a 81       	ldd	r25, Y+2	; 0x02
    1608:	01 97       	sbiw	r24, 0x01	; 1
    160a:	f1 f7       	brne	.-4      	; 0x1608 <passwordEntryMatching+0x12e>
    160c:	9a 83       	std	Y+2, r25	; 0x02
    160e:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(20); /*Allow transmition time*/

		/*Loop on the password entry and check if there is any mismatch
		 * with the saved password in EEPROM*/
		if(pwBuffer[passwordDigit] != savedPassword[passwordDigit])
    1610:	8f 85       	ldd	r24, Y+15	; 0x0f
    1612:	28 2f       	mov	r18, r24
    1614:	30 e0       	ldi	r19, 0x00	; 0
    1616:	8e 89       	ldd	r24, Y+22	; 0x16
    1618:	9f 89       	ldd	r25, Y+23	; 0x17
    161a:	fc 01       	movw	r30, r24
    161c:	e2 0f       	add	r30, r18
    161e:	f3 1f       	adc	r31, r19
    1620:	40 81       	ld	r20, Z
    1622:	8f 85       	ldd	r24, Y+15	; 0x0f
    1624:	28 2f       	mov	r18, r24
    1626:	30 e0       	ldi	r19, 0x00	; 0
    1628:	ce 01       	movw	r24, r28
    162a:	41 96       	adiw	r24, 0x11	; 17
    162c:	fc 01       	movw	r30, r24
    162e:	e2 0f       	add	r30, r18
    1630:	f3 1f       	adc	r31, r19
    1632:	80 81       	ld	r24, Z
    1634:	48 17       	cp	r20, r24
    1636:	19 f0       	breq	.+6      	; 0x163e <passwordEntryMatching+0x164>
		{
			/*If mismatch occur , return with the results & break the loop*/
			mismatchFlag = 1;
    1638:	81 e0       	ldi	r24, 0x01	; 1
    163a:	88 8b       	std	Y+16, r24	; 0x10
    163c:	07 c0       	rjmp	.+14     	; 0x164c <passwordEntryMatching+0x172>
	uint8 passwordDigit ;

	/*Local array of password size call in the saved password from EEPROM*/
	uint8 savedPassword[PASSWORD_LENGTH] = {0};

	for(passwordDigit = 0 ; passwordDigit < PASSWORD_LENGTH ; passwordDigit++)
    163e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1640:	8f 5f       	subi	r24, 0xFF	; 255
    1642:	8f 87       	std	Y+15, r24	; 0x0f
    1644:	8f 85       	ldd	r24, Y+15	; 0x0f
    1646:	85 30       	cpi	r24, 0x05	; 5
    1648:	08 f4       	brcc	.+2      	; 0x164c <passwordEntryMatching+0x172>
    164a:	5e cf       	rjmp	.-324    	; 0x1508 <passwordEntryMatching+0x2e>
			mismatchFlag = 1;
			break;
		}
	}
	/*If no mismatch occurs , just return the default value*/
	return mismatchFlag ;
    164c:	88 89       	ldd	r24, Y+16	; 0x10
}
    164e:	67 96       	adiw	r28, 0x17	; 23
    1650:	0f b6       	in	r0, 0x3f	; 63
    1652:	f8 94       	cli
    1654:	de bf       	out	0x3e, r29	; 62
    1656:	0f be       	out	0x3f, r0	; 63
    1658:	cd bf       	out	0x3d, r28	; 61
    165a:	cf 91       	pop	r28
    165c:	df 91       	pop	r29
    165e:	08 95       	ret

00001660 <doorAction>:

void doorAction(void)
{
    1660:	df 93       	push	r29
    1662:	cf 93       	push	r28
    1664:	cd b7       	in	r28, 0x3d	; 61
    1666:	de b7       	in	r29, 0x3e	; 62
	 * the run time & set to volatile to disable compiler
	 * optimization on the variable*/
	static volatile uint8 doorTimerCounter = MOTOR_START_TIME;

	/*Timer counter value is within unlocking mode*/
	if(doorTimerCounter < MOTOR_UNLOCKING_TIME)
    1668:	80 91 7a 00 	lds	r24, 0x007A
    166c:	8f 30       	cpi	r24, 0x0F	; 15
    166e:	68 f4       	brcc	.+26     	; 0x168a <doorAction+0x2a>
	{
		/*Instead of setting DC_Motor state at each loop
		 * in which it sets the PWM settings and state
		 * every single time , just set at the first of
		 * each state to save CPU Load & context switching*/
		if(MOTOR_START_TIME == doorTimerCounter)
    1670:	80 91 7a 00 	lds	r24, 0x007A
    1674:	88 23       	and	r24, r24
    1676:	19 f4       	brne	.+6      	; 0x167e <doorAction+0x1e>

		/*Rotate Motor Clockwise at full speed*/
		DcMotor_Rotate(CW);
    1678:	81 e0       	ldi	r24, 0x01	; 1
    167a:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <DcMotor_Rotate>
		/*Increment timer by one , which means one second has passed */
		doorTimerCounter++;
    167e:	80 91 7a 00 	lds	r24, 0x007A
    1682:	8f 5f       	subi	r24, 0xFF	; 255
    1684:	80 93 7a 00 	sts	0x007A, r24
    1688:	37 c0       	rjmp	.+110    	; 0x16f8 <doorAction+0x98>
	}

	/*Timer counter value is within stop mode*/
	else if (doorTimerCounter >=MOTOR_UNLOCKING_TIME && doorTimerCounter  <MOTOR_STOPPING_TIME)
    168a:	80 91 7a 00 	lds	r24, 0x007A
    168e:	8f 30       	cpi	r24, 0x0F	; 15
    1690:	88 f0       	brcs	.+34     	; 0x16b4 <doorAction+0x54>
    1692:	80 91 7a 00 	lds	r24, 0x007A
    1696:	82 31       	cpi	r24, 0x12	; 18
    1698:	68 f4       	brcc	.+26     	; 0x16b4 <doorAction+0x54>
	{
		if(MOTOR_UNLOCKING_TIME == doorTimerCounter)
    169a:	80 91 7a 00 	lds	r24, 0x007A
    169e:	8f 30       	cpi	r24, 0x0F	; 15
    16a0:	19 f4       	brne	.+6      	; 0x16a8 <doorAction+0x48>
		/*Stop the motor rotation*/
		DcMotor_Rotate(STOP);
    16a2:	80 e0       	ldi	r24, 0x00	; 0
    16a4:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <DcMotor_Rotate>
		/*Increment timer by one , which means one second has passed */
		doorTimerCounter++;
    16a8:	80 91 7a 00 	lds	r24, 0x007A
    16ac:	8f 5f       	subi	r24, 0xFF	; 255
    16ae:	80 93 7a 00 	sts	0x007A, r24
    16b2:	22 c0       	rjmp	.+68     	; 0x16f8 <doorAction+0x98>

	}

	/*Timer counter value is within locking mode*/
	else if(doorTimerCounter >= MOTOR_STOPPING_TIME && doorTimerCounter  < MOTOR_LOCKING_TIME)
    16b4:	80 91 7a 00 	lds	r24, 0x007A
    16b8:	82 31       	cpi	r24, 0x12	; 18
    16ba:	88 f0       	brcs	.+34     	; 0x16de <doorAction+0x7e>
    16bc:	80 91 7a 00 	lds	r24, 0x007A
    16c0:	81 32       	cpi	r24, 0x21	; 33
    16c2:	68 f4       	brcc	.+26     	; 0x16de <doorAction+0x7e>
	{
		if(MOTOR_STOPPING_TIME == doorTimerCounter)
    16c4:	80 91 7a 00 	lds	r24, 0x007A
    16c8:	82 31       	cpi	r24, 0x12	; 18
    16ca:	19 f4       	brne	.+6      	; 0x16d2 <doorAction+0x72>
		DcMotor_Rotate(ACW);
    16cc:	82 e0       	ldi	r24, 0x02	; 2
    16ce:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <DcMotor_Rotate>
		/*Increment timer by one , which means one second has passed */
		doorTimerCounter++;
    16d2:	80 91 7a 00 	lds	r24, 0x007A
    16d6:	8f 5f       	subi	r24, 0xFF	; 255
    16d8:	80 93 7a 00 	sts	0x007A, r24
    16dc:	0d c0       	rjmp	.+26     	; 0x16f8 <doorAction+0x98>
	}

	/*IF Timer counter reached the last required time , Stop DC motor ,
	* Stop / DeInit. TIMER 1 , reset counter & set back application to ready mode*/
	else if(doorTimerCounter == MOTOR_LOCKING_TIME)
    16de:	80 91 7a 00 	lds	r24, 0x007A
    16e2:	81 32       	cpi	r24, 0x21	; 33
    16e4:	49 f4       	brne	.+18     	; 0x16f8 <doorAction+0x98>
	{
		DcMotor_Rotate(STOP);
    16e6:	80 e0       	ldi	r24, 0x00	; 0
    16e8:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <DcMotor_Rotate>
		Timer1_deInit();
    16ec:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <Timer1_deInit>
		doorTimerCounter=0;
    16f0:	10 92 7a 00 	sts	0x007A, r1
		UART_nextState = Loop ;
    16f4:	10 92 7d 00 	sts	0x007D, r1
	}
}
    16f8:	cf 91       	pop	r28
    16fa:	df 91       	pop	r29
    16fc:	08 95       	ret

000016fe <lockedMode>:

void lockedMode(void)
{
    16fe:	df 93       	push	r29
    1700:	cf 93       	push	r28
    1702:	cd b7       	in	r28, 0x3d	; 61
    1704:	de b7       	in	r29, 0x3e	; 62
    1706:	6d 97       	sbiw	r28, 0x1d	; 29
    1708:	0f b6       	in	r0, 0x3f	; 63
    170a:	f8 94       	cli
    170c:	de bf       	out	0x3e, r29	; 62
    170e:	0f be       	out	0x3f, r0	; 63
    1710:	cd bf       	out	0x3d, r28	; 61
	uint8 LockTimer ;


	/*Loop on the following function for predefined duration
	 * to Lock the system functions & operations */
	for(LockTimer=0 ; LockTimer<(LOCK_DURATION/500) ; LockTimer++) /*60000/500 = 120*/
    1712:	1d 8e       	std	Y+29, r1	; 0x1d
    1714:	eb c0       	rjmp	.+470    	; 0x18ec <lockedMode+0x1ee>
	 {
		/*Creates a Beeping Sound :D*/
		///////*Alternative method = using Timer 2 PWM wave generation method*//////
		Buzzer_on();
    1716:	0e 94 b4 05 	call	0xb68	; 0xb68 <Buzzer_on>
    171a:	80 e0       	ldi	r24, 0x00	; 0
    171c:	90 e0       	ldi	r25, 0x00	; 0
    171e:	aa e7       	ldi	r26, 0x7A	; 122
    1720:	b3 e4       	ldi	r27, 0x43	; 67
    1722:	89 8f       	std	Y+25, r24	; 0x19
    1724:	9a 8f       	std	Y+26, r25	; 0x1a
    1726:	ab 8f       	std	Y+27, r26	; 0x1b
    1728:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    172a:	69 8d       	ldd	r22, Y+25	; 0x19
    172c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    172e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1730:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1732:	20 e0       	ldi	r18, 0x00	; 0
    1734:	30 e0       	ldi	r19, 0x00	; 0
    1736:	4a ef       	ldi	r20, 0xFA	; 250
    1738:	54 e4       	ldi	r21, 0x44	; 68
    173a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    173e:	dc 01       	movw	r26, r24
    1740:	cb 01       	movw	r24, r22
    1742:	8d 8b       	std	Y+21, r24	; 0x15
    1744:	9e 8b       	std	Y+22, r25	; 0x16
    1746:	af 8b       	std	Y+23, r26	; 0x17
    1748:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    174a:	6d 89       	ldd	r22, Y+21	; 0x15
    174c:	7e 89       	ldd	r23, Y+22	; 0x16
    174e:	8f 89       	ldd	r24, Y+23	; 0x17
    1750:	98 8d       	ldd	r25, Y+24	; 0x18
    1752:	20 e0       	ldi	r18, 0x00	; 0
    1754:	30 e0       	ldi	r19, 0x00	; 0
    1756:	40 e8       	ldi	r20, 0x80	; 128
    1758:	5f e3       	ldi	r21, 0x3F	; 63
    175a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    175e:	88 23       	and	r24, r24
    1760:	2c f4       	brge	.+10     	; 0x176c <lockedMode+0x6e>
		__ticks = 1;
    1762:	81 e0       	ldi	r24, 0x01	; 1
    1764:	90 e0       	ldi	r25, 0x00	; 0
    1766:	9c 8b       	std	Y+20, r25	; 0x14
    1768:	8b 8b       	std	Y+19, r24	; 0x13
    176a:	3f c0       	rjmp	.+126    	; 0x17ea <lockedMode+0xec>
	else if (__tmp > 65535)
    176c:	6d 89       	ldd	r22, Y+21	; 0x15
    176e:	7e 89       	ldd	r23, Y+22	; 0x16
    1770:	8f 89       	ldd	r24, Y+23	; 0x17
    1772:	98 8d       	ldd	r25, Y+24	; 0x18
    1774:	20 e0       	ldi	r18, 0x00	; 0
    1776:	3f ef       	ldi	r19, 0xFF	; 255
    1778:	4f e7       	ldi	r20, 0x7F	; 127
    177a:	57 e4       	ldi	r21, 0x47	; 71
    177c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1780:	18 16       	cp	r1, r24
    1782:	4c f5       	brge	.+82     	; 0x17d6 <lockedMode+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1784:	69 8d       	ldd	r22, Y+25	; 0x19
    1786:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1788:	8b 8d       	ldd	r24, Y+27	; 0x1b
    178a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    178c:	20 e0       	ldi	r18, 0x00	; 0
    178e:	30 e0       	ldi	r19, 0x00	; 0
    1790:	40 e2       	ldi	r20, 0x20	; 32
    1792:	51 e4       	ldi	r21, 0x41	; 65
    1794:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1798:	dc 01       	movw	r26, r24
    179a:	cb 01       	movw	r24, r22
    179c:	bc 01       	movw	r22, r24
    179e:	cd 01       	movw	r24, r26
    17a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17a4:	dc 01       	movw	r26, r24
    17a6:	cb 01       	movw	r24, r22
    17a8:	9c 8b       	std	Y+20, r25	; 0x14
    17aa:	8b 8b       	std	Y+19, r24	; 0x13
    17ac:	0f c0       	rjmp	.+30     	; 0x17cc <lockedMode+0xce>
    17ae:	88 ec       	ldi	r24, 0xC8	; 200
    17b0:	90 e0       	ldi	r25, 0x00	; 0
    17b2:	9a 8b       	std	Y+18, r25	; 0x12
    17b4:	89 8b       	std	Y+17, r24	; 0x11
    17b6:	89 89       	ldd	r24, Y+17	; 0x11
    17b8:	9a 89       	ldd	r25, Y+18	; 0x12
    17ba:	01 97       	sbiw	r24, 0x01	; 1
    17bc:	f1 f7       	brne	.-4      	; 0x17ba <lockedMode+0xbc>
    17be:	9a 8b       	std	Y+18, r25	; 0x12
    17c0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17c2:	8b 89       	ldd	r24, Y+19	; 0x13
    17c4:	9c 89       	ldd	r25, Y+20	; 0x14
    17c6:	01 97       	sbiw	r24, 0x01	; 1
    17c8:	9c 8b       	std	Y+20, r25	; 0x14
    17ca:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17cc:	8b 89       	ldd	r24, Y+19	; 0x13
    17ce:	9c 89       	ldd	r25, Y+20	; 0x14
    17d0:	00 97       	sbiw	r24, 0x00	; 0
    17d2:	69 f7       	brne	.-38     	; 0x17ae <lockedMode+0xb0>
    17d4:	14 c0       	rjmp	.+40     	; 0x17fe <lockedMode+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17d6:	6d 89       	ldd	r22, Y+21	; 0x15
    17d8:	7e 89       	ldd	r23, Y+22	; 0x16
    17da:	8f 89       	ldd	r24, Y+23	; 0x17
    17dc:	98 8d       	ldd	r25, Y+24	; 0x18
    17de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17e2:	dc 01       	movw	r26, r24
    17e4:	cb 01       	movw	r24, r22
    17e6:	9c 8b       	std	Y+20, r25	; 0x14
    17e8:	8b 8b       	std	Y+19, r24	; 0x13
    17ea:	8b 89       	ldd	r24, Y+19	; 0x13
    17ec:	9c 89       	ldd	r25, Y+20	; 0x14
    17ee:	98 8b       	std	Y+16, r25	; 0x10
    17f0:	8f 87       	std	Y+15, r24	; 0x0f
    17f2:	8f 85       	ldd	r24, Y+15	; 0x0f
    17f4:	98 89       	ldd	r25, Y+16	; 0x10
    17f6:	01 97       	sbiw	r24, 0x01	; 1
    17f8:	f1 f7       	brne	.-4      	; 0x17f6 <lockedMode+0xf8>
    17fa:	98 8b       	std	Y+16, r25	; 0x10
    17fc:	8f 87       	std	Y+15, r24	; 0x0f

		_delay_ms(250);

		Buzzer_off();
    17fe:	0e 94 c0 05 	call	0xb80	; 0xb80 <Buzzer_off>
    1802:	80 e0       	ldi	r24, 0x00	; 0
    1804:	90 e0       	ldi	r25, 0x00	; 0
    1806:	aa e7       	ldi	r26, 0x7A	; 122
    1808:	b3 e4       	ldi	r27, 0x43	; 67
    180a:	8b 87       	std	Y+11, r24	; 0x0b
    180c:	9c 87       	std	Y+12, r25	; 0x0c
    180e:	ad 87       	std	Y+13, r26	; 0x0d
    1810:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1812:	6b 85       	ldd	r22, Y+11	; 0x0b
    1814:	7c 85       	ldd	r23, Y+12	; 0x0c
    1816:	8d 85       	ldd	r24, Y+13	; 0x0d
    1818:	9e 85       	ldd	r25, Y+14	; 0x0e
    181a:	20 e0       	ldi	r18, 0x00	; 0
    181c:	30 e0       	ldi	r19, 0x00	; 0
    181e:	4a ef       	ldi	r20, 0xFA	; 250
    1820:	54 e4       	ldi	r21, 0x44	; 68
    1822:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1826:	dc 01       	movw	r26, r24
    1828:	cb 01       	movw	r24, r22
    182a:	8f 83       	std	Y+7, r24	; 0x07
    182c:	98 87       	std	Y+8, r25	; 0x08
    182e:	a9 87       	std	Y+9, r26	; 0x09
    1830:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1832:	6f 81       	ldd	r22, Y+7	; 0x07
    1834:	78 85       	ldd	r23, Y+8	; 0x08
    1836:	89 85       	ldd	r24, Y+9	; 0x09
    1838:	9a 85       	ldd	r25, Y+10	; 0x0a
    183a:	20 e0       	ldi	r18, 0x00	; 0
    183c:	30 e0       	ldi	r19, 0x00	; 0
    183e:	40 e8       	ldi	r20, 0x80	; 128
    1840:	5f e3       	ldi	r21, 0x3F	; 63
    1842:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1846:	88 23       	and	r24, r24
    1848:	2c f4       	brge	.+10     	; 0x1854 <lockedMode+0x156>
		__ticks = 1;
    184a:	81 e0       	ldi	r24, 0x01	; 1
    184c:	90 e0       	ldi	r25, 0x00	; 0
    184e:	9e 83       	std	Y+6, r25	; 0x06
    1850:	8d 83       	std	Y+5, r24	; 0x05
    1852:	3f c0       	rjmp	.+126    	; 0x18d2 <lockedMode+0x1d4>
	else if (__tmp > 65535)
    1854:	6f 81       	ldd	r22, Y+7	; 0x07
    1856:	78 85       	ldd	r23, Y+8	; 0x08
    1858:	89 85       	ldd	r24, Y+9	; 0x09
    185a:	9a 85       	ldd	r25, Y+10	; 0x0a
    185c:	20 e0       	ldi	r18, 0x00	; 0
    185e:	3f ef       	ldi	r19, 0xFF	; 255
    1860:	4f e7       	ldi	r20, 0x7F	; 127
    1862:	57 e4       	ldi	r21, 0x47	; 71
    1864:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1868:	18 16       	cp	r1, r24
    186a:	4c f5       	brge	.+82     	; 0x18be <lockedMode+0x1c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    186c:	6b 85       	ldd	r22, Y+11	; 0x0b
    186e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1870:	8d 85       	ldd	r24, Y+13	; 0x0d
    1872:	9e 85       	ldd	r25, Y+14	; 0x0e
    1874:	20 e0       	ldi	r18, 0x00	; 0
    1876:	30 e0       	ldi	r19, 0x00	; 0
    1878:	40 e2       	ldi	r20, 0x20	; 32
    187a:	51 e4       	ldi	r21, 0x41	; 65
    187c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1880:	dc 01       	movw	r26, r24
    1882:	cb 01       	movw	r24, r22
    1884:	bc 01       	movw	r22, r24
    1886:	cd 01       	movw	r24, r26
    1888:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    188c:	dc 01       	movw	r26, r24
    188e:	cb 01       	movw	r24, r22
    1890:	9e 83       	std	Y+6, r25	; 0x06
    1892:	8d 83       	std	Y+5, r24	; 0x05
    1894:	0f c0       	rjmp	.+30     	; 0x18b4 <lockedMode+0x1b6>
    1896:	88 ec       	ldi	r24, 0xC8	; 200
    1898:	90 e0       	ldi	r25, 0x00	; 0
    189a:	9c 83       	std	Y+4, r25	; 0x04
    189c:	8b 83       	std	Y+3, r24	; 0x03
    189e:	8b 81       	ldd	r24, Y+3	; 0x03
    18a0:	9c 81       	ldd	r25, Y+4	; 0x04
    18a2:	01 97       	sbiw	r24, 0x01	; 1
    18a4:	f1 f7       	brne	.-4      	; 0x18a2 <lockedMode+0x1a4>
    18a6:	9c 83       	std	Y+4, r25	; 0x04
    18a8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18aa:	8d 81       	ldd	r24, Y+5	; 0x05
    18ac:	9e 81       	ldd	r25, Y+6	; 0x06
    18ae:	01 97       	sbiw	r24, 0x01	; 1
    18b0:	9e 83       	std	Y+6, r25	; 0x06
    18b2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18b4:	8d 81       	ldd	r24, Y+5	; 0x05
    18b6:	9e 81       	ldd	r25, Y+6	; 0x06
    18b8:	00 97       	sbiw	r24, 0x00	; 0
    18ba:	69 f7       	brne	.-38     	; 0x1896 <lockedMode+0x198>
    18bc:	14 c0       	rjmp	.+40     	; 0x18e6 <lockedMode+0x1e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18be:	6f 81       	ldd	r22, Y+7	; 0x07
    18c0:	78 85       	ldd	r23, Y+8	; 0x08
    18c2:	89 85       	ldd	r24, Y+9	; 0x09
    18c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    18c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18ca:	dc 01       	movw	r26, r24
    18cc:	cb 01       	movw	r24, r22
    18ce:	9e 83       	std	Y+6, r25	; 0x06
    18d0:	8d 83       	std	Y+5, r24	; 0x05
    18d2:	8d 81       	ldd	r24, Y+5	; 0x05
    18d4:	9e 81       	ldd	r25, Y+6	; 0x06
    18d6:	9a 83       	std	Y+2, r25	; 0x02
    18d8:	89 83       	std	Y+1, r24	; 0x01
    18da:	89 81       	ldd	r24, Y+1	; 0x01
    18dc:	9a 81       	ldd	r25, Y+2	; 0x02
    18de:	01 97       	sbiw	r24, 0x01	; 1
    18e0:	f1 f7       	brne	.-4      	; 0x18de <lockedMode+0x1e0>
    18e2:	9a 83       	std	Y+2, r25	; 0x02
    18e4:	89 83       	std	Y+1, r24	; 0x01
	uint8 LockTimer ;


	/*Loop on the following function for predefined duration
	 * to Lock the system functions & operations */
	for(LockTimer=0 ; LockTimer<(LOCK_DURATION/500) ; LockTimer++) /*60000/500 = 120*/
    18e6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    18e8:	8f 5f       	subi	r24, 0xFF	; 255
    18ea:	8d 8f       	std	Y+29, r24	; 0x1d
    18ec:	8d 8d       	ldd	r24, Y+29	; 0x1d
    18ee:	88 37       	cpi	r24, 0x78	; 120
    18f0:	08 f4       	brcc	.+2      	; 0x18f4 <lockedMode+0x1f6>
    18f2:	11 cf       	rjmp	.-478    	; 0x1716 <lockedMode+0x18>

		_delay_ms(250);
	 }

	/*Set application back to ready mode*/
	UART_nextState=Loop;
    18f4:	10 92 7d 00 	sts	0x007D, r1

	/*Sends feedback to HMI ECU that the locked mode has been exited*/
	UART_sendByte(UART_nextState);
    18f8:	80 91 7d 00 	lds	r24, 0x007D
    18fc:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <UART_sendByte>
}
    1900:	6d 96       	adiw	r28, 0x1d	; 29
    1902:	0f b6       	in	r0, 0x3f	; 63
    1904:	f8 94       	cli
    1906:	de bf       	out	0x3e, r29	; 62
    1908:	0f be       	out	0x3f, r0	; 63
    190a:	cd bf       	out	0x3d, r28	; 61
    190c:	cf 91       	pop	r28
    190e:	df 91       	pop	r29
    1910:	08 95       	ret

00001912 <PWM_Timer0_Start>:
/*					Functions Definitions					   */
/***************************************************************/

/*Initialize and start the PWM of Timer0 with required duty cycle*/
void PWM_Timer0_Start(uint8 duty_cycle)
{
    1912:	df 93       	push	r29
    1914:	cf 93       	push	r28
    1916:	0f 92       	push	r0
    1918:	cd b7       	in	r28, 0x3d	; 61
    191a:	de b7       	in	r29, 0x3e	; 62
    191c:	89 83       	std	Y+1, r24	; 0x01
	/*Sets the Enable pin of OC0 as output for PWM signal */
	GPIO_setupPinDirection(DC_MOTOR_EN_PORT,DC_MOTOR_EN_PIN,PIN_OUTPUT);
    191e:	81 e0       	ldi	r24, 0x01	; 1
    1920:	63 e0       	ldi	r22, 0x03	; 3
    1922:	41 e0       	ldi	r20, 0x01	; 1
    1924:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <GPIO_setupPinDirection>

	if(0 == duty_cycle)
    1928:	89 81       	ldd	r24, Y+1	; 0x01
    192a:	88 23       	and	r24, r24
    192c:	51 f4       	brne	.+20     	; 0x1942 <PWM_Timer0_Start+0x30>
	{
		/*Turns off Timer0-PWM to save power / CPU load*/
		TCCR0 = 0 ;
    192e:	e3 e5       	ldi	r30, 0x53	; 83
    1930:	f0 e0       	ldi	r31, 0x00	; 0
    1932:	10 82       	st	Z, r1
		OCR0  = 0 ;
    1934:	ec e5       	ldi	r30, 0x5C	; 92
    1936:	f0 e0       	ldi	r31, 0x00	; 0
    1938:	10 82       	st	Z, r1
		TCNT0 = 0 ;
    193a:	e2 e5       	ldi	r30, 0x52	; 82
    193c:	f0 e0       	ldi	r31, 0x00	; 0
    193e:	10 82       	st	Z, r1
    1940:	21 c0       	rjmp	.+66     	; 0x1984 <PWM_Timer0_Start+0x72>
	{
		/*Sets Timer0 mode on Fast PWM
		 * Set PWM on non-inverting mode
		 * Set FCPU pre-scaler on FCPU/8
		 * to set duty cycle freq. on 500 Hz */
		TCCR0 = (1<<WGM00) |  (1<<WGM01) | (1<<COM01) | (1<<CS01) ;
    1942:	e3 e5       	ldi	r30, 0x53	; 83
    1944:	f0 e0       	ldi	r31, 0x00	; 0
    1946:	8a e6       	ldi	r24, 0x6A	; 106
    1948:	80 83       	st	Z, r24

		/*Counter Starts from Zero */
		TCNT0 = 0;
    194a:	e2 e5       	ldi	r30, 0x52	; 82
    194c:	f0 e0       	ldi	r31, 0x00	; 0
    194e:	10 82       	st	Z, r1

		/*Sets the duty cycle value according to function argument */
		OCR0 = ((duty_cycle * MAX_TIMER_VALUE)/(100));
    1950:	ec e5       	ldi	r30, 0x5C	; 92
    1952:	f0 e0       	ldi	r31, 0x00	; 0
    1954:	89 81       	ldd	r24, Y+1	; 0x01
    1956:	48 2f       	mov	r20, r24
    1958:	50 e0       	ldi	r21, 0x00	; 0
    195a:	ca 01       	movw	r24, r20
    195c:	9c 01       	movw	r18, r24
    195e:	22 0f       	add	r18, r18
    1960:	33 1f       	adc	r19, r19
    1962:	c9 01       	movw	r24, r18
    1964:	96 95       	lsr	r25
    1966:	98 2f       	mov	r25, r24
    1968:	88 27       	eor	r24, r24
    196a:	97 95       	ror	r25
    196c:	87 95       	ror	r24
    196e:	82 1b       	sub	r24, r18
    1970:	93 0b       	sbc	r25, r19
    1972:	84 0f       	add	r24, r20
    1974:	95 1f       	adc	r25, r21
    1976:	24 e6       	ldi	r18, 0x64	; 100
    1978:	30 e0       	ldi	r19, 0x00	; 0
    197a:	b9 01       	movw	r22, r18
    197c:	0e 94 a9 13 	call	0x2752	; 0x2752 <__divmodhi4>
    1980:	cb 01       	movw	r24, r22
    1982:	80 83       	st	Z, r24
	}
}
    1984:	0f 90       	pop	r0
    1986:	cf 91       	pop	r28
    1988:	df 91       	pop	r29
    198a:	08 95       	ret

0000198c <Timer1_init>:
 *******************************************************************************/

/* Description :
 * Initialize TIMER1 with required configuration from Config_Ptr*/
void Timer1_init(const Timer1_ConfigType * Config_Ptr)
{
    198c:	df 93       	push	r29
    198e:	cf 93       	push	r28
    1990:	00 d0       	rcall	.+0      	; 0x1992 <Timer1_init+0x6>
    1992:	00 d0       	rcall	.+0      	; 0x1994 <Timer1_init+0x8>
    1994:	cd b7       	in	r28, 0x3d	; 61
    1996:	de b7       	in	r29, 0x3e	; 62
    1998:	9a 83       	std	Y+2, r25	; 0x02
    199a:	89 83       	std	Y+1, r24	; 0x01
	/*Set Initial counting value inside TCNT1*/
	TCNT1 = Config_Ptr->initial_value;
    199c:	ac e4       	ldi	r26, 0x4C	; 76
    199e:	b0 e0       	ldi	r27, 0x00	; 0
    19a0:	e9 81       	ldd	r30, Y+1	; 0x01
    19a2:	fa 81       	ldd	r31, Y+2	; 0x02
    19a4:	80 81       	ld	r24, Z
    19a6:	91 81       	ldd	r25, Z+1	; 0x01
    19a8:	11 96       	adiw	r26, 0x01	; 1
    19aa:	9c 93       	st	X, r25
    19ac:	8e 93       	st	-X, r24
	*  COM1B1:0 = 0 Disable Compare Output Mode for Compare unit B
	*  FOC1A  	= 1 Force Output Compare for Compare unit A
	*  FOC1B 	= 1 Force Output Compare for Compare unit B
	*  WGM11:0  = 0 Waveform Generation Mode (ZERO for both Normal & CTC)
	*************************************************/
	TCCR1A = (1<<FOC1A) | (1<<FOC1B) ;
    19ae:	ef e4       	ldi	r30, 0x4F	; 79
    19b0:	f0 e0       	ldi	r31, 0x00	; 0
    19b2:	8c e0       	ldi	r24, 0x0C	; 12
    19b4:	80 83       	st	Z, r24
	*  WGM13:2 = Config_PTR  Waveform Generation Mode ( Set in next Switch statement )
	*  CS12:0  = Config_PTR  Clock Select (Pre-scalar)
	*
	*  BIT # 5 must be written to zero when writing in TCCR1B
	*************************************************/
	TCCR1B = (TCCR1B & ~(0x07)) | ( 0x07 & (Config_Ptr->prescaler) );
    19b6:	ae e4       	ldi	r26, 0x4E	; 78
    19b8:	b0 e0       	ldi	r27, 0x00	; 0
    19ba:	ee e4       	ldi	r30, 0x4E	; 78
    19bc:	f0 e0       	ldi	r31, 0x00	; 0
    19be:	80 81       	ld	r24, Z
    19c0:	98 2f       	mov	r25, r24
    19c2:	98 7f       	andi	r25, 0xF8	; 248
    19c4:	e9 81       	ldd	r30, Y+1	; 0x01
    19c6:	fa 81       	ldd	r31, Y+2	; 0x02
    19c8:	84 81       	ldd	r24, Z+4	; 0x04
    19ca:	87 70       	andi	r24, 0x07	; 7
    19cc:	89 2b       	or	r24, r25
    19ce:	8c 93       	st	X, r24
	*  TICIE1 = 0  			Input Capture Interrupt Enable
	*  OCIE1A = Config_PTR  Output Compare A Match Interrupt Enable
	*  OCIE1B = 0			Output Compare B Match Interrupt Enable
	*  TOIE1  = Config_PTR  Overflow Interrupt Enable
	*************************************************/
	switch(Config_Ptr->mode)
    19d0:	e9 81       	ldd	r30, Y+1	; 0x01
    19d2:	fa 81       	ldd	r31, Y+2	; 0x02
    19d4:	85 81       	ldd	r24, Z+5	; 0x05
    19d6:	28 2f       	mov	r18, r24
    19d8:	30 e0       	ldi	r19, 0x00	; 0
    19da:	3c 83       	std	Y+4, r19	; 0x04
    19dc:	2b 83       	std	Y+3, r18	; 0x03
    19de:	8b 81       	ldd	r24, Y+3	; 0x03
    19e0:	9c 81       	ldd	r25, Y+4	; 0x04
    19e2:	00 97       	sbiw	r24, 0x00	; 0
    19e4:	31 f0       	breq	.+12     	; 0x19f2 <Timer1_init+0x66>
    19e6:	2b 81       	ldd	r18, Y+3	; 0x03
    19e8:	3c 81       	ldd	r19, Y+4	; 0x04
    19ea:	21 30       	cpi	r18, 0x01	; 1
    19ec:	31 05       	cpc	r19, r1
    19ee:	49 f0       	breq	.+18     	; 0x1a02 <Timer1_init+0x76>
    19f0:	1f c0       	rjmp	.+62     	; 0x1a30 <Timer1_init+0xa4>
	{
	case Normal:

		SET_BIT(TIMSK,TOIE1); /*Enable Input Capture Interrupt */
    19f2:	a9 e5       	ldi	r26, 0x59	; 89
    19f4:	b0 e0       	ldi	r27, 0x00	; 0
    19f6:	e9 e5       	ldi	r30, 0x59	; 89
    19f8:	f0 e0       	ldi	r31, 0x00	; 0
    19fa:	80 81       	ld	r24, Z
    19fc:	84 60       	ori	r24, 0x04	; 4
    19fe:	8c 93       	st	X, r24
    1a00:	17 c0       	rjmp	.+46     	; 0x1a30 <Timer1_init+0xa4>

		break;

	case Compare :

		SET_BIT(TIMSK,OCIE1A); /*Enable Output Compare A Match Interrupt*/
    1a02:	a9 e5       	ldi	r26, 0x59	; 89
    1a04:	b0 e0       	ldi	r27, 0x00	; 0
    1a06:	e9 e5       	ldi	r30, 0x59	; 89
    1a08:	f0 e0       	ldi	r31, 0x00	; 0
    1a0a:	80 81       	ld	r24, Z
    1a0c:	80 61       	ori	r24, 0x10	; 16
    1a0e:	8c 93       	st	X, r24

		OCR1A = Config_Ptr->compare_value;
    1a10:	aa e4       	ldi	r26, 0x4A	; 74
    1a12:	b0 e0       	ldi	r27, 0x00	; 0
    1a14:	e9 81       	ldd	r30, Y+1	; 0x01
    1a16:	fa 81       	ldd	r31, Y+2	; 0x02
    1a18:	82 81       	ldd	r24, Z+2	; 0x02
    1a1a:	93 81       	ldd	r25, Z+3	; 0x03
    1a1c:	11 96       	adiw	r26, 0x01	; 1
    1a1e:	9c 93       	st	X, r25
    1a20:	8e 93       	st	-X, r24

		TCCR1B |= (1<<WGM12); /*Set wave generation mode to CTC*/
    1a22:	ae e4       	ldi	r26, 0x4E	; 78
    1a24:	b0 e0       	ldi	r27, 0x00	; 0
    1a26:	ee e4       	ldi	r30, 0x4E	; 78
    1a28:	f0 e0       	ldi	r31, 0x00	; 0
    1a2a:	80 81       	ld	r24, Z
    1a2c:	88 60       	ori	r24, 0x08	; 8
    1a2e:	8c 93       	st	X, r24

		break;
	}

	SET_BIT(SREG,7);
    1a30:	af e5       	ldi	r26, 0x5F	; 95
    1a32:	b0 e0       	ldi	r27, 0x00	; 0
    1a34:	ef e5       	ldi	r30, 0x5F	; 95
    1a36:	f0 e0       	ldi	r31, 0x00	; 0
    1a38:	80 81       	ld	r24, Z
    1a3a:	80 68       	ori	r24, 0x80	; 128
    1a3c:	8c 93       	st	X, r24
}
    1a3e:	0f 90       	pop	r0
    1a40:	0f 90       	pop	r0
    1a42:	0f 90       	pop	r0
    1a44:	0f 90       	pop	r0
    1a46:	cf 91       	pop	r28
    1a48:	df 91       	pop	r29
    1a4a:	08 95       	ret

00001a4c <Timer1_deInit>:

/* Description :
 * Uninitialize /TurnOff TIMER1 and reset its counter/settings registers */
void Timer1_deInit(void)
{
    1a4c:	df 93       	push	r29
    1a4e:	cf 93       	push	r28
    1a50:	cd b7       	in	r28, 0x3d	; 61
    1a52:	de b7       	in	r29, 0x3e	; 62
	/*Reset all the previously set Registers back to default state */

	CLEAR_BIT(SREG,7);
    1a54:	af e5       	ldi	r26, 0x5F	; 95
    1a56:	b0 e0       	ldi	r27, 0x00	; 0
    1a58:	ef e5       	ldi	r30, 0x5F	; 95
    1a5a:	f0 e0       	ldi	r31, 0x00	; 0
    1a5c:	80 81       	ld	r24, Z
    1a5e:	8f 77       	andi	r24, 0x7F	; 127
    1a60:	8c 93       	st	X, r24

	TCNT1 = 0;
    1a62:	ec e4       	ldi	r30, 0x4C	; 76
    1a64:	f0 e0       	ldi	r31, 0x00	; 0
    1a66:	11 82       	std	Z+1, r1	; 0x01
    1a68:	10 82       	st	Z, r1
	OCR1A = 0;
    1a6a:	ea e4       	ldi	r30, 0x4A	; 74
    1a6c:	f0 e0       	ldi	r31, 0x00	; 0
    1a6e:	11 82       	std	Z+1, r1	; 0x01
    1a70:	10 82       	st	Z, r1
	TCCR1A = 0 ;
    1a72:	ef e4       	ldi	r30, 0x4F	; 79
    1a74:	f0 e0       	ldi	r31, 0x00	; 0
    1a76:	10 82       	st	Z, r1
	TCCR1B = 0 ;
    1a78:	ee e4       	ldi	r30, 0x4E	; 78
    1a7a:	f0 e0       	ldi	r31, 0x00	; 0
    1a7c:	10 82       	st	Z, r1

	/* 0b11000011*/
	TIMSK &= 0xC3 ;
    1a7e:	a9 e5       	ldi	r26, 0x59	; 89
    1a80:	b0 e0       	ldi	r27, 0x00	; 0
    1a82:	e9 e5       	ldi	r30, 0x59	; 89
    1a84:	f0 e0       	ldi	r31, 0x00	; 0
    1a86:	80 81       	ld	r24, Z
    1a88:	83 7c       	andi	r24, 0xC3	; 195
    1a8a:	8c 93       	st	X, r24

	/*Set the callback pointer back to NULL */
	g_callBackPtr = NULL_PTR;
    1a8c:	10 92 7c 00 	sts	0x007C, r1
    1a90:	10 92 7b 00 	sts	0x007B, r1
}
    1a94:	cf 91       	pop	r28
    1a96:	df 91       	pop	r29
    1a98:	08 95       	ret

00001a9a <Timer1_setCallBack>:

/* Description :
 * Sent the address of the required function to be called at ISR toggle
 * from higher/different abstraction level */
void Timer1_setCallBack(void(*a_ptr)(void)){
    1a9a:	df 93       	push	r29
    1a9c:	cf 93       	push	r28
    1a9e:	00 d0       	rcall	.+0      	; 0x1aa0 <Timer1_setCallBack+0x6>
    1aa0:	cd b7       	in	r28, 0x3d	; 61
    1aa2:	de b7       	in	r29, 0x3e	; 62
    1aa4:	9a 83       	std	Y+2, r25	; 0x02
    1aa6:	89 83       	std	Y+1, r24	; 0x01

	g_callBackPtr = a_ptr;
    1aa8:	89 81       	ldd	r24, Y+1	; 0x01
    1aaa:	9a 81       	ldd	r25, Y+2	; 0x02
    1aac:	90 93 7c 00 	sts	0x007C, r25
    1ab0:	80 93 7b 00 	sts	0x007B, r24
}
    1ab4:	0f 90       	pop	r0
    1ab6:	0f 90       	pop	r0
    1ab8:	cf 91       	pop	r28
    1aba:	df 91       	pop	r29
    1abc:	08 95       	ret

00001abe <__vector_7>:
/*******************************************************************************
 *                                ISR Definitions 	                           *
 *******************************************************************************/

ISR(TIMER1_COMPA_vect)
{
    1abe:	1f 92       	push	r1
    1ac0:	0f 92       	push	r0
    1ac2:	0f b6       	in	r0, 0x3f	; 63
    1ac4:	0f 92       	push	r0
    1ac6:	11 24       	eor	r1, r1
    1ac8:	2f 93       	push	r18
    1aca:	3f 93       	push	r19
    1acc:	4f 93       	push	r20
    1ace:	5f 93       	push	r21
    1ad0:	6f 93       	push	r22
    1ad2:	7f 93       	push	r23
    1ad4:	8f 93       	push	r24
    1ad6:	9f 93       	push	r25
    1ad8:	af 93       	push	r26
    1ada:	bf 93       	push	r27
    1adc:	ef 93       	push	r30
    1ade:	ff 93       	push	r31
    1ae0:	df 93       	push	r29
    1ae2:	cf 93       	push	r28
    1ae4:	cd b7       	in	r28, 0x3d	; 61
    1ae6:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    1ae8:	80 91 7b 00 	lds	r24, 0x007B
    1aec:	90 91 7c 00 	lds	r25, 0x007C
    1af0:	00 97       	sbiw	r24, 0x00	; 0
    1af2:	29 f0       	breq	.+10     	; 0x1afe <__vector_7+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		g_callBackPtr();
    1af4:	e0 91 7b 00 	lds	r30, 0x007B
    1af8:	f0 91 7c 00 	lds	r31, 0x007C
    1afc:	09 95       	icall
		//(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
	}
}
    1afe:	cf 91       	pop	r28
    1b00:	df 91       	pop	r29
    1b02:	ff 91       	pop	r31
    1b04:	ef 91       	pop	r30
    1b06:	bf 91       	pop	r27
    1b08:	af 91       	pop	r26
    1b0a:	9f 91       	pop	r25
    1b0c:	8f 91       	pop	r24
    1b0e:	7f 91       	pop	r23
    1b10:	6f 91       	pop	r22
    1b12:	5f 91       	pop	r21
    1b14:	4f 91       	pop	r20
    1b16:	3f 91       	pop	r19
    1b18:	2f 91       	pop	r18
    1b1a:	0f 90       	pop	r0
    1b1c:	0f be       	out	0x3f, r0	; 63
    1b1e:	0f 90       	pop	r0
    1b20:	1f 90       	pop	r1
    1b22:	18 95       	reti

00001b24 <__vector_9>:

ISR(TIMER1_OVF_vect)
{
    1b24:	1f 92       	push	r1
    1b26:	0f 92       	push	r0
    1b28:	0f b6       	in	r0, 0x3f	; 63
    1b2a:	0f 92       	push	r0
    1b2c:	11 24       	eor	r1, r1
    1b2e:	2f 93       	push	r18
    1b30:	3f 93       	push	r19
    1b32:	4f 93       	push	r20
    1b34:	5f 93       	push	r21
    1b36:	6f 93       	push	r22
    1b38:	7f 93       	push	r23
    1b3a:	8f 93       	push	r24
    1b3c:	9f 93       	push	r25
    1b3e:	af 93       	push	r26
    1b40:	bf 93       	push	r27
    1b42:	ef 93       	push	r30
    1b44:	ff 93       	push	r31
    1b46:	df 93       	push	r29
    1b48:	cf 93       	push	r28
    1b4a:	cd b7       	in	r28, 0x3d	; 61
    1b4c:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    1b4e:	80 91 7b 00 	lds	r24, 0x007B
    1b52:	90 91 7c 00 	lds	r25, 0x007C
    1b56:	00 97       	sbiw	r24, 0x00	; 0
    1b58:	29 f0       	breq	.+10     	; 0x1b64 <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */

		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1b5a:	e0 91 7b 00 	lds	r30, 0x007B
    1b5e:	f0 91 7c 00 	lds	r31, 0x007C
    1b62:	09 95       	icall
	}
}
    1b64:	cf 91       	pop	r28
    1b66:	df 91       	pop	r29
    1b68:	ff 91       	pop	r31
    1b6a:	ef 91       	pop	r30
    1b6c:	bf 91       	pop	r27
    1b6e:	af 91       	pop	r26
    1b70:	9f 91       	pop	r25
    1b72:	8f 91       	pop	r24
    1b74:	7f 91       	pop	r23
    1b76:	6f 91       	pop	r22
    1b78:	5f 91       	pop	r21
    1b7a:	4f 91       	pop	r20
    1b7c:	3f 91       	pop	r19
    1b7e:	2f 91       	pop	r18
    1b80:	0f 90       	pop	r0
    1b82:	0f be       	out	0x3f, r0	; 63
    1b84:	0f 90       	pop	r0
    1b86:	1f 90       	pop	r1
    1b88:	18 95       	reti

00001b8a <UART_init>:
 * 3. Selecting number of stop bits ( One_Bit , Two_Bits )
 * 4. Selecting Baud rate
 * 5. Setting data frame bits ( 5 , 6 ,  7 , 8 )
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    1b8a:	df 93       	push	r29
    1b8c:	cf 93       	push	r28
    1b8e:	00 d0       	rcall	.+0      	; 0x1b90 <UART_init+0x6>
    1b90:	00 d0       	rcall	.+0      	; 0x1b92 <UART_init+0x8>
    1b92:	cd b7       	in	r28, 0x3d	; 61
    1b94:	de b7       	in	r29, 0x3e	; 62
    1b96:	9c 83       	std	Y+4, r25	; 0x04
    1b98:	8b 83       	std	Y+3, r24	; 0x03
	uint16 Baud_rate = 0 ; /*Variable that holds the result of the Baud calculations */
    1b9a:	1a 82       	std	Y+2, r1	; 0x02
    1b9c:	19 82       	std	Y+1, r1	; 0x01

	UCSRA = (1<<U2X); /*For double transmission speed*/
    1b9e:	eb e2       	ldi	r30, 0x2B	; 43
    1ba0:	f0 e0       	ldi	r31, 0x00	; 0
    1ba2:	82 e0       	ldi	r24, 0x02	; 2
    1ba4:	80 83       	st	Z, r24
	*  UCSZ2 = 0 Character size
	*  RXB8  = 0 Receiver data bit 8
	*  TXB8  = 0 Transmitter data bit 8
	*************************************************/

	UCSRB = (1<<TXEN) | (1<<RXEN);
    1ba6:	ea e2       	ldi	r30, 0x2A	; 42
    1ba8:	f0 e0       	ldi	r31, 0x00	; 0
    1baa:	88 e1       	ldi	r24, 0x18	; 24
    1bac:	80 83       	st	Z, r24
	*  UMSEL 	= 0 		  Asynchronous Operation
	*  UCSZ2:0  = Config_Ptr  Select Number of data bits
	*  UPM1:0   = Config_Ptr  Select Parity check
	*  USBS  	= Config_Ptr  Select number of stop bits
	*************************************************/
	SET_BIT(UCSRC,URSEL);
    1bae:	a0 e4       	ldi	r26, 0x40	; 64
    1bb0:	b0 e0       	ldi	r27, 0x00	; 0
    1bb2:	e0 e4       	ldi	r30, 0x40	; 64
    1bb4:	f0 e0       	ldi	r31, 0x00	; 0
    1bb6:	80 81       	ld	r24, Z
    1bb8:	80 68       	ori	r24, 0x80	; 128
    1bba:	8c 93       	st	X, r24

	UCSRC = (UCSRC & ~(0x06)) | (((Config_Ptr->bit_data)<<UCSZ0) & 0x06) ;
    1bbc:	a0 e4       	ldi	r26, 0x40	; 64
    1bbe:	b0 e0       	ldi	r27, 0x00	; 0
    1bc0:	e0 e4       	ldi	r30, 0x40	; 64
    1bc2:	f0 e0       	ldi	r31, 0x00	; 0
    1bc4:	80 81       	ld	r24, Z
    1bc6:	28 2f       	mov	r18, r24
    1bc8:	29 7f       	andi	r18, 0xF9	; 249
    1bca:	eb 81       	ldd	r30, Y+3	; 0x03
    1bcc:	fc 81       	ldd	r31, Y+4	; 0x04
    1bce:	80 81       	ld	r24, Z
    1bd0:	88 2f       	mov	r24, r24
    1bd2:	90 e0       	ldi	r25, 0x00	; 0
    1bd4:	88 0f       	add	r24, r24
    1bd6:	99 1f       	adc	r25, r25
    1bd8:	86 70       	andi	r24, 0x06	; 6
    1bda:	82 2b       	or	r24, r18
    1bdc:	8c 93       	st	X, r24

	UCSRC = (UCSRC & ~(0x30)) | (((Config_Ptr->parity)<<UPM0)    & 0x30) ;
    1bde:	a0 e4       	ldi	r26, 0x40	; 64
    1be0:	b0 e0       	ldi	r27, 0x00	; 0
    1be2:	e0 e4       	ldi	r30, 0x40	; 64
    1be4:	f0 e0       	ldi	r31, 0x00	; 0
    1be6:	80 81       	ld	r24, Z
    1be8:	28 2f       	mov	r18, r24
    1bea:	2f 7c       	andi	r18, 0xCF	; 207
    1bec:	eb 81       	ldd	r30, Y+3	; 0x03
    1bee:	fc 81       	ldd	r31, Y+4	; 0x04
    1bf0:	81 81       	ldd	r24, Z+1	; 0x01
    1bf2:	88 2f       	mov	r24, r24
    1bf4:	90 e0       	ldi	r25, 0x00	; 0
    1bf6:	82 95       	swap	r24
    1bf8:	92 95       	swap	r25
    1bfa:	90 7f       	andi	r25, 0xF0	; 240
    1bfc:	98 27       	eor	r25, r24
    1bfe:	80 7f       	andi	r24, 0xF0	; 240
    1c00:	98 27       	eor	r25, r24
    1c02:	80 73       	andi	r24, 0x30	; 48
    1c04:	82 2b       	or	r24, r18
    1c06:	8c 93       	st	X, r24

	UCSRC = (UCSRC & ~(0x08)) | (((Config_Ptr->stop_bit)<<USBS)  & 0x08) ;
    1c08:	a0 e4       	ldi	r26, 0x40	; 64
    1c0a:	b0 e0       	ldi	r27, 0x00	; 0
    1c0c:	e0 e4       	ldi	r30, 0x40	; 64
    1c0e:	f0 e0       	ldi	r31, 0x00	; 0
    1c10:	80 81       	ld	r24, Z
    1c12:	28 2f       	mov	r18, r24
    1c14:	27 7f       	andi	r18, 0xF7	; 247
    1c16:	eb 81       	ldd	r30, Y+3	; 0x03
    1c18:	fc 81       	ldd	r31, Y+4	; 0x04
    1c1a:	82 81       	ldd	r24, Z+2	; 0x02
    1c1c:	88 2f       	mov	r24, r24
    1c1e:	90 e0       	ldi	r25, 0x00	; 0
    1c20:	88 0f       	add	r24, r24
    1c22:	99 1f       	adc	r25, r25
    1c24:	88 0f       	add	r24, r24
    1c26:	99 1f       	adc	r25, r25
    1c28:	88 0f       	add	r24, r24
    1c2a:	99 1f       	adc	r25, r25
    1c2c:	88 70       	andi	r24, 0x08	; 8
    1c2e:	82 2b       	or	r24, r18
    1c30:	8c 93       	st	X, r24

	CLEAR_BIT(UCSRC,UMSEL);
    1c32:	a0 e4       	ldi	r26, 0x40	; 64
    1c34:	b0 e0       	ldi	r27, 0x00	; 0
    1c36:	e0 e4       	ldi	r30, 0x40	; 64
    1c38:	f0 e0       	ldi	r31, 0x00	; 0
    1c3a:	80 81       	ld	r24, Z
    1c3c:	8f 7b       	andi	r24, 0xBF	; 191
    1c3e:	8c 93       	st	X, r24

	/*************************************************
	***************** UBRRL Settings ****************
	*	UBRR formula = ( ( F_CPU / (8*BAUD_rate) ) -1 )
	*************************************************/
	Baud_rate = (uint16) (  (F_CPU / (Config_Ptr->baud_rate *8UL) )  - 1);
    1c40:	eb 81       	ldd	r30, Y+3	; 0x03
    1c42:	fc 81       	ldd	r31, Y+4	; 0x04
    1c44:	83 81       	ldd	r24, Z+3	; 0x03
    1c46:	94 81       	ldd	r25, Z+4	; 0x04
    1c48:	a5 81       	ldd	r26, Z+5	; 0x05
    1c4a:	b6 81       	ldd	r27, Z+6	; 0x06
    1c4c:	88 0f       	add	r24, r24
    1c4e:	99 1f       	adc	r25, r25
    1c50:	aa 1f       	adc	r26, r26
    1c52:	bb 1f       	adc	r27, r27
    1c54:	88 0f       	add	r24, r24
    1c56:	99 1f       	adc	r25, r25
    1c58:	aa 1f       	adc	r26, r26
    1c5a:	bb 1f       	adc	r27, r27
    1c5c:	88 0f       	add	r24, r24
    1c5e:	99 1f       	adc	r25, r25
    1c60:	aa 1f       	adc	r26, r26
    1c62:	bb 1f       	adc	r27, r27
    1c64:	9c 01       	movw	r18, r24
    1c66:	ad 01       	movw	r20, r26
    1c68:	80 e0       	ldi	r24, 0x00	; 0
    1c6a:	92 e1       	ldi	r25, 0x12	; 18
    1c6c:	aa e7       	ldi	r26, 0x7A	; 122
    1c6e:	b0 e0       	ldi	r27, 0x00	; 0
    1c70:	bc 01       	movw	r22, r24
    1c72:	cd 01       	movw	r24, r26
    1c74:	0e 94 bc 13 	call	0x2778	; 0x2778 <__udivmodsi4>
    1c78:	da 01       	movw	r26, r20
    1c7a:	c9 01       	movw	r24, r18
    1c7c:	01 97       	sbiw	r24, 0x01	; 1
    1c7e:	9a 83       	std	Y+2, r25	; 0x02
    1c80:	89 83       	std	Y+1, r24	; 0x01

	/* Sets the the Last 8-bits of the Baud_rate IF available
	 * by shifting right with 8 into UBRRH , then sets the First
	 * 8-bits into UBRRL */
	UBRRH =  Baud_rate >> 8  ;
    1c82:	e0 e4       	ldi	r30, 0x40	; 64
    1c84:	f0 e0       	ldi	r31, 0x00	; 0
    1c86:	89 81       	ldd	r24, Y+1	; 0x01
    1c88:	9a 81       	ldd	r25, Y+2	; 0x02
    1c8a:	89 2f       	mov	r24, r25
    1c8c:	99 27       	eor	r25, r25
    1c8e:	80 83       	st	Z, r24
	UBRRL =  Baud_rate ;
    1c90:	e9 e2       	ldi	r30, 0x29	; 41
    1c92:	f0 e0       	ldi	r31, 0x00	; 0
    1c94:	89 81       	ldd	r24, Y+1	; 0x01
    1c96:	80 83       	st	Z, r24
}
    1c98:	0f 90       	pop	r0
    1c9a:	0f 90       	pop	r0
    1c9c:	0f 90       	pop	r0
    1c9e:	0f 90       	pop	r0
    1ca0:	cf 91       	pop	r28
    1ca2:	df 91       	pop	r29
    1ca4:	08 95       	ret

00001ca6 <UART_recieveByte>:

/* Description
 * return the value of the received byte through UART frame
 */
uint8 UART_recieveByte(void)
{
    1ca6:	df 93       	push	r29
    1ca8:	cf 93       	push	r28
    1caa:	cd b7       	in	r28, 0x3d	; 61
    1cac:	de b7       	in	r29, 0x3e	; 62
	/*Pooling Technique
	 * checks the USART receive bit flag
	 * if it's ZERO , the receive buffer is still empty OR
	 * has no unread data */
	while(BIT_IS_CLEAR(UCSRA,RXC));
    1cae:	eb e2       	ldi	r30, 0x2B	; 43
    1cb0:	f0 e0       	ldi	r31, 0x00	; 0
    1cb2:	80 81       	ld	r24, Z
    1cb4:	88 23       	and	r24, r24
    1cb6:	dc f7       	brge	.-10     	; 0x1cae <UART_recieveByte+0x8>

	/*When flag is set to ONE , the receive buffer has data that is unread
	 * & return the Data register */
	return UDR;
    1cb8:	ec e2       	ldi	r30, 0x2C	; 44
    1cba:	f0 e0       	ldi	r31, 0x00	; 0
    1cbc:	80 81       	ld	r24, Z
}
    1cbe:	cf 91       	pop	r28
    1cc0:	df 91       	pop	r29
    1cc2:	08 95       	ret

00001cc4 <UART_sendByte>:
/* Description
 * Send 8-bit data through UART frame
 * uses the UDRE flag check in order to send data without overwriting of prev. unsent data
 */
void UART_sendByte(uint8 data) /*UDRE flag pooling method*/
{
    1cc4:	df 93       	push	r29
    1cc6:	cf 93       	push	r28
    1cc8:	0f 92       	push	r0
    1cca:	cd b7       	in	r28, 0x3d	; 61
    1ccc:	de b7       	in	r29, 0x3e	; 62
    1cce:	89 83       	std	Y+1, r24	; 0x01
	/*The loop checks on the empty data register flag (UDRE)
	 * while the flag is ZERO , the data buffer is still contains data
	 * that is to be sent and not ready to receive new one*/
	while(BIT_IS_CLEAR(UCSRA,UDRE));
    1cd0:	eb e2       	ldi	r30, 0x2B	; 43
    1cd2:	f0 e0       	ldi	r31, 0x00	; 0
    1cd4:	80 81       	ld	r24, Z
    1cd6:	88 2f       	mov	r24, r24
    1cd8:	90 e0       	ldi	r25, 0x00	; 0
    1cda:	80 72       	andi	r24, 0x20	; 32
    1cdc:	90 70       	andi	r25, 0x00	; 0
    1cde:	00 97       	sbiw	r24, 0x00	; 0
    1ce0:	b9 f3       	breq	.-18     	; 0x1cd0 <UART_sendByte+0xc>

	/*Once the flag is set to ONE , the loop exits and sends the data byte
	 * to the buffer for transmitting */
	UDR = data ;
    1ce2:	ec e2       	ldi	r30, 0x2C	; 44
    1ce4:	f0 e0       	ldi	r31, 0x00	; 0
    1ce6:	89 81       	ldd	r24, Y+1	; 0x01
    1ce8:	80 83       	st	Z, r24

	* set the bit of TXC in order to clear the flag
	SET_BIT(UCSRA,TXC);*/


}
    1cea:	0f 90       	pop	r0
    1cec:	cf 91       	pop	r28
    1cee:	df 91       	pop	r29
    1cf0:	08 95       	ret

00001cf2 <UART_recieveString>:
 * into an string ( pointer to global string )
 * & replace the '#' that indicates the end of the string
 * with '\0' to set the string Null
 */
void UART_recieveString(uint8 *Str)
{
    1cf2:	df 93       	push	r29
    1cf4:	cf 93       	push	r28
    1cf6:	00 d0       	rcall	.+0      	; 0x1cf8 <UART_recieveString+0x6>
    1cf8:	0f 92       	push	r0
    1cfa:	cd b7       	in	r28, 0x3d	; 61
    1cfc:	de b7       	in	r29, 0x3e	; 62
    1cfe:	9b 83       	std	Y+3, r25	; 0x03
    1d00:	8a 83       	std	Y+2, r24	; 0x02
	/*Variable to loop on the string*/
	uint8 bufferBit = 0 ;
    1d02:	19 82       	std	Y+1, r1	; 0x01

	/*Do-While loop , takes the first byte of the array and then
	 * loop till the string receives the '#' character*/
	do
	{
		Str[bufferBit] = UART_recieveByte;
    1d04:	89 81       	ldd	r24, Y+1	; 0x01
    1d06:	28 2f       	mov	r18, r24
    1d08:	30 e0       	ldi	r19, 0x00	; 0
    1d0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d0c:	9b 81       	ldd	r25, Y+3	; 0x03
    1d0e:	fc 01       	movw	r30, r24
    1d10:	e2 0f       	add	r30, r18
    1d12:	f3 1f       	adc	r31, r19
    1d14:	83 e5       	ldi	r24, 0x53	; 83
    1d16:	9e e0       	ldi	r25, 0x0E	; 14
    1d18:	80 83       	st	Z, r24
		bufferBit++;
    1d1a:	89 81       	ldd	r24, Y+1	; 0x01
    1d1c:	8f 5f       	subi	r24, 0xFF	; 255
    1d1e:	89 83       	std	Y+1, r24	; 0x01

	}while(UART_recieveByte != '#');
    1d20:	83 e5       	ldi	r24, 0x53	; 83
    1d22:	9e e0       	ldi	r25, 0x0E	; 14
    1d24:	83 32       	cpi	r24, 0x23	; 35
    1d26:	91 05       	cpc	r25, r1
    1d28:	69 f7       	brne	.-38     	; 0x1d04 <UART_recieveString+0x12>

	/*Return back to the '#' character and replaces it with null '\0' */
	bufferBit--;
    1d2a:	89 81       	ldd	r24, Y+1	; 0x01
    1d2c:	81 50       	subi	r24, 0x01	; 1
    1d2e:	89 83       	std	Y+1, r24	; 0x01
	Str[bufferBit] = '\0';
    1d30:	89 81       	ldd	r24, Y+1	; 0x01
    1d32:	28 2f       	mov	r18, r24
    1d34:	30 e0       	ldi	r19, 0x00	; 0
    1d36:	8a 81       	ldd	r24, Y+2	; 0x02
    1d38:	9b 81       	ldd	r25, Y+3	; 0x03
    1d3a:	fc 01       	movw	r30, r24
    1d3c:	e2 0f       	add	r30, r18
    1d3e:	f3 1f       	adc	r31, r19
    1d40:	10 82       	st	Z, r1

}
    1d42:	0f 90       	pop	r0
    1d44:	0f 90       	pop	r0
    1d46:	0f 90       	pop	r0
    1d48:	cf 91       	pop	r28
    1d4a:	df 91       	pop	r29
    1d4c:	08 95       	ret

00001d4e <UART_sendString>:
/* Description
 * Send array of string through UART frame
 * until the '#' character is detected
 */
void UART_sendString(const char *Str)
{
    1d4e:	df 93       	push	r29
    1d50:	cf 93       	push	r28
    1d52:	00 d0       	rcall	.+0      	; 0x1d54 <UART_sendString+0x6>
    1d54:	0f 92       	push	r0
    1d56:	cd b7       	in	r28, 0x3d	; 61
    1d58:	de b7       	in	r29, 0x3e	; 62
    1d5a:	9b 83       	std	Y+3, r25	; 0x03
    1d5c:	8a 83       	std	Y+2, r24	; 0x02
	/*Variable to loop on the string*/
	uint8 bufferBit = 0 ;
    1d5e:	19 82       	std	Y+1, r1	; 0x01
    1d60:	0e c0       	rjmp	.+28     	; 0x1d7e <UART_sendString+0x30>

	/*Loop on the string and send Byte by Byte*/
	while(Str[bufferBit] != '\0')
	{
		UART_sendByte(Str[bufferBit]);
    1d62:	89 81       	ldd	r24, Y+1	; 0x01
    1d64:	28 2f       	mov	r18, r24
    1d66:	30 e0       	ldi	r19, 0x00	; 0
    1d68:	8a 81       	ldd	r24, Y+2	; 0x02
    1d6a:	9b 81       	ldd	r25, Y+3	; 0x03
    1d6c:	fc 01       	movw	r30, r24
    1d6e:	e2 0f       	add	r30, r18
    1d70:	f3 1f       	adc	r31, r19
    1d72:	80 81       	ld	r24, Z
    1d74:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <UART_sendByte>
		bufferBit++;
    1d78:	89 81       	ldd	r24, Y+1	; 0x01
    1d7a:	8f 5f       	subi	r24, 0xFF	; 255
    1d7c:	89 83       	std	Y+1, r24	; 0x01
{
	/*Variable to loop on the string*/
	uint8 bufferBit = 0 ;

	/*Loop on the string and send Byte by Byte*/
	while(Str[bufferBit] != '\0')
    1d7e:	89 81       	ldd	r24, Y+1	; 0x01
    1d80:	28 2f       	mov	r18, r24
    1d82:	30 e0       	ldi	r19, 0x00	; 0
    1d84:	8a 81       	ldd	r24, Y+2	; 0x02
    1d86:	9b 81       	ldd	r25, Y+3	; 0x03
    1d88:	fc 01       	movw	r30, r24
    1d8a:	e2 0f       	add	r30, r18
    1d8c:	f3 1f       	adc	r31, r19
    1d8e:	80 81       	ld	r24, Z
    1d90:	88 23       	and	r24, r24
    1d92:	39 f7       	brne	.-50     	; 0x1d62 <UART_sendString+0x14>
	{
		UART_sendByte(Str[bufferBit]);
		bufferBit++;
	}

}
    1d94:	0f 90       	pop	r0
    1d96:	0f 90       	pop	r0
    1d98:	0f 90       	pop	r0
    1d9a:	cf 91       	pop	r28
    1d9c:	df 91       	pop	r29
    1d9e:	08 95       	ret

00001da0 <UART_sendData>:
/* Description :
 * Sends array of data through UART frame
 * until size of array is reached
 */
void UART_sendData(const uint8 * Data, uint8 dataSize)
{
    1da0:	df 93       	push	r29
    1da2:	cf 93       	push	r28
    1da4:	00 d0       	rcall	.+0      	; 0x1da6 <UART_sendData+0x6>
    1da6:	00 d0       	rcall	.+0      	; 0x1da8 <UART_sendData+0x8>
    1da8:	cd b7       	in	r28, 0x3d	; 61
    1daa:	de b7       	in	r29, 0x3e	; 62
    1dac:	9b 83       	std	Y+3, r25	; 0x03
    1dae:	8a 83       	std	Y+2, r24	; 0x02
    1db0:	6c 83       	std	Y+4, r22	; 0x04
	/*Variable to loop on the data array*/
	uint8 bufferBit ;

	/*Loop on the array and send Byte by Byte*/
	for(bufferBit = 0 ; bufferBit < dataSize ; bufferBit++ )
    1db2:	19 82       	std	Y+1, r1	; 0x01
    1db4:	0e c0       	rjmp	.+28     	; 0x1dd2 <UART_sendData+0x32>
	{
		UART_sendByte(Data[bufferBit]);
    1db6:	89 81       	ldd	r24, Y+1	; 0x01
    1db8:	28 2f       	mov	r18, r24
    1dba:	30 e0       	ldi	r19, 0x00	; 0
    1dbc:	8a 81       	ldd	r24, Y+2	; 0x02
    1dbe:	9b 81       	ldd	r25, Y+3	; 0x03
    1dc0:	fc 01       	movw	r30, r24
    1dc2:	e2 0f       	add	r30, r18
    1dc4:	f3 1f       	adc	r31, r19
    1dc6:	80 81       	ld	r24, Z
    1dc8:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <UART_sendByte>
{
	/*Variable to loop on the data array*/
	uint8 bufferBit ;

	/*Loop on the array and send Byte by Byte*/
	for(bufferBit = 0 ; bufferBit < dataSize ; bufferBit++ )
    1dcc:	89 81       	ldd	r24, Y+1	; 0x01
    1dce:	8f 5f       	subi	r24, 0xFF	; 255
    1dd0:	89 83       	std	Y+1, r24	; 0x01
    1dd2:	99 81       	ldd	r25, Y+1	; 0x01
    1dd4:	8c 81       	ldd	r24, Y+4	; 0x04
    1dd6:	98 17       	cp	r25, r24
    1dd8:	70 f3       	brcs	.-36     	; 0x1db6 <UART_sendData+0x16>
	{
		UART_sendByte(Data[bufferBit]);
	}
}
    1dda:	0f 90       	pop	r0
    1ddc:	0f 90       	pop	r0
    1dde:	0f 90       	pop	r0
    1de0:	0f 90       	pop	r0
    1de2:	cf 91       	pop	r28
    1de4:	df 91       	pop	r29
    1de6:	08 95       	ret

00001de8 <UART_recieveData>:
 * return the value of the received array through UART frame
 * into an array ( pointer to global array )
 * until size of array is reached
 */
void UART_recieveData(uint8 * Data , uint8 dataSize)
{
    1de8:	0f 93       	push	r16
    1dea:	1f 93       	push	r17
    1dec:	df 93       	push	r29
    1dee:	cf 93       	push	r28
    1df0:	00 d0       	rcall	.+0      	; 0x1df2 <UART_recieveData+0xa>
    1df2:	00 d0       	rcall	.+0      	; 0x1df4 <UART_recieveData+0xc>
    1df4:	cd b7       	in	r28, 0x3d	; 61
    1df6:	de b7       	in	r29, 0x3e	; 62
    1df8:	9b 83       	std	Y+3, r25	; 0x03
    1dfa:	8a 83       	std	Y+2, r24	; 0x02
    1dfc:	6c 83       	std	Y+4, r22	; 0x04
	/*Variable to loop on the data array*/
	uint8 bufferBit ;

	/*Loop on the array and send Byte by Byte*/
	for(bufferBit = 0 ; bufferBit < dataSize ; bufferBit++ )
    1dfe:	19 82       	std	Y+1, r1	; 0x01
    1e00:	0f c0       	rjmp	.+30     	; 0x1e20 <UART_recieveData+0x38>
	{
		Data[bufferBit] = UART_recieveByte();
    1e02:	89 81       	ldd	r24, Y+1	; 0x01
    1e04:	28 2f       	mov	r18, r24
    1e06:	30 e0       	ldi	r19, 0x00	; 0
    1e08:	8a 81       	ldd	r24, Y+2	; 0x02
    1e0a:	9b 81       	ldd	r25, Y+3	; 0x03
    1e0c:	8c 01       	movw	r16, r24
    1e0e:	02 0f       	add	r16, r18
    1e10:	13 1f       	adc	r17, r19
    1e12:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <UART_recieveByte>
    1e16:	f8 01       	movw	r30, r16
    1e18:	80 83       	st	Z, r24
{
	/*Variable to loop on the data array*/
	uint8 bufferBit ;

	/*Loop on the array and send Byte by Byte*/
	for(bufferBit = 0 ; bufferBit < dataSize ; bufferBit++ )
    1e1a:	89 81       	ldd	r24, Y+1	; 0x01
    1e1c:	8f 5f       	subi	r24, 0xFF	; 255
    1e1e:	89 83       	std	Y+1, r24	; 0x01
    1e20:	99 81       	ldd	r25, Y+1	; 0x01
    1e22:	8c 81       	ldd	r24, Y+4	; 0x04
    1e24:	98 17       	cp	r25, r24
    1e26:	68 f3       	brcs	.-38     	; 0x1e02 <UART_recieveData+0x1a>
	{
		Data[bufferBit] = UART_recieveByte();
	}
}
    1e28:	0f 90       	pop	r0
    1e2a:	0f 90       	pop	r0
    1e2c:	0f 90       	pop	r0
    1e2e:	0f 90       	pop	r0
    1e30:	cf 91       	pop	r28
    1e32:	df 91       	pop	r29
    1e34:	1f 91       	pop	r17
    1e36:	0f 91       	pop	r16
    1e38:	08 95       	ret

00001e3a <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    1e3a:	df 93       	push	r29
    1e3c:	cf 93       	push	r28
    1e3e:	00 d0       	rcall	.+0      	; 0x1e40 <EEPROM_writeByte+0x6>
    1e40:	00 d0       	rcall	.+0      	; 0x1e42 <EEPROM_writeByte+0x8>
    1e42:	cd b7       	in	r28, 0x3d	; 61
    1e44:	de b7       	in	r29, 0x3e	; 62
    1e46:	9a 83       	std	Y+2, r25	; 0x02
    1e48:	89 83       	std	Y+1, r24	; 0x01
    1e4a:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1e4c:	0e 94 42 13 	call	0x2684	; 0x2684 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1e50:	0e 94 9a 13 	call	0x2734	; 0x2734 <TWI_getStatus>
    1e54:	88 30       	cpi	r24, 0x08	; 8
    1e56:	11 f0       	breq	.+4      	; 0x1e5c <EEPROM_writeByte+0x22>
        return ERROR;
    1e58:	1c 82       	std	Y+4, r1	; 0x04
    1e5a:	28 c0       	rjmp	.+80     	; 0x1eac <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    1e5c:	89 81       	ldd	r24, Y+1	; 0x01
    1e5e:	9a 81       	ldd	r25, Y+2	; 0x02
    1e60:	80 70       	andi	r24, 0x00	; 0
    1e62:	97 70       	andi	r25, 0x07	; 7
    1e64:	88 0f       	add	r24, r24
    1e66:	89 2f       	mov	r24, r25
    1e68:	88 1f       	adc	r24, r24
    1e6a:	99 0b       	sbc	r25, r25
    1e6c:	91 95       	neg	r25
    1e6e:	80 6a       	ori	r24, 0xA0	; 160
    1e70:	0e 94 5d 13 	call	0x26ba	; 0x26ba <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1e74:	0e 94 9a 13 	call	0x2734	; 0x2734 <TWI_getStatus>
    1e78:	88 31       	cpi	r24, 0x18	; 24
    1e7a:	11 f0       	breq	.+4      	; 0x1e80 <EEPROM_writeByte+0x46>
        return ERROR; 
    1e7c:	1c 82       	std	Y+4, r1	; 0x04
    1e7e:	16 c0       	rjmp	.+44     	; 0x1eac <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1e80:	89 81       	ldd	r24, Y+1	; 0x01
    1e82:	0e 94 5d 13 	call	0x26ba	; 0x26ba <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1e86:	0e 94 9a 13 	call	0x2734	; 0x2734 <TWI_getStatus>
    1e8a:	88 32       	cpi	r24, 0x28	; 40
    1e8c:	11 f0       	breq	.+4      	; 0x1e92 <EEPROM_writeByte+0x58>
        return ERROR;
    1e8e:	1c 82       	std	Y+4, r1	; 0x04
    1e90:	0d c0       	rjmp	.+26     	; 0x1eac <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    1e92:	8b 81       	ldd	r24, Y+3	; 0x03
    1e94:	0e 94 5d 13 	call	0x26ba	; 0x26ba <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1e98:	0e 94 9a 13 	call	0x2734	; 0x2734 <TWI_getStatus>
    1e9c:	88 32       	cpi	r24, 0x28	; 40
    1e9e:	11 f0       	breq	.+4      	; 0x1ea4 <EEPROM_writeByte+0x6a>
        return ERROR;
    1ea0:	1c 82       	std	Y+4, r1	; 0x04
    1ea2:	04 c0       	rjmp	.+8      	; 0x1eac <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    1ea4:	0e 94 52 13 	call	0x26a4	; 0x26a4 <TWI_stop>
	
    return SUCCESS;
    1ea8:	81 e0       	ldi	r24, 0x01	; 1
    1eaa:	8c 83       	std	Y+4, r24	; 0x04
    1eac:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1eae:	0f 90       	pop	r0
    1eb0:	0f 90       	pop	r0
    1eb2:	0f 90       	pop	r0
    1eb4:	0f 90       	pop	r0
    1eb6:	cf 91       	pop	r28
    1eb8:	df 91       	pop	r29
    1eba:	08 95       	ret

00001ebc <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    1ebc:	df 93       	push	r29
    1ebe:	cf 93       	push	r28
    1ec0:	00 d0       	rcall	.+0      	; 0x1ec2 <EEPROM_readByte+0x6>
    1ec2:	00 d0       	rcall	.+0      	; 0x1ec4 <EEPROM_readByte+0x8>
    1ec4:	0f 92       	push	r0
    1ec6:	cd b7       	in	r28, 0x3d	; 61
    1ec8:	de b7       	in	r29, 0x3e	; 62
    1eca:	9a 83       	std	Y+2, r25	; 0x02
    1ecc:	89 83       	std	Y+1, r24	; 0x01
    1ece:	7c 83       	std	Y+4, r23	; 0x04
    1ed0:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1ed2:	0e 94 42 13 	call	0x2684	; 0x2684 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1ed6:	0e 94 9a 13 	call	0x2734	; 0x2734 <TWI_getStatus>
    1eda:	88 30       	cpi	r24, 0x08	; 8
    1edc:	11 f0       	breq	.+4      	; 0x1ee2 <EEPROM_readByte+0x26>
        return ERROR;
    1ede:	1d 82       	std	Y+5, r1	; 0x05
    1ee0:	44 c0       	rjmp	.+136    	; 0x1f6a <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    1ee2:	89 81       	ldd	r24, Y+1	; 0x01
    1ee4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ee6:	80 70       	andi	r24, 0x00	; 0
    1ee8:	97 70       	andi	r25, 0x07	; 7
    1eea:	88 0f       	add	r24, r24
    1eec:	89 2f       	mov	r24, r25
    1eee:	88 1f       	adc	r24, r24
    1ef0:	99 0b       	sbc	r25, r25
    1ef2:	91 95       	neg	r25
    1ef4:	80 6a       	ori	r24, 0xA0	; 160
    1ef6:	0e 94 5d 13 	call	0x26ba	; 0x26ba <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1efa:	0e 94 9a 13 	call	0x2734	; 0x2734 <TWI_getStatus>
    1efe:	88 31       	cpi	r24, 0x18	; 24
    1f00:	11 f0       	breq	.+4      	; 0x1f06 <EEPROM_readByte+0x4a>
        return ERROR;
    1f02:	1d 82       	std	Y+5, r1	; 0x05
    1f04:	32 c0       	rjmp	.+100    	; 0x1f6a <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1f06:	89 81       	ldd	r24, Y+1	; 0x01
    1f08:	0e 94 5d 13 	call	0x26ba	; 0x26ba <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1f0c:	0e 94 9a 13 	call	0x2734	; 0x2734 <TWI_getStatus>
    1f10:	88 32       	cpi	r24, 0x28	; 40
    1f12:	11 f0       	breq	.+4      	; 0x1f18 <EEPROM_readByte+0x5c>
        return ERROR;
    1f14:	1d 82       	std	Y+5, r1	; 0x05
    1f16:	29 c0       	rjmp	.+82     	; 0x1f6a <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    1f18:	0e 94 42 13 	call	0x2684	; 0x2684 <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    1f1c:	0e 94 9a 13 	call	0x2734	; 0x2734 <TWI_getStatus>
    1f20:	80 31       	cpi	r24, 0x10	; 16
    1f22:	11 f0       	breq	.+4      	; 0x1f28 <EEPROM_readByte+0x6c>
        return ERROR;
    1f24:	1d 82       	std	Y+5, r1	; 0x05
    1f26:	21 c0       	rjmp	.+66     	; 0x1f6a <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    1f28:	89 81       	ldd	r24, Y+1	; 0x01
    1f2a:	9a 81       	ldd	r25, Y+2	; 0x02
    1f2c:	80 70       	andi	r24, 0x00	; 0
    1f2e:	97 70       	andi	r25, 0x07	; 7
    1f30:	88 0f       	add	r24, r24
    1f32:	89 2f       	mov	r24, r25
    1f34:	88 1f       	adc	r24, r24
    1f36:	99 0b       	sbc	r25, r25
    1f38:	91 95       	neg	r25
    1f3a:	81 6a       	ori	r24, 0xA1	; 161
    1f3c:	0e 94 5d 13 	call	0x26ba	; 0x26ba <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    1f40:	0e 94 9a 13 	call	0x2734	; 0x2734 <TWI_getStatus>
    1f44:	80 34       	cpi	r24, 0x40	; 64
    1f46:	11 f0       	breq	.+4      	; 0x1f4c <EEPROM_readByte+0x90>
        return ERROR;
    1f48:	1d 82       	std	Y+5, r1	; 0x05
    1f4a:	0f c0       	rjmp	.+30     	; 0x1f6a <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    1f4c:	0e 94 87 13 	call	0x270e	; 0x270e <TWI_readByteWithNACK>
    1f50:	eb 81       	ldd	r30, Y+3	; 0x03
    1f52:	fc 81       	ldd	r31, Y+4	; 0x04
    1f54:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    1f56:	0e 94 9a 13 	call	0x2734	; 0x2734 <TWI_getStatus>
    1f5a:	88 35       	cpi	r24, 0x58	; 88
    1f5c:	11 f0       	breq	.+4      	; 0x1f62 <EEPROM_readByte+0xa6>
        return ERROR;
    1f5e:	1d 82       	std	Y+5, r1	; 0x05
    1f60:	04 c0       	rjmp	.+8      	; 0x1f6a <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    1f62:	0e 94 52 13 	call	0x26a4	; 0x26a4 <TWI_stop>

    return SUCCESS;
    1f66:	81 e0       	ldi	r24, 0x01	; 1
    1f68:	8d 83       	std	Y+5, r24	; 0x05
    1f6a:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1f6c:	0f 90       	pop	r0
    1f6e:	0f 90       	pop	r0
    1f70:	0f 90       	pop	r0
    1f72:	0f 90       	pop	r0
    1f74:	0f 90       	pop	r0
    1f76:	cf 91       	pop	r28
    1f78:	df 91       	pop	r29
    1f7a:	08 95       	ret

00001f7c <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1f7c:	df 93       	push	r29
    1f7e:	cf 93       	push	r28
    1f80:	00 d0       	rcall	.+0      	; 0x1f82 <GPIO_setupPinDirection+0x6>
    1f82:	00 d0       	rcall	.+0      	; 0x1f84 <GPIO_setupPinDirection+0x8>
    1f84:	0f 92       	push	r0
    1f86:	cd b7       	in	r28, 0x3d	; 61
    1f88:	de b7       	in	r29, 0x3e	; 62
    1f8a:	89 83       	std	Y+1, r24	; 0x01
    1f8c:	6a 83       	std	Y+2, r22	; 0x02
    1f8e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1f90:	8a 81       	ldd	r24, Y+2	; 0x02
    1f92:	88 30       	cpi	r24, 0x08	; 8
    1f94:	08 f0       	brcs	.+2      	; 0x1f98 <GPIO_setupPinDirection+0x1c>
    1f96:	d5 c0       	rjmp	.+426    	; 0x2142 <GPIO_setupPinDirection+0x1c6>
    1f98:	89 81       	ldd	r24, Y+1	; 0x01
    1f9a:	84 30       	cpi	r24, 0x04	; 4
    1f9c:	08 f0       	brcs	.+2      	; 0x1fa0 <GPIO_setupPinDirection+0x24>
    1f9e:	d1 c0       	rjmp	.+418    	; 0x2142 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1fa0:	89 81       	ldd	r24, Y+1	; 0x01
    1fa2:	28 2f       	mov	r18, r24
    1fa4:	30 e0       	ldi	r19, 0x00	; 0
    1fa6:	3d 83       	std	Y+5, r19	; 0x05
    1fa8:	2c 83       	std	Y+4, r18	; 0x04
    1faa:	8c 81       	ldd	r24, Y+4	; 0x04
    1fac:	9d 81       	ldd	r25, Y+5	; 0x05
    1fae:	81 30       	cpi	r24, 0x01	; 1
    1fb0:	91 05       	cpc	r25, r1
    1fb2:	09 f4       	brne	.+2      	; 0x1fb6 <GPIO_setupPinDirection+0x3a>
    1fb4:	43 c0       	rjmp	.+134    	; 0x203c <GPIO_setupPinDirection+0xc0>
    1fb6:	2c 81       	ldd	r18, Y+4	; 0x04
    1fb8:	3d 81       	ldd	r19, Y+5	; 0x05
    1fba:	22 30       	cpi	r18, 0x02	; 2
    1fbc:	31 05       	cpc	r19, r1
    1fbe:	2c f4       	brge	.+10     	; 0x1fca <GPIO_setupPinDirection+0x4e>
    1fc0:	8c 81       	ldd	r24, Y+4	; 0x04
    1fc2:	9d 81       	ldd	r25, Y+5	; 0x05
    1fc4:	00 97       	sbiw	r24, 0x00	; 0
    1fc6:	71 f0       	breq	.+28     	; 0x1fe4 <GPIO_setupPinDirection+0x68>
    1fc8:	bc c0       	rjmp	.+376    	; 0x2142 <GPIO_setupPinDirection+0x1c6>
    1fca:	2c 81       	ldd	r18, Y+4	; 0x04
    1fcc:	3d 81       	ldd	r19, Y+5	; 0x05
    1fce:	22 30       	cpi	r18, 0x02	; 2
    1fd0:	31 05       	cpc	r19, r1
    1fd2:	09 f4       	brne	.+2      	; 0x1fd6 <GPIO_setupPinDirection+0x5a>
    1fd4:	5f c0       	rjmp	.+190    	; 0x2094 <GPIO_setupPinDirection+0x118>
    1fd6:	8c 81       	ldd	r24, Y+4	; 0x04
    1fd8:	9d 81       	ldd	r25, Y+5	; 0x05
    1fda:	83 30       	cpi	r24, 0x03	; 3
    1fdc:	91 05       	cpc	r25, r1
    1fde:	09 f4       	brne	.+2      	; 0x1fe2 <GPIO_setupPinDirection+0x66>
    1fe0:	85 c0       	rjmp	.+266    	; 0x20ec <GPIO_setupPinDirection+0x170>
    1fe2:	af c0       	rjmp	.+350    	; 0x2142 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1fe4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe6:	81 30       	cpi	r24, 0x01	; 1
    1fe8:	a1 f4       	brne	.+40     	; 0x2012 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1fea:	aa e3       	ldi	r26, 0x3A	; 58
    1fec:	b0 e0       	ldi	r27, 0x00	; 0
    1fee:	ea e3       	ldi	r30, 0x3A	; 58
    1ff0:	f0 e0       	ldi	r31, 0x00	; 0
    1ff2:	80 81       	ld	r24, Z
    1ff4:	48 2f       	mov	r20, r24
    1ff6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ff8:	28 2f       	mov	r18, r24
    1ffa:	30 e0       	ldi	r19, 0x00	; 0
    1ffc:	81 e0       	ldi	r24, 0x01	; 1
    1ffe:	90 e0       	ldi	r25, 0x00	; 0
    2000:	02 2e       	mov	r0, r18
    2002:	02 c0       	rjmp	.+4      	; 0x2008 <GPIO_setupPinDirection+0x8c>
    2004:	88 0f       	add	r24, r24
    2006:	99 1f       	adc	r25, r25
    2008:	0a 94       	dec	r0
    200a:	e2 f7       	brpl	.-8      	; 0x2004 <GPIO_setupPinDirection+0x88>
    200c:	84 2b       	or	r24, r20
    200e:	8c 93       	st	X, r24
    2010:	98 c0       	rjmp	.+304    	; 0x2142 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    2012:	aa e3       	ldi	r26, 0x3A	; 58
    2014:	b0 e0       	ldi	r27, 0x00	; 0
    2016:	ea e3       	ldi	r30, 0x3A	; 58
    2018:	f0 e0       	ldi	r31, 0x00	; 0
    201a:	80 81       	ld	r24, Z
    201c:	48 2f       	mov	r20, r24
    201e:	8a 81       	ldd	r24, Y+2	; 0x02
    2020:	28 2f       	mov	r18, r24
    2022:	30 e0       	ldi	r19, 0x00	; 0
    2024:	81 e0       	ldi	r24, 0x01	; 1
    2026:	90 e0       	ldi	r25, 0x00	; 0
    2028:	02 2e       	mov	r0, r18
    202a:	02 c0       	rjmp	.+4      	; 0x2030 <GPIO_setupPinDirection+0xb4>
    202c:	88 0f       	add	r24, r24
    202e:	99 1f       	adc	r25, r25
    2030:	0a 94       	dec	r0
    2032:	e2 f7       	brpl	.-8      	; 0x202c <GPIO_setupPinDirection+0xb0>
    2034:	80 95       	com	r24
    2036:	84 23       	and	r24, r20
    2038:	8c 93       	st	X, r24
    203a:	83 c0       	rjmp	.+262    	; 0x2142 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    203c:	8b 81       	ldd	r24, Y+3	; 0x03
    203e:	81 30       	cpi	r24, 0x01	; 1
    2040:	a1 f4       	brne	.+40     	; 0x206a <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    2042:	a7 e3       	ldi	r26, 0x37	; 55
    2044:	b0 e0       	ldi	r27, 0x00	; 0
    2046:	e7 e3       	ldi	r30, 0x37	; 55
    2048:	f0 e0       	ldi	r31, 0x00	; 0
    204a:	80 81       	ld	r24, Z
    204c:	48 2f       	mov	r20, r24
    204e:	8a 81       	ldd	r24, Y+2	; 0x02
    2050:	28 2f       	mov	r18, r24
    2052:	30 e0       	ldi	r19, 0x00	; 0
    2054:	81 e0       	ldi	r24, 0x01	; 1
    2056:	90 e0       	ldi	r25, 0x00	; 0
    2058:	02 2e       	mov	r0, r18
    205a:	02 c0       	rjmp	.+4      	; 0x2060 <GPIO_setupPinDirection+0xe4>
    205c:	88 0f       	add	r24, r24
    205e:	99 1f       	adc	r25, r25
    2060:	0a 94       	dec	r0
    2062:	e2 f7       	brpl	.-8      	; 0x205c <GPIO_setupPinDirection+0xe0>
    2064:	84 2b       	or	r24, r20
    2066:	8c 93       	st	X, r24
    2068:	6c c0       	rjmp	.+216    	; 0x2142 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    206a:	a7 e3       	ldi	r26, 0x37	; 55
    206c:	b0 e0       	ldi	r27, 0x00	; 0
    206e:	e7 e3       	ldi	r30, 0x37	; 55
    2070:	f0 e0       	ldi	r31, 0x00	; 0
    2072:	80 81       	ld	r24, Z
    2074:	48 2f       	mov	r20, r24
    2076:	8a 81       	ldd	r24, Y+2	; 0x02
    2078:	28 2f       	mov	r18, r24
    207a:	30 e0       	ldi	r19, 0x00	; 0
    207c:	81 e0       	ldi	r24, 0x01	; 1
    207e:	90 e0       	ldi	r25, 0x00	; 0
    2080:	02 2e       	mov	r0, r18
    2082:	02 c0       	rjmp	.+4      	; 0x2088 <GPIO_setupPinDirection+0x10c>
    2084:	88 0f       	add	r24, r24
    2086:	99 1f       	adc	r25, r25
    2088:	0a 94       	dec	r0
    208a:	e2 f7       	brpl	.-8      	; 0x2084 <GPIO_setupPinDirection+0x108>
    208c:	80 95       	com	r24
    208e:	84 23       	and	r24, r20
    2090:	8c 93       	st	X, r24
    2092:	57 c0       	rjmp	.+174    	; 0x2142 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    2094:	8b 81       	ldd	r24, Y+3	; 0x03
    2096:	81 30       	cpi	r24, 0x01	; 1
    2098:	a1 f4       	brne	.+40     	; 0x20c2 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    209a:	a4 e3       	ldi	r26, 0x34	; 52
    209c:	b0 e0       	ldi	r27, 0x00	; 0
    209e:	e4 e3       	ldi	r30, 0x34	; 52
    20a0:	f0 e0       	ldi	r31, 0x00	; 0
    20a2:	80 81       	ld	r24, Z
    20a4:	48 2f       	mov	r20, r24
    20a6:	8a 81       	ldd	r24, Y+2	; 0x02
    20a8:	28 2f       	mov	r18, r24
    20aa:	30 e0       	ldi	r19, 0x00	; 0
    20ac:	81 e0       	ldi	r24, 0x01	; 1
    20ae:	90 e0       	ldi	r25, 0x00	; 0
    20b0:	02 2e       	mov	r0, r18
    20b2:	02 c0       	rjmp	.+4      	; 0x20b8 <GPIO_setupPinDirection+0x13c>
    20b4:	88 0f       	add	r24, r24
    20b6:	99 1f       	adc	r25, r25
    20b8:	0a 94       	dec	r0
    20ba:	e2 f7       	brpl	.-8      	; 0x20b4 <GPIO_setupPinDirection+0x138>
    20bc:	84 2b       	or	r24, r20
    20be:	8c 93       	st	X, r24
    20c0:	40 c0       	rjmp	.+128    	; 0x2142 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    20c2:	a4 e3       	ldi	r26, 0x34	; 52
    20c4:	b0 e0       	ldi	r27, 0x00	; 0
    20c6:	e4 e3       	ldi	r30, 0x34	; 52
    20c8:	f0 e0       	ldi	r31, 0x00	; 0
    20ca:	80 81       	ld	r24, Z
    20cc:	48 2f       	mov	r20, r24
    20ce:	8a 81       	ldd	r24, Y+2	; 0x02
    20d0:	28 2f       	mov	r18, r24
    20d2:	30 e0       	ldi	r19, 0x00	; 0
    20d4:	81 e0       	ldi	r24, 0x01	; 1
    20d6:	90 e0       	ldi	r25, 0x00	; 0
    20d8:	02 2e       	mov	r0, r18
    20da:	02 c0       	rjmp	.+4      	; 0x20e0 <GPIO_setupPinDirection+0x164>
    20dc:	88 0f       	add	r24, r24
    20de:	99 1f       	adc	r25, r25
    20e0:	0a 94       	dec	r0
    20e2:	e2 f7       	brpl	.-8      	; 0x20dc <GPIO_setupPinDirection+0x160>
    20e4:	80 95       	com	r24
    20e6:	84 23       	and	r24, r20
    20e8:	8c 93       	st	X, r24
    20ea:	2b c0       	rjmp	.+86     	; 0x2142 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    20ec:	8b 81       	ldd	r24, Y+3	; 0x03
    20ee:	81 30       	cpi	r24, 0x01	; 1
    20f0:	a1 f4       	brne	.+40     	; 0x211a <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    20f2:	a1 e3       	ldi	r26, 0x31	; 49
    20f4:	b0 e0       	ldi	r27, 0x00	; 0
    20f6:	e1 e3       	ldi	r30, 0x31	; 49
    20f8:	f0 e0       	ldi	r31, 0x00	; 0
    20fa:	80 81       	ld	r24, Z
    20fc:	48 2f       	mov	r20, r24
    20fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2100:	28 2f       	mov	r18, r24
    2102:	30 e0       	ldi	r19, 0x00	; 0
    2104:	81 e0       	ldi	r24, 0x01	; 1
    2106:	90 e0       	ldi	r25, 0x00	; 0
    2108:	02 2e       	mov	r0, r18
    210a:	02 c0       	rjmp	.+4      	; 0x2110 <GPIO_setupPinDirection+0x194>
    210c:	88 0f       	add	r24, r24
    210e:	99 1f       	adc	r25, r25
    2110:	0a 94       	dec	r0
    2112:	e2 f7       	brpl	.-8      	; 0x210c <GPIO_setupPinDirection+0x190>
    2114:	84 2b       	or	r24, r20
    2116:	8c 93       	st	X, r24
    2118:	14 c0       	rjmp	.+40     	; 0x2142 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    211a:	a1 e3       	ldi	r26, 0x31	; 49
    211c:	b0 e0       	ldi	r27, 0x00	; 0
    211e:	e1 e3       	ldi	r30, 0x31	; 49
    2120:	f0 e0       	ldi	r31, 0x00	; 0
    2122:	80 81       	ld	r24, Z
    2124:	48 2f       	mov	r20, r24
    2126:	8a 81       	ldd	r24, Y+2	; 0x02
    2128:	28 2f       	mov	r18, r24
    212a:	30 e0       	ldi	r19, 0x00	; 0
    212c:	81 e0       	ldi	r24, 0x01	; 1
    212e:	90 e0       	ldi	r25, 0x00	; 0
    2130:	02 2e       	mov	r0, r18
    2132:	02 c0       	rjmp	.+4      	; 0x2138 <GPIO_setupPinDirection+0x1bc>
    2134:	88 0f       	add	r24, r24
    2136:	99 1f       	adc	r25, r25
    2138:	0a 94       	dec	r0
    213a:	e2 f7       	brpl	.-8      	; 0x2134 <GPIO_setupPinDirection+0x1b8>
    213c:	80 95       	com	r24
    213e:	84 23       	and	r24, r20
    2140:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    2142:	0f 90       	pop	r0
    2144:	0f 90       	pop	r0
    2146:	0f 90       	pop	r0
    2148:	0f 90       	pop	r0
    214a:	0f 90       	pop	r0
    214c:	cf 91       	pop	r28
    214e:	df 91       	pop	r29
    2150:	08 95       	ret

00002152 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    2152:	df 93       	push	r29
    2154:	cf 93       	push	r28
    2156:	00 d0       	rcall	.+0      	; 0x2158 <GPIO_writePin+0x6>
    2158:	00 d0       	rcall	.+0      	; 0x215a <GPIO_writePin+0x8>
    215a:	0f 92       	push	r0
    215c:	cd b7       	in	r28, 0x3d	; 61
    215e:	de b7       	in	r29, 0x3e	; 62
    2160:	89 83       	std	Y+1, r24	; 0x01
    2162:	6a 83       	std	Y+2, r22	; 0x02
    2164:	4b 83       	std	Y+3, r20	; 0x03
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    2166:	8a 81       	ldd	r24, Y+2	; 0x02
    2168:	88 30       	cpi	r24, 0x08	; 8
    216a:	08 f0       	brcs	.+2      	; 0x216e <GPIO_writePin+0x1c>
    216c:	d5 c0       	rjmp	.+426    	; 0x2318 <GPIO_writePin+0x1c6>
    216e:	89 81       	ldd	r24, Y+1	; 0x01
    2170:	84 30       	cpi	r24, 0x04	; 4
    2172:	08 f0       	brcs	.+2      	; 0x2176 <GPIO_writePin+0x24>
    2174:	d1 c0       	rjmp	.+418    	; 0x2318 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    2176:	89 81       	ldd	r24, Y+1	; 0x01
    2178:	28 2f       	mov	r18, r24
    217a:	30 e0       	ldi	r19, 0x00	; 0
    217c:	3d 83       	std	Y+5, r19	; 0x05
    217e:	2c 83       	std	Y+4, r18	; 0x04
    2180:	8c 81       	ldd	r24, Y+4	; 0x04
    2182:	9d 81       	ldd	r25, Y+5	; 0x05
    2184:	81 30       	cpi	r24, 0x01	; 1
    2186:	91 05       	cpc	r25, r1
    2188:	09 f4       	brne	.+2      	; 0x218c <GPIO_writePin+0x3a>
    218a:	43 c0       	rjmp	.+134    	; 0x2212 <GPIO_writePin+0xc0>
    218c:	2c 81       	ldd	r18, Y+4	; 0x04
    218e:	3d 81       	ldd	r19, Y+5	; 0x05
    2190:	22 30       	cpi	r18, 0x02	; 2
    2192:	31 05       	cpc	r19, r1
    2194:	2c f4       	brge	.+10     	; 0x21a0 <GPIO_writePin+0x4e>
    2196:	8c 81       	ldd	r24, Y+4	; 0x04
    2198:	9d 81       	ldd	r25, Y+5	; 0x05
    219a:	00 97       	sbiw	r24, 0x00	; 0
    219c:	71 f0       	breq	.+28     	; 0x21ba <GPIO_writePin+0x68>
    219e:	bc c0       	rjmp	.+376    	; 0x2318 <GPIO_writePin+0x1c6>
    21a0:	2c 81       	ldd	r18, Y+4	; 0x04
    21a2:	3d 81       	ldd	r19, Y+5	; 0x05
    21a4:	22 30       	cpi	r18, 0x02	; 2
    21a6:	31 05       	cpc	r19, r1
    21a8:	09 f4       	brne	.+2      	; 0x21ac <GPIO_writePin+0x5a>
    21aa:	5f c0       	rjmp	.+190    	; 0x226a <GPIO_writePin+0x118>
    21ac:	8c 81       	ldd	r24, Y+4	; 0x04
    21ae:	9d 81       	ldd	r25, Y+5	; 0x05
    21b0:	83 30       	cpi	r24, 0x03	; 3
    21b2:	91 05       	cpc	r25, r1
    21b4:	09 f4       	brne	.+2      	; 0x21b8 <GPIO_writePin+0x66>
    21b6:	85 c0       	rjmp	.+266    	; 0x22c2 <GPIO_writePin+0x170>
    21b8:	af c0       	rjmp	.+350    	; 0x2318 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    21ba:	8b 81       	ldd	r24, Y+3	; 0x03
    21bc:	81 30       	cpi	r24, 0x01	; 1
    21be:	a1 f4       	brne	.+40     	; 0x21e8 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    21c0:	ab e3       	ldi	r26, 0x3B	; 59
    21c2:	b0 e0       	ldi	r27, 0x00	; 0
    21c4:	eb e3       	ldi	r30, 0x3B	; 59
    21c6:	f0 e0       	ldi	r31, 0x00	; 0
    21c8:	80 81       	ld	r24, Z
    21ca:	48 2f       	mov	r20, r24
    21cc:	8a 81       	ldd	r24, Y+2	; 0x02
    21ce:	28 2f       	mov	r18, r24
    21d0:	30 e0       	ldi	r19, 0x00	; 0
    21d2:	81 e0       	ldi	r24, 0x01	; 1
    21d4:	90 e0       	ldi	r25, 0x00	; 0
    21d6:	02 2e       	mov	r0, r18
    21d8:	02 c0       	rjmp	.+4      	; 0x21de <GPIO_writePin+0x8c>
    21da:	88 0f       	add	r24, r24
    21dc:	99 1f       	adc	r25, r25
    21de:	0a 94       	dec	r0
    21e0:	e2 f7       	brpl	.-8      	; 0x21da <GPIO_writePin+0x88>
    21e2:	84 2b       	or	r24, r20
    21e4:	8c 93       	st	X, r24
    21e6:	98 c0       	rjmp	.+304    	; 0x2318 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    21e8:	ab e3       	ldi	r26, 0x3B	; 59
    21ea:	b0 e0       	ldi	r27, 0x00	; 0
    21ec:	eb e3       	ldi	r30, 0x3B	; 59
    21ee:	f0 e0       	ldi	r31, 0x00	; 0
    21f0:	80 81       	ld	r24, Z
    21f2:	48 2f       	mov	r20, r24
    21f4:	8a 81       	ldd	r24, Y+2	; 0x02
    21f6:	28 2f       	mov	r18, r24
    21f8:	30 e0       	ldi	r19, 0x00	; 0
    21fa:	81 e0       	ldi	r24, 0x01	; 1
    21fc:	90 e0       	ldi	r25, 0x00	; 0
    21fe:	02 2e       	mov	r0, r18
    2200:	02 c0       	rjmp	.+4      	; 0x2206 <GPIO_writePin+0xb4>
    2202:	88 0f       	add	r24, r24
    2204:	99 1f       	adc	r25, r25
    2206:	0a 94       	dec	r0
    2208:	e2 f7       	brpl	.-8      	; 0x2202 <GPIO_writePin+0xb0>
    220a:	80 95       	com	r24
    220c:	84 23       	and	r24, r20
    220e:	8c 93       	st	X, r24
    2210:	83 c0       	rjmp	.+262    	; 0x2318 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    2212:	8b 81       	ldd	r24, Y+3	; 0x03
    2214:	81 30       	cpi	r24, 0x01	; 1
    2216:	a1 f4       	brne	.+40     	; 0x2240 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    2218:	a8 e3       	ldi	r26, 0x38	; 56
    221a:	b0 e0       	ldi	r27, 0x00	; 0
    221c:	e8 e3       	ldi	r30, 0x38	; 56
    221e:	f0 e0       	ldi	r31, 0x00	; 0
    2220:	80 81       	ld	r24, Z
    2222:	48 2f       	mov	r20, r24
    2224:	8a 81       	ldd	r24, Y+2	; 0x02
    2226:	28 2f       	mov	r18, r24
    2228:	30 e0       	ldi	r19, 0x00	; 0
    222a:	81 e0       	ldi	r24, 0x01	; 1
    222c:	90 e0       	ldi	r25, 0x00	; 0
    222e:	02 2e       	mov	r0, r18
    2230:	02 c0       	rjmp	.+4      	; 0x2236 <GPIO_writePin+0xe4>
    2232:	88 0f       	add	r24, r24
    2234:	99 1f       	adc	r25, r25
    2236:	0a 94       	dec	r0
    2238:	e2 f7       	brpl	.-8      	; 0x2232 <GPIO_writePin+0xe0>
    223a:	84 2b       	or	r24, r20
    223c:	8c 93       	st	X, r24
    223e:	6c c0       	rjmp	.+216    	; 0x2318 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    2240:	a8 e3       	ldi	r26, 0x38	; 56
    2242:	b0 e0       	ldi	r27, 0x00	; 0
    2244:	e8 e3       	ldi	r30, 0x38	; 56
    2246:	f0 e0       	ldi	r31, 0x00	; 0
    2248:	80 81       	ld	r24, Z
    224a:	48 2f       	mov	r20, r24
    224c:	8a 81       	ldd	r24, Y+2	; 0x02
    224e:	28 2f       	mov	r18, r24
    2250:	30 e0       	ldi	r19, 0x00	; 0
    2252:	81 e0       	ldi	r24, 0x01	; 1
    2254:	90 e0       	ldi	r25, 0x00	; 0
    2256:	02 2e       	mov	r0, r18
    2258:	02 c0       	rjmp	.+4      	; 0x225e <GPIO_writePin+0x10c>
    225a:	88 0f       	add	r24, r24
    225c:	99 1f       	adc	r25, r25
    225e:	0a 94       	dec	r0
    2260:	e2 f7       	brpl	.-8      	; 0x225a <GPIO_writePin+0x108>
    2262:	80 95       	com	r24
    2264:	84 23       	and	r24, r20
    2266:	8c 93       	st	X, r24
    2268:	57 c0       	rjmp	.+174    	; 0x2318 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    226a:	8b 81       	ldd	r24, Y+3	; 0x03
    226c:	81 30       	cpi	r24, 0x01	; 1
    226e:	a1 f4       	brne	.+40     	; 0x2298 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    2270:	a5 e3       	ldi	r26, 0x35	; 53
    2272:	b0 e0       	ldi	r27, 0x00	; 0
    2274:	e5 e3       	ldi	r30, 0x35	; 53
    2276:	f0 e0       	ldi	r31, 0x00	; 0
    2278:	80 81       	ld	r24, Z
    227a:	48 2f       	mov	r20, r24
    227c:	8a 81       	ldd	r24, Y+2	; 0x02
    227e:	28 2f       	mov	r18, r24
    2280:	30 e0       	ldi	r19, 0x00	; 0
    2282:	81 e0       	ldi	r24, 0x01	; 1
    2284:	90 e0       	ldi	r25, 0x00	; 0
    2286:	02 2e       	mov	r0, r18
    2288:	02 c0       	rjmp	.+4      	; 0x228e <GPIO_writePin+0x13c>
    228a:	88 0f       	add	r24, r24
    228c:	99 1f       	adc	r25, r25
    228e:	0a 94       	dec	r0
    2290:	e2 f7       	brpl	.-8      	; 0x228a <GPIO_writePin+0x138>
    2292:	84 2b       	or	r24, r20
    2294:	8c 93       	st	X, r24
    2296:	40 c0       	rjmp	.+128    	; 0x2318 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    2298:	a5 e3       	ldi	r26, 0x35	; 53
    229a:	b0 e0       	ldi	r27, 0x00	; 0
    229c:	e5 e3       	ldi	r30, 0x35	; 53
    229e:	f0 e0       	ldi	r31, 0x00	; 0
    22a0:	80 81       	ld	r24, Z
    22a2:	48 2f       	mov	r20, r24
    22a4:	8a 81       	ldd	r24, Y+2	; 0x02
    22a6:	28 2f       	mov	r18, r24
    22a8:	30 e0       	ldi	r19, 0x00	; 0
    22aa:	81 e0       	ldi	r24, 0x01	; 1
    22ac:	90 e0       	ldi	r25, 0x00	; 0
    22ae:	02 2e       	mov	r0, r18
    22b0:	02 c0       	rjmp	.+4      	; 0x22b6 <GPIO_writePin+0x164>
    22b2:	88 0f       	add	r24, r24
    22b4:	99 1f       	adc	r25, r25
    22b6:	0a 94       	dec	r0
    22b8:	e2 f7       	brpl	.-8      	; 0x22b2 <GPIO_writePin+0x160>
    22ba:	80 95       	com	r24
    22bc:	84 23       	and	r24, r20
    22be:	8c 93       	st	X, r24
    22c0:	2b c0       	rjmp	.+86     	; 0x2318 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    22c2:	8b 81       	ldd	r24, Y+3	; 0x03
    22c4:	81 30       	cpi	r24, 0x01	; 1
    22c6:	a1 f4       	brne	.+40     	; 0x22f0 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    22c8:	a2 e3       	ldi	r26, 0x32	; 50
    22ca:	b0 e0       	ldi	r27, 0x00	; 0
    22cc:	e2 e3       	ldi	r30, 0x32	; 50
    22ce:	f0 e0       	ldi	r31, 0x00	; 0
    22d0:	80 81       	ld	r24, Z
    22d2:	48 2f       	mov	r20, r24
    22d4:	8a 81       	ldd	r24, Y+2	; 0x02
    22d6:	28 2f       	mov	r18, r24
    22d8:	30 e0       	ldi	r19, 0x00	; 0
    22da:	81 e0       	ldi	r24, 0x01	; 1
    22dc:	90 e0       	ldi	r25, 0x00	; 0
    22de:	02 2e       	mov	r0, r18
    22e0:	02 c0       	rjmp	.+4      	; 0x22e6 <GPIO_writePin+0x194>
    22e2:	88 0f       	add	r24, r24
    22e4:	99 1f       	adc	r25, r25
    22e6:	0a 94       	dec	r0
    22e8:	e2 f7       	brpl	.-8      	; 0x22e2 <GPIO_writePin+0x190>
    22ea:	84 2b       	or	r24, r20
    22ec:	8c 93       	st	X, r24
    22ee:	14 c0       	rjmp	.+40     	; 0x2318 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    22f0:	a2 e3       	ldi	r26, 0x32	; 50
    22f2:	b0 e0       	ldi	r27, 0x00	; 0
    22f4:	e2 e3       	ldi	r30, 0x32	; 50
    22f6:	f0 e0       	ldi	r31, 0x00	; 0
    22f8:	80 81       	ld	r24, Z
    22fa:	48 2f       	mov	r20, r24
    22fc:	8a 81       	ldd	r24, Y+2	; 0x02
    22fe:	28 2f       	mov	r18, r24
    2300:	30 e0       	ldi	r19, 0x00	; 0
    2302:	81 e0       	ldi	r24, 0x01	; 1
    2304:	90 e0       	ldi	r25, 0x00	; 0
    2306:	02 2e       	mov	r0, r18
    2308:	02 c0       	rjmp	.+4      	; 0x230e <GPIO_writePin+0x1bc>
    230a:	88 0f       	add	r24, r24
    230c:	99 1f       	adc	r25, r25
    230e:	0a 94       	dec	r0
    2310:	e2 f7       	brpl	.-8      	; 0x230a <GPIO_writePin+0x1b8>
    2312:	80 95       	com	r24
    2314:	84 23       	and	r24, r20
    2316:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    2318:	0f 90       	pop	r0
    231a:	0f 90       	pop	r0
    231c:	0f 90       	pop	r0
    231e:	0f 90       	pop	r0
    2320:	0f 90       	pop	r0
    2322:	cf 91       	pop	r28
    2324:	df 91       	pop	r29
    2326:	08 95       	ret

00002328 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    2328:	df 93       	push	r29
    232a:	cf 93       	push	r28
    232c:	00 d0       	rcall	.+0      	; 0x232e <GPIO_readPin+0x6>
    232e:	00 d0       	rcall	.+0      	; 0x2330 <GPIO_readPin+0x8>
    2330:	00 d0       	rcall	.+0      	; 0x2332 <GPIO_readPin+0xa>
    2332:	cd b7       	in	r28, 0x3d	; 61
    2334:	de b7       	in	r29, 0x3e	; 62
    2336:	89 83       	std	Y+1, r24	; 0x01
    2338:	6a 83       	std	Y+2, r22	; 0x02
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    233a:	8a 81       	ldd	r24, Y+2	; 0x02
    233c:	88 30       	cpi	r24, 0x08	; 8
    233e:	08 f0       	brcs	.+2      	; 0x2342 <GPIO_readPin+0x1a>
    2340:	87 c0       	rjmp	.+270    	; 0x2450 <GPIO_readPin+0x128>
    2342:	89 81       	ldd	r24, Y+1	; 0x01
    2344:	84 30       	cpi	r24, 0x04	; 4
    2346:	08 f0       	brcs	.+2      	; 0x234a <GPIO_readPin+0x22>
    2348:	83 c0       	rjmp	.+262    	; 0x2450 <GPIO_readPin+0x128>
			/* Do Nothing */
		}
		else
		{
			/* Setup the pin direction as required */
			switch(port_num)
    234a:	89 81       	ldd	r24, Y+1	; 0x01
    234c:	28 2f       	mov	r18, r24
    234e:	30 e0       	ldi	r19, 0x00	; 0
    2350:	3d 83       	std	Y+5, r19	; 0x05
    2352:	2c 83       	std	Y+4, r18	; 0x04
    2354:	4c 81       	ldd	r20, Y+4	; 0x04
    2356:	5d 81       	ldd	r21, Y+5	; 0x05
    2358:	41 30       	cpi	r20, 0x01	; 1
    235a:	51 05       	cpc	r21, r1
    235c:	79 f1       	breq	.+94     	; 0x23bc <GPIO_readPin+0x94>
    235e:	8c 81       	ldd	r24, Y+4	; 0x04
    2360:	9d 81       	ldd	r25, Y+5	; 0x05
    2362:	82 30       	cpi	r24, 0x02	; 2
    2364:	91 05       	cpc	r25, r1
    2366:	34 f4       	brge	.+12     	; 0x2374 <GPIO_readPin+0x4c>
    2368:	2c 81       	ldd	r18, Y+4	; 0x04
    236a:	3d 81       	ldd	r19, Y+5	; 0x05
    236c:	21 15       	cp	r18, r1
    236e:	31 05       	cpc	r19, r1
    2370:	69 f0       	breq	.+26     	; 0x238c <GPIO_readPin+0x64>
    2372:	6c c0       	rjmp	.+216    	; 0x244c <GPIO_readPin+0x124>
    2374:	4c 81       	ldd	r20, Y+4	; 0x04
    2376:	5d 81       	ldd	r21, Y+5	; 0x05
    2378:	42 30       	cpi	r20, 0x02	; 2
    237a:	51 05       	cpc	r21, r1
    237c:	b9 f1       	breq	.+110    	; 0x23ec <GPIO_readPin+0xc4>
    237e:	8c 81       	ldd	r24, Y+4	; 0x04
    2380:	9d 81       	ldd	r25, Y+5	; 0x05
    2382:	83 30       	cpi	r24, 0x03	; 3
    2384:	91 05       	cpc	r25, r1
    2386:	09 f4       	brne	.+2      	; 0x238a <GPIO_readPin+0x62>
    2388:	49 c0       	rjmp	.+146    	; 0x241c <GPIO_readPin+0xf4>
    238a:	60 c0       	rjmp	.+192    	; 0x244c <GPIO_readPin+0x124>
			{
			case PORTA_ID:
				if(BIT_IS_SET(PINA,pin_num))
    238c:	e9 e3       	ldi	r30, 0x39	; 57
    238e:	f0 e0       	ldi	r31, 0x00	; 0
    2390:	80 81       	ld	r24, Z
    2392:	28 2f       	mov	r18, r24
    2394:	30 e0       	ldi	r19, 0x00	; 0
    2396:	8a 81       	ldd	r24, Y+2	; 0x02
    2398:	88 2f       	mov	r24, r24
    239a:	90 e0       	ldi	r25, 0x00	; 0
    239c:	a9 01       	movw	r20, r18
    239e:	02 c0       	rjmp	.+4      	; 0x23a4 <GPIO_readPin+0x7c>
    23a0:	55 95       	asr	r21
    23a2:	47 95       	ror	r20
    23a4:	8a 95       	dec	r24
    23a6:	e2 f7       	brpl	.-8      	; 0x23a0 <GPIO_readPin+0x78>
    23a8:	ca 01       	movw	r24, r20
    23aa:	81 70       	andi	r24, 0x01	; 1
    23ac:	90 70       	andi	r25, 0x00	; 0
    23ae:	88 23       	and	r24, r24
    23b0:	19 f0       	breq	.+6      	; 0x23b8 <GPIO_readPin+0x90>
				{
					return LOGIC_HIGH;  /*pint_value = LOGIC_HIGH*/
    23b2:	51 e0       	ldi	r21, 0x01	; 1
    23b4:	5b 83       	std	Y+3, r21	; 0x03
    23b6:	4d c0       	rjmp	.+154    	; 0x2452 <GPIO_readPin+0x12a>
				}
				else
					return LOGIC_LOW;
    23b8:	1b 82       	std	Y+3, r1	; 0x03
    23ba:	4b c0       	rjmp	.+150    	; 0x2452 <GPIO_readPin+0x12a>
				break;
			case PORTB_ID:
				if(BIT_IS_SET(PINB,pin_num))
    23bc:	e6 e3       	ldi	r30, 0x36	; 54
    23be:	f0 e0       	ldi	r31, 0x00	; 0
    23c0:	80 81       	ld	r24, Z
    23c2:	28 2f       	mov	r18, r24
    23c4:	30 e0       	ldi	r19, 0x00	; 0
    23c6:	8a 81       	ldd	r24, Y+2	; 0x02
    23c8:	88 2f       	mov	r24, r24
    23ca:	90 e0       	ldi	r25, 0x00	; 0
    23cc:	a9 01       	movw	r20, r18
    23ce:	02 c0       	rjmp	.+4      	; 0x23d4 <GPIO_readPin+0xac>
    23d0:	55 95       	asr	r21
    23d2:	47 95       	ror	r20
    23d4:	8a 95       	dec	r24
    23d6:	e2 f7       	brpl	.-8      	; 0x23d0 <GPIO_readPin+0xa8>
    23d8:	ca 01       	movw	r24, r20
    23da:	81 70       	andi	r24, 0x01	; 1
    23dc:	90 70       	andi	r25, 0x00	; 0
    23de:	88 23       	and	r24, r24
    23e0:	19 f0       	breq	.+6      	; 0x23e8 <GPIO_readPin+0xc0>
						{
					return LOGIC_HIGH;
    23e2:	51 e0       	ldi	r21, 0x01	; 1
    23e4:	5b 83       	std	Y+3, r21	; 0x03
    23e6:	35 c0       	rjmp	.+106    	; 0x2452 <GPIO_readPin+0x12a>
						}
				else
				return LOGIC_LOW;
    23e8:	1b 82       	std	Y+3, r1	; 0x03
    23ea:	33 c0       	rjmp	.+102    	; 0x2452 <GPIO_readPin+0x12a>
				break;
			case PORTC_ID:
				if(BIT_IS_SET(PINC,pin_num))
    23ec:	e3 e3       	ldi	r30, 0x33	; 51
    23ee:	f0 e0       	ldi	r31, 0x00	; 0
    23f0:	80 81       	ld	r24, Z
    23f2:	28 2f       	mov	r18, r24
    23f4:	30 e0       	ldi	r19, 0x00	; 0
    23f6:	8a 81       	ldd	r24, Y+2	; 0x02
    23f8:	88 2f       	mov	r24, r24
    23fa:	90 e0       	ldi	r25, 0x00	; 0
    23fc:	a9 01       	movw	r20, r18
    23fe:	02 c0       	rjmp	.+4      	; 0x2404 <GPIO_readPin+0xdc>
    2400:	55 95       	asr	r21
    2402:	47 95       	ror	r20
    2404:	8a 95       	dec	r24
    2406:	e2 f7       	brpl	.-8      	; 0x2400 <GPIO_readPin+0xd8>
    2408:	ca 01       	movw	r24, r20
    240a:	81 70       	andi	r24, 0x01	; 1
    240c:	90 70       	andi	r25, 0x00	; 0
    240e:	88 23       	and	r24, r24
    2410:	19 f0       	breq	.+6      	; 0x2418 <GPIO_readPin+0xf0>
					{
					return LOGIC_HIGH ;
    2412:	51 e0       	ldi	r21, 0x01	; 1
    2414:	5b 83       	std	Y+3, r21	; 0x03
    2416:	1d c0       	rjmp	.+58     	; 0x2452 <GPIO_readPin+0x12a>
					}
				else
					return LOGIC_LOW;
    2418:	1b 82       	std	Y+3, r1	; 0x03
    241a:	1b c0       	rjmp	.+54     	; 0x2452 <GPIO_readPin+0x12a>
				break;
			case PORTD_ID:
				if(BIT_IS_SET(PIND,pin_num))
    241c:	e0 e3       	ldi	r30, 0x30	; 48
    241e:	f0 e0       	ldi	r31, 0x00	; 0
    2420:	80 81       	ld	r24, Z
    2422:	28 2f       	mov	r18, r24
    2424:	30 e0       	ldi	r19, 0x00	; 0
    2426:	8a 81       	ldd	r24, Y+2	; 0x02
    2428:	88 2f       	mov	r24, r24
    242a:	90 e0       	ldi	r25, 0x00	; 0
    242c:	a9 01       	movw	r20, r18
    242e:	02 c0       	rjmp	.+4      	; 0x2434 <GPIO_readPin+0x10c>
    2430:	55 95       	asr	r21
    2432:	47 95       	ror	r20
    2434:	8a 95       	dec	r24
    2436:	e2 f7       	brpl	.-8      	; 0x2430 <GPIO_readPin+0x108>
    2438:	ca 01       	movw	r24, r20
    243a:	81 70       	andi	r24, 0x01	; 1
    243c:	90 70       	andi	r25, 0x00	; 0
    243e:	88 23       	and	r24, r24
    2440:	19 f0       	breq	.+6      	; 0x2448 <GPIO_readPin+0x120>
					{
					return LOGIC_HIGH;
    2442:	51 e0       	ldi	r21, 0x01	; 1
    2444:	5b 83       	std	Y+3, r21	; 0x03
    2446:	05 c0       	rjmp	.+10     	; 0x2452 <GPIO_readPin+0x12a>
					}
				else
					return LOGIC_LOW;
    2448:	1b 82       	std	Y+3, r1	; 0x03
    244a:	03 c0       	rjmp	.+6      	; 0x2452 <GPIO_readPin+0x12a>
				break;
			default :
				return LOGIC_LOW; /*To solve syntax error on return !*/
    244c:	1b 82       	std	Y+3, r1	; 0x03
    244e:	01 c0       	rjmp	.+2      	; 0x2452 <GPIO_readPin+0x12a>
    2450:	02 c0       	rjmp	.+4      	; 0x2456 <GPIO_readPin+0x12e>
			}
		}
	}
    2452:	8b 81       	ldd	r24, Y+3	; 0x03
    2454:	8e 83       	std	Y+6, r24	; 0x06
    2456:	8e 81       	ldd	r24, Y+6	; 0x06
    2458:	26 96       	adiw	r28, 0x06	; 6
    245a:	0f b6       	in	r0, 0x3f	; 63
    245c:	f8 94       	cli
    245e:	de bf       	out	0x3e, r29	; 62
    2460:	0f be       	out	0x3f, r0	; 63
    2462:	cd bf       	out	0x3d, r28	; 61
    2464:	cf 91       	pop	r28
    2466:	df 91       	pop	r29
    2468:	08 95       	ret

0000246a <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    246a:	df 93       	push	r29
    246c:	cf 93       	push	r28
    246e:	00 d0       	rcall	.+0      	; 0x2470 <GPIO_setupPortDirection+0x6>
    2470:	00 d0       	rcall	.+0      	; 0x2472 <GPIO_setupPortDirection+0x8>
    2472:	cd b7       	in	r28, 0x3d	; 61
    2474:	de b7       	in	r29, 0x3e	; 62
    2476:	89 83       	std	Y+1, r24	; 0x01
    2478:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    247a:	89 81       	ldd	r24, Y+1	; 0x01
    247c:	84 30       	cpi	r24, 0x04	; 4
    247e:	90 f5       	brcc	.+100    	; 0x24e4 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    2480:	89 81       	ldd	r24, Y+1	; 0x01
    2482:	28 2f       	mov	r18, r24
    2484:	30 e0       	ldi	r19, 0x00	; 0
    2486:	3c 83       	std	Y+4, r19	; 0x04
    2488:	2b 83       	std	Y+3, r18	; 0x03
    248a:	8b 81       	ldd	r24, Y+3	; 0x03
    248c:	9c 81       	ldd	r25, Y+4	; 0x04
    248e:	81 30       	cpi	r24, 0x01	; 1
    2490:	91 05       	cpc	r25, r1
    2492:	d1 f0       	breq	.+52     	; 0x24c8 <GPIO_setupPortDirection+0x5e>
    2494:	2b 81       	ldd	r18, Y+3	; 0x03
    2496:	3c 81       	ldd	r19, Y+4	; 0x04
    2498:	22 30       	cpi	r18, 0x02	; 2
    249a:	31 05       	cpc	r19, r1
    249c:	2c f4       	brge	.+10     	; 0x24a8 <GPIO_setupPortDirection+0x3e>
    249e:	8b 81       	ldd	r24, Y+3	; 0x03
    24a0:	9c 81       	ldd	r25, Y+4	; 0x04
    24a2:	00 97       	sbiw	r24, 0x00	; 0
    24a4:	61 f0       	breq	.+24     	; 0x24be <GPIO_setupPortDirection+0x54>
    24a6:	1e c0       	rjmp	.+60     	; 0x24e4 <GPIO_setupPortDirection+0x7a>
    24a8:	2b 81       	ldd	r18, Y+3	; 0x03
    24aa:	3c 81       	ldd	r19, Y+4	; 0x04
    24ac:	22 30       	cpi	r18, 0x02	; 2
    24ae:	31 05       	cpc	r19, r1
    24b0:	81 f0       	breq	.+32     	; 0x24d2 <GPIO_setupPortDirection+0x68>
    24b2:	8b 81       	ldd	r24, Y+3	; 0x03
    24b4:	9c 81       	ldd	r25, Y+4	; 0x04
    24b6:	83 30       	cpi	r24, 0x03	; 3
    24b8:	91 05       	cpc	r25, r1
    24ba:	81 f0       	breq	.+32     	; 0x24dc <GPIO_setupPortDirection+0x72>
    24bc:	13 c0       	rjmp	.+38     	; 0x24e4 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    24be:	ea e3       	ldi	r30, 0x3A	; 58
    24c0:	f0 e0       	ldi	r31, 0x00	; 0
    24c2:	8a 81       	ldd	r24, Y+2	; 0x02
    24c4:	80 83       	st	Z, r24
    24c6:	0e c0       	rjmp	.+28     	; 0x24e4 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    24c8:	e7 e3       	ldi	r30, 0x37	; 55
    24ca:	f0 e0       	ldi	r31, 0x00	; 0
    24cc:	8a 81       	ldd	r24, Y+2	; 0x02
    24ce:	80 83       	st	Z, r24
    24d0:	09 c0       	rjmp	.+18     	; 0x24e4 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    24d2:	e4 e3       	ldi	r30, 0x34	; 52
    24d4:	f0 e0       	ldi	r31, 0x00	; 0
    24d6:	8a 81       	ldd	r24, Y+2	; 0x02
    24d8:	80 83       	st	Z, r24
    24da:	04 c0       	rjmp	.+8      	; 0x24e4 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    24dc:	e1 e3       	ldi	r30, 0x31	; 49
    24de:	f0 e0       	ldi	r31, 0x00	; 0
    24e0:	8a 81       	ldd	r24, Y+2	; 0x02
    24e2:	80 83       	st	Z, r24
			break;
		}
	}
}
    24e4:	0f 90       	pop	r0
    24e6:	0f 90       	pop	r0
    24e8:	0f 90       	pop	r0
    24ea:	0f 90       	pop	r0
    24ec:	cf 91       	pop	r28
    24ee:	df 91       	pop	r29
    24f0:	08 95       	ret

000024f2 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    24f2:	df 93       	push	r29
    24f4:	cf 93       	push	r28
    24f6:	00 d0       	rcall	.+0      	; 0x24f8 <GPIO_writePort+0x6>
    24f8:	00 d0       	rcall	.+0      	; 0x24fa <GPIO_writePort+0x8>
    24fa:	cd b7       	in	r28, 0x3d	; 61
    24fc:	de b7       	in	r29, 0x3e	; 62
    24fe:	89 83       	std	Y+1, r24	; 0x01
    2500:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num >= NUM_OF_PORTS)
    2502:	89 81       	ldd	r24, Y+1	; 0x01
    2504:	84 30       	cpi	r24, 0x04	; 4
    2506:	90 f5       	brcc	.+100    	; 0x256c <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    2508:	89 81       	ldd	r24, Y+1	; 0x01
    250a:	28 2f       	mov	r18, r24
    250c:	30 e0       	ldi	r19, 0x00	; 0
    250e:	3c 83       	std	Y+4, r19	; 0x04
    2510:	2b 83       	std	Y+3, r18	; 0x03
    2512:	8b 81       	ldd	r24, Y+3	; 0x03
    2514:	9c 81       	ldd	r25, Y+4	; 0x04
    2516:	81 30       	cpi	r24, 0x01	; 1
    2518:	91 05       	cpc	r25, r1
    251a:	d1 f0       	breq	.+52     	; 0x2550 <GPIO_writePort+0x5e>
    251c:	2b 81       	ldd	r18, Y+3	; 0x03
    251e:	3c 81       	ldd	r19, Y+4	; 0x04
    2520:	22 30       	cpi	r18, 0x02	; 2
    2522:	31 05       	cpc	r19, r1
    2524:	2c f4       	brge	.+10     	; 0x2530 <GPIO_writePort+0x3e>
    2526:	8b 81       	ldd	r24, Y+3	; 0x03
    2528:	9c 81       	ldd	r25, Y+4	; 0x04
    252a:	00 97       	sbiw	r24, 0x00	; 0
    252c:	61 f0       	breq	.+24     	; 0x2546 <GPIO_writePort+0x54>
    252e:	1e c0       	rjmp	.+60     	; 0x256c <GPIO_writePort+0x7a>
    2530:	2b 81       	ldd	r18, Y+3	; 0x03
    2532:	3c 81       	ldd	r19, Y+4	; 0x04
    2534:	22 30       	cpi	r18, 0x02	; 2
    2536:	31 05       	cpc	r19, r1
    2538:	81 f0       	breq	.+32     	; 0x255a <GPIO_writePort+0x68>
    253a:	8b 81       	ldd	r24, Y+3	; 0x03
    253c:	9c 81       	ldd	r25, Y+4	; 0x04
    253e:	83 30       	cpi	r24, 0x03	; 3
    2540:	91 05       	cpc	r25, r1
    2542:	81 f0       	breq	.+32     	; 0x2564 <GPIO_writePort+0x72>
    2544:	13 c0       	rjmp	.+38     	; 0x256c <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    2546:	eb e3       	ldi	r30, 0x3B	; 59
    2548:	f0 e0       	ldi	r31, 0x00	; 0
    254a:	8a 81       	ldd	r24, Y+2	; 0x02
    254c:	80 83       	st	Z, r24
    254e:	0e c0       	rjmp	.+28     	; 0x256c <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    2550:	e8 e3       	ldi	r30, 0x38	; 56
    2552:	f0 e0       	ldi	r31, 0x00	; 0
    2554:	8a 81       	ldd	r24, Y+2	; 0x02
    2556:	80 83       	st	Z, r24
    2558:	09 c0       	rjmp	.+18     	; 0x256c <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    255a:	e5 e3       	ldi	r30, 0x35	; 53
    255c:	f0 e0       	ldi	r31, 0x00	; 0
    255e:	8a 81       	ldd	r24, Y+2	; 0x02
    2560:	80 83       	st	Z, r24
    2562:	04 c0       	rjmp	.+8      	; 0x256c <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    2564:	e2 e3       	ldi	r30, 0x32	; 50
    2566:	f0 e0       	ldi	r31, 0x00	; 0
    2568:	8a 81       	ldd	r24, Y+2	; 0x02
    256a:	80 83       	st	Z, r24
			break;
		}
	}
}
    256c:	0f 90       	pop	r0
    256e:	0f 90       	pop	r0
    2570:	0f 90       	pop	r0
    2572:	0f 90       	pop	r0
    2574:	cf 91       	pop	r28
    2576:	df 91       	pop	r29
    2578:	08 95       	ret

0000257a <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    257a:	df 93       	push	r29
    257c:	cf 93       	push	r28
    257e:	00 d0       	rcall	.+0      	; 0x2580 <GPIO_readPort+0x6>
    2580:	00 d0       	rcall	.+0      	; 0x2582 <GPIO_readPort+0x8>
    2582:	0f 92       	push	r0
    2584:	cd b7       	in	r28, 0x3d	; 61
    2586:	de b7       	in	r29, 0x3e	; 62
    2588:	89 83       	std	Y+1, r24	; 0x01
	if(port_num >= NUM_OF_PORTS)
    258a:	89 81       	ldd	r24, Y+1	; 0x01
    258c:	84 30       	cpi	r24, 0x04	; 4
    258e:	10 f0       	brcs	.+4      	; 0x2594 <GPIO_readPort+0x1a>
		{
			return 0;
    2590:	1c 82       	std	Y+4, r1	; 0x04
    2592:	34 c0       	rjmp	.+104    	; 0x25fc <GPIO_readPort+0x82>
		}
		else
		{
			/* Setup the port direction as required */
			switch(port_num)
    2594:	89 81       	ldd	r24, Y+1	; 0x01
    2596:	28 2f       	mov	r18, r24
    2598:	30 e0       	ldi	r19, 0x00	; 0
    259a:	3b 83       	std	Y+3, r19	; 0x03
    259c:	2a 83       	std	Y+2, r18	; 0x02
    259e:	8a 81       	ldd	r24, Y+2	; 0x02
    25a0:	9b 81       	ldd	r25, Y+3	; 0x03
    25a2:	81 30       	cpi	r24, 0x01	; 1
    25a4:	91 05       	cpc	r25, r1
    25a6:	d1 f0       	breq	.+52     	; 0x25dc <GPIO_readPort+0x62>
    25a8:	2a 81       	ldd	r18, Y+2	; 0x02
    25aa:	3b 81       	ldd	r19, Y+3	; 0x03
    25ac:	22 30       	cpi	r18, 0x02	; 2
    25ae:	31 05       	cpc	r19, r1
    25b0:	2c f4       	brge	.+10     	; 0x25bc <GPIO_readPort+0x42>
    25b2:	8a 81       	ldd	r24, Y+2	; 0x02
    25b4:	9b 81       	ldd	r25, Y+3	; 0x03
    25b6:	00 97       	sbiw	r24, 0x00	; 0
    25b8:	61 f0       	breq	.+24     	; 0x25d2 <GPIO_readPort+0x58>
    25ba:	1f c0       	rjmp	.+62     	; 0x25fa <GPIO_readPort+0x80>
    25bc:	2a 81       	ldd	r18, Y+2	; 0x02
    25be:	3b 81       	ldd	r19, Y+3	; 0x03
    25c0:	22 30       	cpi	r18, 0x02	; 2
    25c2:	31 05       	cpc	r19, r1
    25c4:	81 f0       	breq	.+32     	; 0x25e6 <GPIO_readPort+0x6c>
    25c6:	8a 81       	ldd	r24, Y+2	; 0x02
    25c8:	9b 81       	ldd	r25, Y+3	; 0x03
    25ca:	83 30       	cpi	r24, 0x03	; 3
    25cc:	91 05       	cpc	r25, r1
    25ce:	81 f0       	breq	.+32     	; 0x25f0 <GPIO_readPort+0x76>
    25d0:	14 c0       	rjmp	.+40     	; 0x25fa <GPIO_readPort+0x80>
			{
			case PORTA_ID:
				return PINA;
    25d2:	e9 e3       	ldi	r30, 0x39	; 57
    25d4:	f0 e0       	ldi	r31, 0x00	; 0
    25d6:	90 81       	ld	r25, Z
    25d8:	9c 83       	std	Y+4, r25	; 0x04
    25da:	10 c0       	rjmp	.+32     	; 0x25fc <GPIO_readPort+0x82>
				break;
			case PORTB_ID:
				return PINB;
    25dc:	e6 e3       	ldi	r30, 0x36	; 54
    25de:	f0 e0       	ldi	r31, 0x00	; 0
    25e0:	20 81       	ld	r18, Z
    25e2:	2c 83       	std	Y+4, r18	; 0x04
    25e4:	0b c0       	rjmp	.+22     	; 0x25fc <GPIO_readPort+0x82>
				break;
			case PORTC_ID:
				return PINC;
    25e6:	e3 e3       	ldi	r30, 0x33	; 51
    25e8:	f0 e0       	ldi	r31, 0x00	; 0
    25ea:	30 81       	ld	r19, Z
    25ec:	3c 83       	std	Y+4, r19	; 0x04
    25ee:	06 c0       	rjmp	.+12     	; 0x25fc <GPIO_readPort+0x82>
				break;
			case PORTD_ID:
				return PIND; /*value = PIND*/
    25f0:	e0 e3       	ldi	r30, 0x30	; 48
    25f2:	f0 e0       	ldi	r31, 0x00	; 0
    25f4:	80 81       	ld	r24, Z
    25f6:	8c 83       	std	Y+4, r24	; 0x04
    25f8:	01 c0       	rjmp	.+2      	; 0x25fc <GPIO_readPort+0x82>
    25fa:	02 c0       	rjmp	.+4      	; 0x2600 <GPIO_readPort+0x86>
				break;
			}
		}
	/*return the value here */
}
    25fc:	9c 81       	ldd	r25, Y+4	; 0x04
    25fe:	9d 83       	std	Y+5, r25	; 0x05
    2600:	8d 81       	ldd	r24, Y+5	; 0x05
    2602:	0f 90       	pop	r0
    2604:	0f 90       	pop	r0
    2606:	0f 90       	pop	r0
    2608:	0f 90       	pop	r0
    260a:	0f 90       	pop	r0
    260c:	cf 91       	pop	r28
    260e:	df 91       	pop	r29
    2610:	08 95       	ret

00002612 <TWI_init>:
#include "twi.h"
#include "common_macros.h"
#include <avr/io.h>

void TWI_init(const TWI_ConfigType * Config_Ptr)
{
    2612:	0f 93       	push	r16
    2614:	1f 93       	push	r17
    2616:	df 93       	push	r29
    2618:	cf 93       	push	r28
    261a:	00 d0       	rcall	.+0      	; 0x261c <TWI_init+0xa>
    261c:	cd b7       	in	r28, 0x3d	; 61
    261e:	de b7       	in	r29, 0x3e	; 62
    2620:	9a 83       	std	Y+2, r25	; 0x02
    2622:	89 83       	std	Y+1, r24	; 0x01
    /* Bit Rate: set bit rate from Config_Ptr using zero pre-scaler TWPS=00 and F_CPU value*/
	/*It's advised by AVR to leave pre-scalar to One*/

    TWBR = (uint8)((F_CPU/(2UL*(Config_Ptr->bit_rate)))-8UL);
    2624:	00 e2       	ldi	r16, 0x20	; 32
    2626:	10 e0       	ldi	r17, 0x00	; 0
    2628:	e9 81       	ldd	r30, Y+1	; 0x01
    262a:	fa 81       	ldd	r31, Y+2	; 0x02
    262c:	81 81       	ldd	r24, Z+1	; 0x01
    262e:	92 81       	ldd	r25, Z+2	; 0x02
    2630:	a3 81       	ldd	r26, Z+3	; 0x03
    2632:	b4 81       	ldd	r27, Z+4	; 0x04
    2634:	9c 01       	movw	r18, r24
    2636:	ad 01       	movw	r20, r26
    2638:	22 0f       	add	r18, r18
    263a:	33 1f       	adc	r19, r19
    263c:	44 1f       	adc	r20, r20
    263e:	55 1f       	adc	r21, r21
    2640:	80 e0       	ldi	r24, 0x00	; 0
    2642:	92 e1       	ldi	r25, 0x12	; 18
    2644:	aa e7       	ldi	r26, 0x7A	; 122
    2646:	b0 e0       	ldi	r27, 0x00	; 0
    2648:	bc 01       	movw	r22, r24
    264a:	cd 01       	movw	r24, r26
    264c:	0e 94 bc 13 	call	0x2778	; 0x2778 <__udivmodsi4>
    2650:	da 01       	movw	r26, r20
    2652:	c9 01       	movw	r24, r18
    2654:	88 50       	subi	r24, 0x08	; 8
    2656:	f8 01       	movw	r30, r16
    2658:	80 83       	st	Z, r24

    /*Status Register = 0 ; Pre-scalar bits = 0*/
	TWSR = 0x00;
    265a:	e1 e2       	ldi	r30, 0x21	; 33
    265c:	f0 e0       	ldi	r31, 0x00	; 0
    265e:	10 82       	st	Z, r1
	
    /* Two Wire Bus address set by Config_Ptr
     * and Left Shifted by ONE to be sent as 7-bits address
       General Call Recognition: Off */
    TWAR = ((Config_Ptr->address)<<1);
    2660:	a2 e2       	ldi	r26, 0x22	; 34
    2662:	b0 e0       	ldi	r27, 0x00	; 0
    2664:	e9 81       	ldd	r30, Y+1	; 0x01
    2666:	fa 81       	ldd	r31, Y+2	; 0x02
    2668:	80 81       	ld	r24, Z
    266a:	88 0f       	add	r24, r24
    266c:	8c 93       	st	X, r24

    TWCR = (1<<TWEN); /* enable TWI */
    266e:	e6 e5       	ldi	r30, 0x56	; 86
    2670:	f0 e0       	ldi	r31, 0x00	; 0
    2672:	84 e0       	ldi	r24, 0x04	; 4
    2674:	80 83       	st	Z, r24
}
    2676:	0f 90       	pop	r0
    2678:	0f 90       	pop	r0
    267a:	cf 91       	pop	r28
    267c:	df 91       	pop	r29
    267e:	1f 91       	pop	r17
    2680:	0f 91       	pop	r16
    2682:	08 95       	ret

00002684 <TWI_start>:

void TWI_start(void)
{
    2684:	df 93       	push	r29
    2686:	cf 93       	push	r28
    2688:	cd b7       	in	r28, 0x3d	; 61
    268a:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    268c:	e6 e5       	ldi	r30, 0x56	; 86
    268e:	f0 e0       	ldi	r31, 0x00	; 0
    2690:	84 ea       	ldi	r24, 0xA4	; 164
    2692:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2694:	e6 e5       	ldi	r30, 0x56	; 86
    2696:	f0 e0       	ldi	r31, 0x00	; 0
    2698:	80 81       	ld	r24, Z
    269a:	88 23       	and	r24, r24
    269c:	dc f7       	brge	.-10     	; 0x2694 <TWI_start+0x10>
}
    269e:	cf 91       	pop	r28
    26a0:	df 91       	pop	r29
    26a2:	08 95       	ret

000026a4 <TWI_stop>:

void TWI_stop(void)
{
    26a4:	df 93       	push	r29
    26a6:	cf 93       	push	r28
    26a8:	cd b7       	in	r28, 0x3d	; 61
    26aa:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    26ac:	e6 e5       	ldi	r30, 0x56	; 86
    26ae:	f0 e0       	ldi	r31, 0x00	; 0
    26b0:	84 e9       	ldi	r24, 0x94	; 148
    26b2:	80 83       	st	Z, r24
}
    26b4:	cf 91       	pop	r28
    26b6:	df 91       	pop	r29
    26b8:	08 95       	ret

000026ba <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    26ba:	df 93       	push	r29
    26bc:	cf 93       	push	r28
    26be:	0f 92       	push	r0
    26c0:	cd b7       	in	r28, 0x3d	; 61
    26c2:	de b7       	in	r29, 0x3e	; 62
    26c4:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    26c6:	e3 e2       	ldi	r30, 0x23	; 35
    26c8:	f0 e0       	ldi	r31, 0x00	; 0
    26ca:	89 81       	ldd	r24, Y+1	; 0x01
    26cc:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    26ce:	e6 e5       	ldi	r30, 0x56	; 86
    26d0:	f0 e0       	ldi	r31, 0x00	; 0
    26d2:	84 e8       	ldi	r24, 0x84	; 132
    26d4:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    26d6:	e6 e5       	ldi	r30, 0x56	; 86
    26d8:	f0 e0       	ldi	r31, 0x00	; 0
    26da:	80 81       	ld	r24, Z
    26dc:	88 23       	and	r24, r24
    26de:	dc f7       	brge	.-10     	; 0x26d6 <TWI_writeByte+0x1c>
}
    26e0:	0f 90       	pop	r0
    26e2:	cf 91       	pop	r28
    26e4:	df 91       	pop	r29
    26e6:	08 95       	ret

000026e8 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    26e8:	df 93       	push	r29
    26ea:	cf 93       	push	r28
    26ec:	cd b7       	in	r28, 0x3d	; 61
    26ee:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    26f0:	e6 e5       	ldi	r30, 0x56	; 86
    26f2:	f0 e0       	ldi	r31, 0x00	; 0
    26f4:	84 ec       	ldi	r24, 0xC4	; 196
    26f6:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    26f8:	e6 e5       	ldi	r30, 0x56	; 86
    26fa:	f0 e0       	ldi	r31, 0x00	; 0
    26fc:	80 81       	ld	r24, Z
    26fe:	88 23       	and	r24, r24
    2700:	dc f7       	brge	.-10     	; 0x26f8 <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    2702:	e3 e2       	ldi	r30, 0x23	; 35
    2704:	f0 e0       	ldi	r31, 0x00	; 0
    2706:	80 81       	ld	r24, Z
}
    2708:	cf 91       	pop	r28
    270a:	df 91       	pop	r29
    270c:	08 95       	ret

0000270e <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    270e:	df 93       	push	r29
    2710:	cf 93       	push	r28
    2712:	cd b7       	in	r28, 0x3d	; 61
    2714:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    2716:	e6 e5       	ldi	r30, 0x56	; 86
    2718:	f0 e0       	ldi	r31, 0x00	; 0
    271a:	84 e8       	ldi	r24, 0x84	; 132
    271c:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    271e:	e6 e5       	ldi	r30, 0x56	; 86
    2720:	f0 e0       	ldi	r31, 0x00	; 0
    2722:	80 81       	ld	r24, Z
    2724:	88 23       	and	r24, r24
    2726:	dc f7       	brge	.-10     	; 0x271e <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    2728:	e3 e2       	ldi	r30, 0x23	; 35
    272a:	f0 e0       	ldi	r31, 0x00	; 0
    272c:	80 81       	ld	r24, Z
}
    272e:	cf 91       	pop	r28
    2730:	df 91       	pop	r29
    2732:	08 95       	ret

00002734 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    2734:	df 93       	push	r29
    2736:	cf 93       	push	r28
    2738:	0f 92       	push	r0
    273a:	cd b7       	in	r28, 0x3d	; 61
    273c:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    273e:	e1 e2       	ldi	r30, 0x21	; 33
    2740:	f0 e0       	ldi	r31, 0x00	; 0
    2742:	80 81       	ld	r24, Z
    2744:	88 7f       	andi	r24, 0xF8	; 248
    2746:	89 83       	std	Y+1, r24	; 0x01
    return status;
    2748:	89 81       	ldd	r24, Y+1	; 0x01
}
    274a:	0f 90       	pop	r0
    274c:	cf 91       	pop	r28
    274e:	df 91       	pop	r29
    2750:	08 95       	ret

00002752 <__divmodhi4>:
    2752:	97 fb       	bst	r25, 7
    2754:	09 2e       	mov	r0, r25
    2756:	07 26       	eor	r0, r23
    2758:	0a d0       	rcall	.+20     	; 0x276e <__divmodhi4_neg1>
    275a:	77 fd       	sbrc	r23, 7
    275c:	04 d0       	rcall	.+8      	; 0x2766 <__divmodhi4_neg2>
    275e:	2e d0       	rcall	.+92     	; 0x27bc <__udivmodhi4>
    2760:	06 d0       	rcall	.+12     	; 0x276e <__divmodhi4_neg1>
    2762:	00 20       	and	r0, r0
    2764:	1a f4       	brpl	.+6      	; 0x276c <__divmodhi4_exit>

00002766 <__divmodhi4_neg2>:
    2766:	70 95       	com	r23
    2768:	61 95       	neg	r22
    276a:	7f 4f       	sbci	r23, 0xFF	; 255

0000276c <__divmodhi4_exit>:
    276c:	08 95       	ret

0000276e <__divmodhi4_neg1>:
    276e:	f6 f7       	brtc	.-4      	; 0x276c <__divmodhi4_exit>
    2770:	90 95       	com	r25
    2772:	81 95       	neg	r24
    2774:	9f 4f       	sbci	r25, 0xFF	; 255
    2776:	08 95       	ret

00002778 <__udivmodsi4>:
    2778:	a1 e2       	ldi	r26, 0x21	; 33
    277a:	1a 2e       	mov	r1, r26
    277c:	aa 1b       	sub	r26, r26
    277e:	bb 1b       	sub	r27, r27
    2780:	fd 01       	movw	r30, r26
    2782:	0d c0       	rjmp	.+26     	; 0x279e <__udivmodsi4_ep>

00002784 <__udivmodsi4_loop>:
    2784:	aa 1f       	adc	r26, r26
    2786:	bb 1f       	adc	r27, r27
    2788:	ee 1f       	adc	r30, r30
    278a:	ff 1f       	adc	r31, r31
    278c:	a2 17       	cp	r26, r18
    278e:	b3 07       	cpc	r27, r19
    2790:	e4 07       	cpc	r30, r20
    2792:	f5 07       	cpc	r31, r21
    2794:	20 f0       	brcs	.+8      	; 0x279e <__udivmodsi4_ep>
    2796:	a2 1b       	sub	r26, r18
    2798:	b3 0b       	sbc	r27, r19
    279a:	e4 0b       	sbc	r30, r20
    279c:	f5 0b       	sbc	r31, r21

0000279e <__udivmodsi4_ep>:
    279e:	66 1f       	adc	r22, r22
    27a0:	77 1f       	adc	r23, r23
    27a2:	88 1f       	adc	r24, r24
    27a4:	99 1f       	adc	r25, r25
    27a6:	1a 94       	dec	r1
    27a8:	69 f7       	brne	.-38     	; 0x2784 <__udivmodsi4_loop>
    27aa:	60 95       	com	r22
    27ac:	70 95       	com	r23
    27ae:	80 95       	com	r24
    27b0:	90 95       	com	r25
    27b2:	9b 01       	movw	r18, r22
    27b4:	ac 01       	movw	r20, r24
    27b6:	bd 01       	movw	r22, r26
    27b8:	cf 01       	movw	r24, r30
    27ba:	08 95       	ret

000027bc <__udivmodhi4>:
    27bc:	aa 1b       	sub	r26, r26
    27be:	bb 1b       	sub	r27, r27
    27c0:	51 e1       	ldi	r21, 0x11	; 17
    27c2:	07 c0       	rjmp	.+14     	; 0x27d2 <__udivmodhi4_ep>

000027c4 <__udivmodhi4_loop>:
    27c4:	aa 1f       	adc	r26, r26
    27c6:	bb 1f       	adc	r27, r27
    27c8:	a6 17       	cp	r26, r22
    27ca:	b7 07       	cpc	r27, r23
    27cc:	10 f0       	brcs	.+4      	; 0x27d2 <__udivmodhi4_ep>
    27ce:	a6 1b       	sub	r26, r22
    27d0:	b7 0b       	sbc	r27, r23

000027d2 <__udivmodhi4_ep>:
    27d2:	88 1f       	adc	r24, r24
    27d4:	99 1f       	adc	r25, r25
    27d6:	5a 95       	dec	r21
    27d8:	a9 f7       	brne	.-22     	; 0x27c4 <__udivmodhi4_loop>
    27da:	80 95       	com	r24
    27dc:	90 95       	com	r25
    27de:	bc 01       	movw	r22, r24
    27e0:	cd 01       	movw	r24, r26
    27e2:	08 95       	ret

000027e4 <__prologue_saves__>:
    27e4:	2f 92       	push	r2
    27e6:	3f 92       	push	r3
    27e8:	4f 92       	push	r4
    27ea:	5f 92       	push	r5
    27ec:	6f 92       	push	r6
    27ee:	7f 92       	push	r7
    27f0:	8f 92       	push	r8
    27f2:	9f 92       	push	r9
    27f4:	af 92       	push	r10
    27f6:	bf 92       	push	r11
    27f8:	cf 92       	push	r12
    27fa:	df 92       	push	r13
    27fc:	ef 92       	push	r14
    27fe:	ff 92       	push	r15
    2800:	0f 93       	push	r16
    2802:	1f 93       	push	r17
    2804:	cf 93       	push	r28
    2806:	df 93       	push	r29
    2808:	cd b7       	in	r28, 0x3d	; 61
    280a:	de b7       	in	r29, 0x3e	; 62
    280c:	ca 1b       	sub	r28, r26
    280e:	db 0b       	sbc	r29, r27
    2810:	0f b6       	in	r0, 0x3f	; 63
    2812:	f8 94       	cli
    2814:	de bf       	out	0x3e, r29	; 62
    2816:	0f be       	out	0x3f, r0	; 63
    2818:	cd bf       	out	0x3d, r28	; 61
    281a:	09 94       	ijmp

0000281c <__epilogue_restores__>:
    281c:	2a 88       	ldd	r2, Y+18	; 0x12
    281e:	39 88       	ldd	r3, Y+17	; 0x11
    2820:	48 88       	ldd	r4, Y+16	; 0x10
    2822:	5f 84       	ldd	r5, Y+15	; 0x0f
    2824:	6e 84       	ldd	r6, Y+14	; 0x0e
    2826:	7d 84       	ldd	r7, Y+13	; 0x0d
    2828:	8c 84       	ldd	r8, Y+12	; 0x0c
    282a:	9b 84       	ldd	r9, Y+11	; 0x0b
    282c:	aa 84       	ldd	r10, Y+10	; 0x0a
    282e:	b9 84       	ldd	r11, Y+9	; 0x09
    2830:	c8 84       	ldd	r12, Y+8	; 0x08
    2832:	df 80       	ldd	r13, Y+7	; 0x07
    2834:	ee 80       	ldd	r14, Y+6	; 0x06
    2836:	fd 80       	ldd	r15, Y+5	; 0x05
    2838:	0c 81       	ldd	r16, Y+4	; 0x04
    283a:	1b 81       	ldd	r17, Y+3	; 0x03
    283c:	aa 81       	ldd	r26, Y+2	; 0x02
    283e:	b9 81       	ldd	r27, Y+1	; 0x01
    2840:	ce 0f       	add	r28, r30
    2842:	d1 1d       	adc	r29, r1
    2844:	0f b6       	in	r0, 0x3f	; 63
    2846:	f8 94       	cli
    2848:	de bf       	out	0x3e, r29	; 62
    284a:	0f be       	out	0x3f, r0	; 63
    284c:	cd bf       	out	0x3d, r28	; 61
    284e:	ed 01       	movw	r28, r26
    2850:	08 95       	ret

00002852 <_exit>:
    2852:	f8 94       	cli

00002854 <__stop_program>:
    2854:	ff cf       	rjmp	.-2      	; 0x2854 <__stop_program>

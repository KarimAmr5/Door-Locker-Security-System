
Final_Project_HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000498a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000010a  00800060  0000498a  00004a1e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  0080016a  0080016a  00004b28  2**0
                  ALLOC
  3 .stab         00003df8  00000000  00000000  00004b28  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001509  00000000  00000000  00008920  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00009e29  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00009f69  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000a0d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000bd22  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000cc0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000d9bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000db1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000dda9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000e577  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 88 1d 	jmp	0x3b10	; 0x3b10 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 bb 1d 	jmp	0x3b76	; 0x3b76 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e8       	ldi	r30, 0x8A	; 138
      68:	f9 e4       	ldi	r31, 0x49	; 73
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 36       	cpi	r26, 0x6A	; 106
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa e6       	ldi	r26, 0x6A	; 106
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 37       	cpi	r26, 0x71	; 113
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 c3 24 	jmp	0x4986	; 0x4986 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 47 24 	jmp	0x488e	; 0x488e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a5 e5       	ldi	r26, 0x55	; 85
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 63 24 	jmp	0x48c6	; 0x48c6 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 53 24 	jmp	0x48a6	; 0x48a6 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 6f 24 	jmp	0x48de	; 0x48de <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 53 24 	jmp	0x48a6	; 0x48a6 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 6f 24 	jmp	0x48de	; 0x48de <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 47 24 	jmp	0x488e	; 0x488e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	85 e5       	ldi	r24, 0x55	; 85
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 63 24 	jmp	0x48c6	; 0x48c6 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 53 24 	jmp	0x48a6	; 0x48a6 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 6f 24 	jmp	0x48de	; 0x48de <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 53 24 	jmp	0x48a6	; 0x48a6 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 6f 24 	jmp	0x48de	; 0x48de <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 53 24 	jmp	0x48a6	; 0x48a6 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 6f 24 	jmp	0x48de	; 0x48de <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 57 24 	jmp	0x48ae	; 0x48ae <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 73 24 	jmp	0x48e6	; 0x48e6 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:
 ********************************************************************************/



int main()
{
     b46:	0f 93       	push	r16
     b48:	1f 93       	push	r17
     b4a:	df 93       	push	r29
     b4c:	cf 93       	push	r28
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	cd 56       	subi	r28, 0x6D	; 109
     b54:	d0 40       	sbci	r29, 0x00	; 0
     b56:	0f b6       	in	r0, 0x3f	; 63
     b58:	f8 94       	cli
     b5a:	de bf       	out	0x3e, r29	; 62
     b5c:	0f be       	out	0x3f, r0	; 63
     b5e:	cd bf       	out	0x3d, r28	; 61
	*  Data Bit Mode 		= 8 Bits
	*  Parity Check 		= Even Parity
	*  Number of Stop Bits  = One
	*  Baud Rate			= 9600
	*************************************************/
	UART_ConfigType s_UARTconfig = {EightBit,EvenParity,OneStopBit,9600};
     b60:	ce 01       	movw	r24, r28
     b62:	8b 5a       	subi	r24, 0xAB	; 171
     b64:	9f 4f       	sbci	r25, 0xFF	; 255
     b66:	a6 96       	adiw	r28, 0x26	; 38
     b68:	9f af       	std	Y+63, r25	; 0x3f
     b6a:	8e af       	std	Y+62, r24	; 0x3e
     b6c:	a6 97       	sbiw	r28, 0x26	; 38
     b6e:	23 e6       	ldi	r18, 0x63	; 99
     b70:	31 e0       	ldi	r19, 0x01	; 1
     b72:	a8 96       	adiw	r28, 0x28	; 40
     b74:	3f af       	std	Y+63, r19	; 0x3f
     b76:	2e af       	std	Y+62, r18	; 0x3e
     b78:	a8 97       	sbiw	r28, 0x28	; 40
     b7a:	37 e0       	ldi	r19, 0x07	; 7
     b7c:	a9 96       	adiw	r28, 0x29	; 41
     b7e:	3f af       	std	Y+63, r19	; 0x3f
     b80:	a9 97       	sbiw	r28, 0x29	; 41
     b82:	a8 96       	adiw	r28, 0x28	; 40
     b84:	ee ad       	ldd	r30, Y+62	; 0x3e
     b86:	ff ad       	ldd	r31, Y+63	; 0x3f
     b88:	a8 97       	sbiw	r28, 0x28	; 40
     b8a:	00 80       	ld	r0, Z
     b8c:	a8 96       	adiw	r28, 0x28	; 40
     b8e:	2e ad       	ldd	r18, Y+62	; 0x3e
     b90:	3f ad       	ldd	r19, Y+63	; 0x3f
     b92:	a8 97       	sbiw	r28, 0x28	; 40
     b94:	2f 5f       	subi	r18, 0xFF	; 255
     b96:	3f 4f       	sbci	r19, 0xFF	; 255
     b98:	a8 96       	adiw	r28, 0x28	; 40
     b9a:	3f af       	std	Y+63, r19	; 0x3f
     b9c:	2e af       	std	Y+62, r18	; 0x3e
     b9e:	a8 97       	sbiw	r28, 0x28	; 40
     ba0:	a6 96       	adiw	r28, 0x26	; 38
     ba2:	ee ad       	ldd	r30, Y+62	; 0x3e
     ba4:	ff ad       	ldd	r31, Y+63	; 0x3f
     ba6:	a6 97       	sbiw	r28, 0x26	; 38
     ba8:	00 82       	st	Z, r0
     baa:	a6 96       	adiw	r28, 0x26	; 38
     bac:	2e ad       	ldd	r18, Y+62	; 0x3e
     bae:	3f ad       	ldd	r19, Y+63	; 0x3f
     bb0:	a6 97       	sbiw	r28, 0x26	; 38
     bb2:	2f 5f       	subi	r18, 0xFF	; 255
     bb4:	3f 4f       	sbci	r19, 0xFF	; 255
     bb6:	a6 96       	adiw	r28, 0x26	; 38
     bb8:	3f af       	std	Y+63, r19	; 0x3f
     bba:	2e af       	std	Y+62, r18	; 0x3e
     bbc:	a6 97       	sbiw	r28, 0x26	; 38
     bbe:	a9 96       	adiw	r28, 0x29	; 41
     bc0:	3f ad       	ldd	r19, Y+63	; 0x3f
     bc2:	a9 97       	sbiw	r28, 0x29	; 41
     bc4:	31 50       	subi	r19, 0x01	; 1
     bc6:	a9 96       	adiw	r28, 0x29	; 41
     bc8:	3f af       	std	Y+63, r19	; 0x3f
     bca:	a9 97       	sbiw	r28, 0x29	; 41
     bcc:	a9 96       	adiw	r28, 0x29	; 41
     bce:	8f ad       	ldd	r24, Y+63	; 0x3f
     bd0:	a9 97       	sbiw	r28, 0x29	; 41
     bd2:	88 23       	and	r24, r24
     bd4:	b1 f6       	brne	.-84     	; 0xb82 <main+0x3c>
	*  Initial Value 	= 0
	*  Compare Value 	= 7813 ( every one second )
	*  Pre-Scalar 		= F_CPU/1024
	*  Timer1 Mode		= CTC (Compare Mode)
	*************************************************/
	Timer1_ConfigType s_Timer1Config = {0,7813,FCPU_1024,Compare};
     bd6:	ce 01       	movw	r24, r28
     bd8:	84 5a       	subi	r24, 0xA4	; 164
     bda:	9f 4f       	sbci	r25, 0xFF	; 255
     bdc:	ab 96       	adiw	r28, 0x2b	; 43
     bde:	9f af       	std	Y+63, r25	; 0x3f
     be0:	8e af       	std	Y+62, r24	; 0x3e
     be2:	ab 97       	sbiw	r28, 0x2b	; 43
     be4:	ed e5       	ldi	r30, 0x5D	; 93
     be6:	f1 e0       	ldi	r31, 0x01	; 1
     be8:	ad 96       	adiw	r28, 0x2d	; 45
     bea:	ff af       	std	Y+63, r31	; 0x3f
     bec:	ee af       	std	Y+62, r30	; 0x3e
     bee:	ad 97       	sbiw	r28, 0x2d	; 45
     bf0:	f6 e0       	ldi	r31, 0x06	; 6
     bf2:	ae 96       	adiw	r28, 0x2e	; 46
     bf4:	ff af       	std	Y+63, r31	; 0x3f
     bf6:	ae 97       	sbiw	r28, 0x2e	; 46
     bf8:	ad 96       	adiw	r28, 0x2d	; 45
     bfa:	ee ad       	ldd	r30, Y+62	; 0x3e
     bfc:	ff ad       	ldd	r31, Y+63	; 0x3f
     bfe:	ad 97       	sbiw	r28, 0x2d	; 45
     c00:	00 80       	ld	r0, Z
     c02:	ad 96       	adiw	r28, 0x2d	; 45
     c04:	2e ad       	ldd	r18, Y+62	; 0x3e
     c06:	3f ad       	ldd	r19, Y+63	; 0x3f
     c08:	ad 97       	sbiw	r28, 0x2d	; 45
     c0a:	2f 5f       	subi	r18, 0xFF	; 255
     c0c:	3f 4f       	sbci	r19, 0xFF	; 255
     c0e:	ad 96       	adiw	r28, 0x2d	; 45
     c10:	3f af       	std	Y+63, r19	; 0x3f
     c12:	2e af       	std	Y+62, r18	; 0x3e
     c14:	ad 97       	sbiw	r28, 0x2d	; 45
     c16:	ab 96       	adiw	r28, 0x2b	; 43
     c18:	ee ad       	ldd	r30, Y+62	; 0x3e
     c1a:	ff ad       	ldd	r31, Y+63	; 0x3f
     c1c:	ab 97       	sbiw	r28, 0x2b	; 43
     c1e:	00 82       	st	Z, r0
     c20:	ab 96       	adiw	r28, 0x2b	; 43
     c22:	2e ad       	ldd	r18, Y+62	; 0x3e
     c24:	3f ad       	ldd	r19, Y+63	; 0x3f
     c26:	ab 97       	sbiw	r28, 0x2b	; 43
     c28:	2f 5f       	subi	r18, 0xFF	; 255
     c2a:	3f 4f       	sbci	r19, 0xFF	; 255
     c2c:	ab 96       	adiw	r28, 0x2b	; 43
     c2e:	3f af       	std	Y+63, r19	; 0x3f
     c30:	2e af       	std	Y+62, r18	; 0x3e
     c32:	ab 97       	sbiw	r28, 0x2b	; 43
     c34:	ae 96       	adiw	r28, 0x2e	; 46
     c36:	3f ad       	ldd	r19, Y+63	; 0x3f
     c38:	ae 97       	sbiw	r28, 0x2e	; 46
     c3a:	31 50       	subi	r19, 0x01	; 1
     c3c:	ae 96       	adiw	r28, 0x2e	; 46
     c3e:	3f af       	std	Y+63, r19	; 0x3f
     c40:	ae 97       	sbiw	r28, 0x2e	; 46
     c42:	ae 96       	adiw	r28, 0x2e	; 46
     c44:	8f ad       	ldd	r24, Y+63	; 0x3f
     c46:	ae 97       	sbiw	r28, 0x2e	; 46
     c48:	88 23       	and	r24, r24
     c4a:	b1 f6       	brne	.-84     	; 0xbf8 <main+0xb2>

	/*********************************************************************/

	/************************ Drivers Initializations *********************/

	UART_init(&s_UARTconfig); /*UART Init. with req. configuration*/
     c4c:	ce 01       	movw	r24, r28
     c4e:	8b 5a       	subi	r24, 0xAB	; 171
     c50:	9f 4f       	sbci	r25, 0xFF	; 255
     c52:	0e 94 ee 1d 	call	0x3bdc	; 0x3bdc <UART_init>
     c56:	fe 01       	movw	r30, r28
     c58:	ef 5a       	subi	r30, 0xAF	; 175
     c5a:	ff 4f       	sbci	r31, 0xFF	; 255
     c5c:	80 e0       	ldi	r24, 0x00	; 0
     c5e:	90 e0       	ldi	r25, 0x00	; 0
     c60:	a0 e2       	ldi	r26, 0x20	; 32
     c62:	b1 e4       	ldi	r27, 0x41	; 65
     c64:	80 83       	st	Z, r24
     c66:	91 83       	std	Z+1, r25	; 0x01
     c68:	a2 83       	std	Z+2, r26	; 0x02
     c6a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c6c:	8e 01       	movw	r16, r28
     c6e:	03 5b       	subi	r16, 0xB3	; 179
     c70:	1f 4f       	sbci	r17, 0xFF	; 255
     c72:	fe 01       	movw	r30, r28
     c74:	ef 5a       	subi	r30, 0xAF	; 175
     c76:	ff 4f       	sbci	r31, 0xFF	; 255
     c78:	60 81       	ld	r22, Z
     c7a:	71 81       	ldd	r23, Z+1	; 0x01
     c7c:	82 81       	ldd	r24, Z+2	; 0x02
     c7e:	93 81       	ldd	r25, Z+3	; 0x03
     c80:	20 e0       	ldi	r18, 0x00	; 0
     c82:	30 e0       	ldi	r19, 0x00	; 0
     c84:	4a ef       	ldi	r20, 0xFA	; 250
     c86:	54 e4       	ldi	r21, 0x44	; 68
     c88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c8c:	dc 01       	movw	r26, r24
     c8e:	cb 01       	movw	r24, r22
     c90:	f8 01       	movw	r30, r16
     c92:	80 83       	st	Z, r24
     c94:	91 83       	std	Z+1, r25	; 0x01
     c96:	a2 83       	std	Z+2, r26	; 0x02
     c98:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     c9a:	fe 01       	movw	r30, r28
     c9c:	e3 5b       	subi	r30, 0xB3	; 179
     c9e:	ff 4f       	sbci	r31, 0xFF	; 255
     ca0:	60 81       	ld	r22, Z
     ca2:	71 81       	ldd	r23, Z+1	; 0x01
     ca4:	82 81       	ldd	r24, Z+2	; 0x02
     ca6:	93 81       	ldd	r25, Z+3	; 0x03
     ca8:	20 e0       	ldi	r18, 0x00	; 0
     caa:	30 e0       	ldi	r19, 0x00	; 0
     cac:	40 e8       	ldi	r20, 0x80	; 128
     cae:	5f e3       	ldi	r21, 0x3F	; 63
     cb0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     cb4:	88 23       	and	r24, r24
     cb6:	44 f4       	brge	.+16     	; 0xcc8 <main+0x182>
		__ticks = 1;
     cb8:	fe 01       	movw	r30, r28
     cba:	e5 5b       	subi	r30, 0xB5	; 181
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	81 e0       	ldi	r24, 0x01	; 1
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	91 83       	std	Z+1, r25	; 0x01
     cc4:	80 83       	st	Z, r24
     cc6:	64 c0       	rjmp	.+200    	; 0xd90 <main+0x24a>
	else if (__tmp > 65535)
     cc8:	fe 01       	movw	r30, r28
     cca:	e3 5b       	subi	r30, 0xB3	; 179
     ccc:	ff 4f       	sbci	r31, 0xFF	; 255
     cce:	60 81       	ld	r22, Z
     cd0:	71 81       	ldd	r23, Z+1	; 0x01
     cd2:	82 81       	ldd	r24, Z+2	; 0x02
     cd4:	93 81       	ldd	r25, Z+3	; 0x03
     cd6:	20 e0       	ldi	r18, 0x00	; 0
     cd8:	3f ef       	ldi	r19, 0xFF	; 255
     cda:	4f e7       	ldi	r20, 0x7F	; 127
     cdc:	57 e4       	ldi	r21, 0x47	; 71
     cde:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     ce2:	18 16       	cp	r1, r24
     ce4:	0c f0       	brlt	.+2      	; 0xce8 <main+0x1a2>
     ce6:	43 c0       	rjmp	.+134    	; 0xd6e <main+0x228>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ce8:	fe 01       	movw	r30, r28
     cea:	ef 5a       	subi	r30, 0xAF	; 175
     cec:	ff 4f       	sbci	r31, 0xFF	; 255
     cee:	60 81       	ld	r22, Z
     cf0:	71 81       	ldd	r23, Z+1	; 0x01
     cf2:	82 81       	ldd	r24, Z+2	; 0x02
     cf4:	93 81       	ldd	r25, Z+3	; 0x03
     cf6:	20 e0       	ldi	r18, 0x00	; 0
     cf8:	30 e0       	ldi	r19, 0x00	; 0
     cfa:	40 e2       	ldi	r20, 0x20	; 32
     cfc:	51 e4       	ldi	r21, 0x41	; 65
     cfe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d02:	dc 01       	movw	r26, r24
     d04:	cb 01       	movw	r24, r22
     d06:	8e 01       	movw	r16, r28
     d08:	05 5b       	subi	r16, 0xB5	; 181
     d0a:	1f 4f       	sbci	r17, 0xFF	; 255
     d0c:	bc 01       	movw	r22, r24
     d0e:	cd 01       	movw	r24, r26
     d10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d14:	dc 01       	movw	r26, r24
     d16:	cb 01       	movw	r24, r22
     d18:	f8 01       	movw	r30, r16
     d1a:	91 83       	std	Z+1, r25	; 0x01
     d1c:	80 83       	st	Z, r24
     d1e:	1f c0       	rjmp	.+62     	; 0xd5e <main+0x218>
     d20:	fe 01       	movw	r30, r28
     d22:	e7 5b       	subi	r30, 0xB7	; 183
     d24:	ff 4f       	sbci	r31, 0xFF	; 255
     d26:	88 ec       	ldi	r24, 0xC8	; 200
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	91 83       	std	Z+1, r25	; 0x01
     d2c:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d2e:	fe 01       	movw	r30, r28
     d30:	e7 5b       	subi	r30, 0xB7	; 183
     d32:	ff 4f       	sbci	r31, 0xFF	; 255
     d34:	80 81       	ld	r24, Z
     d36:	91 81       	ldd	r25, Z+1	; 0x01
     d38:	01 97       	sbiw	r24, 0x01	; 1
     d3a:	f1 f7       	brne	.-4      	; 0xd38 <main+0x1f2>
     d3c:	fe 01       	movw	r30, r28
     d3e:	e7 5b       	subi	r30, 0xB7	; 183
     d40:	ff 4f       	sbci	r31, 0xFF	; 255
     d42:	91 83       	std	Z+1, r25	; 0x01
     d44:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d46:	de 01       	movw	r26, r28
     d48:	a5 5b       	subi	r26, 0xB5	; 181
     d4a:	bf 4f       	sbci	r27, 0xFF	; 255
     d4c:	fe 01       	movw	r30, r28
     d4e:	e5 5b       	subi	r30, 0xB5	; 181
     d50:	ff 4f       	sbci	r31, 0xFF	; 255
     d52:	80 81       	ld	r24, Z
     d54:	91 81       	ldd	r25, Z+1	; 0x01
     d56:	01 97       	sbiw	r24, 0x01	; 1
     d58:	11 96       	adiw	r26, 0x01	; 1
     d5a:	9c 93       	st	X, r25
     d5c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d5e:	fe 01       	movw	r30, r28
     d60:	e5 5b       	subi	r30, 0xB5	; 181
     d62:	ff 4f       	sbci	r31, 0xFF	; 255
     d64:	80 81       	ld	r24, Z
     d66:	91 81       	ldd	r25, Z+1	; 0x01
     d68:	00 97       	sbiw	r24, 0x00	; 0
     d6a:	d1 f6       	brne	.-76     	; 0xd20 <main+0x1da>
     d6c:	27 c0       	rjmp	.+78     	; 0xdbc <main+0x276>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d6e:	8e 01       	movw	r16, r28
     d70:	05 5b       	subi	r16, 0xB5	; 181
     d72:	1f 4f       	sbci	r17, 0xFF	; 255
     d74:	fe 01       	movw	r30, r28
     d76:	e3 5b       	subi	r30, 0xB3	; 179
     d78:	ff 4f       	sbci	r31, 0xFF	; 255
     d7a:	60 81       	ld	r22, Z
     d7c:	71 81       	ldd	r23, Z+1	; 0x01
     d7e:	82 81       	ldd	r24, Z+2	; 0x02
     d80:	93 81       	ldd	r25, Z+3	; 0x03
     d82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d86:	dc 01       	movw	r26, r24
     d88:	cb 01       	movw	r24, r22
     d8a:	f8 01       	movw	r30, r16
     d8c:	91 83       	std	Z+1, r25	; 0x01
     d8e:	80 83       	st	Z, r24
     d90:	de 01       	movw	r26, r28
     d92:	a9 5b       	subi	r26, 0xB9	; 185
     d94:	bf 4f       	sbci	r27, 0xFF	; 255
     d96:	fe 01       	movw	r30, r28
     d98:	e5 5b       	subi	r30, 0xB5	; 181
     d9a:	ff 4f       	sbci	r31, 0xFF	; 255
     d9c:	80 81       	ld	r24, Z
     d9e:	91 81       	ldd	r25, Z+1	; 0x01
     da0:	8d 93       	st	X+, r24
     da2:	9c 93       	st	X, r25
     da4:	fe 01       	movw	r30, r28
     da6:	e9 5b       	subi	r30, 0xB9	; 185
     da8:	ff 4f       	sbci	r31, 0xFF	; 255
     daa:	80 81       	ld	r24, Z
     dac:	91 81       	ldd	r25, Z+1	; 0x01
     dae:	01 97       	sbiw	r24, 0x01	; 1
     db0:	f1 f7       	brne	.-4      	; 0xdae <main+0x268>
     db2:	fe 01       	movw	r30, r28
     db4:	e9 5b       	subi	r30, 0xB9	; 185
     db6:	ff 4f       	sbci	r31, 0xFF	; 255
     db8:	91 83       	std	Z+1, r25	; 0x01
     dba:	80 83       	st	Z, r24

	_delay_ms(10); /*Allow time for transmission & initialization*/

	LCD_init(); /*LCD Init.*/
     dbc:	0e 94 93 12 	call	0x2526	; 0x2526 <LCD_init>
     dc0:	fe 01       	movw	r30, r28
     dc2:	ed 5b       	subi	r30, 0xBD	; 189
     dc4:	ff 4f       	sbci	r31, 0xFF	; 255
     dc6:	80 e0       	ldi	r24, 0x00	; 0
     dc8:	90 e0       	ldi	r25, 0x00	; 0
     dca:	a0 e2       	ldi	r26, 0x20	; 32
     dcc:	b1 e4       	ldi	r27, 0x41	; 65
     dce:	80 83       	st	Z, r24
     dd0:	91 83       	std	Z+1, r25	; 0x01
     dd2:	a2 83       	std	Z+2, r26	; 0x02
     dd4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     dd6:	8e 01       	movw	r16, r28
     dd8:	01 5c       	subi	r16, 0xC1	; 193
     dda:	1f 4f       	sbci	r17, 0xFF	; 255
     ddc:	fe 01       	movw	r30, r28
     dde:	ed 5b       	subi	r30, 0xBD	; 189
     de0:	ff 4f       	sbci	r31, 0xFF	; 255
     de2:	60 81       	ld	r22, Z
     de4:	71 81       	ldd	r23, Z+1	; 0x01
     de6:	82 81       	ldd	r24, Z+2	; 0x02
     de8:	93 81       	ldd	r25, Z+3	; 0x03
     dea:	20 e0       	ldi	r18, 0x00	; 0
     dec:	30 e0       	ldi	r19, 0x00	; 0
     dee:	4a ef       	ldi	r20, 0xFA	; 250
     df0:	54 e4       	ldi	r21, 0x44	; 68
     df2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     df6:	dc 01       	movw	r26, r24
     df8:	cb 01       	movw	r24, r22
     dfa:	f8 01       	movw	r30, r16
     dfc:	80 83       	st	Z, r24
     dfe:	91 83       	std	Z+1, r25	; 0x01
     e00:	a2 83       	std	Z+2, r26	; 0x02
     e02:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     e04:	fe 01       	movw	r30, r28
     e06:	ff 96       	adiw	r30, 0x3f	; 63
     e08:	60 81       	ld	r22, Z
     e0a:	71 81       	ldd	r23, Z+1	; 0x01
     e0c:	82 81       	ldd	r24, Z+2	; 0x02
     e0e:	93 81       	ldd	r25, Z+3	; 0x03
     e10:	20 e0       	ldi	r18, 0x00	; 0
     e12:	30 e0       	ldi	r19, 0x00	; 0
     e14:	40 e8       	ldi	r20, 0x80	; 128
     e16:	5f e3       	ldi	r21, 0x3F	; 63
     e18:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e1c:	88 23       	and	r24, r24
     e1e:	2c f4       	brge	.+10     	; 0xe2a <main+0x2e4>
		__ticks = 1;
     e20:	81 e0       	ldi	r24, 0x01	; 1
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	9e af       	std	Y+62, r25	; 0x3e
     e26:	8d af       	std	Y+61, r24	; 0x3d
     e28:	46 c0       	rjmp	.+140    	; 0xeb6 <main+0x370>
	else if (__tmp > 65535)
     e2a:	fe 01       	movw	r30, r28
     e2c:	ff 96       	adiw	r30, 0x3f	; 63
     e2e:	60 81       	ld	r22, Z
     e30:	71 81       	ldd	r23, Z+1	; 0x01
     e32:	82 81       	ldd	r24, Z+2	; 0x02
     e34:	93 81       	ldd	r25, Z+3	; 0x03
     e36:	20 e0       	ldi	r18, 0x00	; 0
     e38:	3f ef       	ldi	r19, 0xFF	; 255
     e3a:	4f e7       	ldi	r20, 0x7F	; 127
     e3c:	57 e4       	ldi	r21, 0x47	; 71
     e3e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e42:	18 16       	cp	r1, r24
     e44:	64 f5       	brge	.+88     	; 0xe9e <main+0x358>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e46:	fe 01       	movw	r30, r28
     e48:	ed 5b       	subi	r30, 0xBD	; 189
     e4a:	ff 4f       	sbci	r31, 0xFF	; 255
     e4c:	60 81       	ld	r22, Z
     e4e:	71 81       	ldd	r23, Z+1	; 0x01
     e50:	82 81       	ldd	r24, Z+2	; 0x02
     e52:	93 81       	ldd	r25, Z+3	; 0x03
     e54:	20 e0       	ldi	r18, 0x00	; 0
     e56:	30 e0       	ldi	r19, 0x00	; 0
     e58:	40 e2       	ldi	r20, 0x20	; 32
     e5a:	51 e4       	ldi	r21, 0x41	; 65
     e5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e60:	dc 01       	movw	r26, r24
     e62:	cb 01       	movw	r24, r22
     e64:	bc 01       	movw	r22, r24
     e66:	cd 01       	movw	r24, r26
     e68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e6c:	dc 01       	movw	r26, r24
     e6e:	cb 01       	movw	r24, r22
     e70:	9e af       	std	Y+62, r25	; 0x3e
     e72:	8d af       	std	Y+61, r24	; 0x3d
     e74:	0f c0       	rjmp	.+30     	; 0xe94 <main+0x34e>
     e76:	88 ec       	ldi	r24, 0xC8	; 200
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	9c af       	std	Y+60, r25	; 0x3c
     e7c:	8b af       	std	Y+59, r24	; 0x3b
     e7e:	8b ad       	ldd	r24, Y+59	; 0x3b
     e80:	9c ad       	ldd	r25, Y+60	; 0x3c
     e82:	01 97       	sbiw	r24, 0x01	; 1
     e84:	f1 f7       	brne	.-4      	; 0xe82 <main+0x33c>
     e86:	9c af       	std	Y+60, r25	; 0x3c
     e88:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e8a:	8d ad       	ldd	r24, Y+61	; 0x3d
     e8c:	9e ad       	ldd	r25, Y+62	; 0x3e
     e8e:	01 97       	sbiw	r24, 0x01	; 1
     e90:	9e af       	std	Y+62, r25	; 0x3e
     e92:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e94:	8d ad       	ldd	r24, Y+61	; 0x3d
     e96:	9e ad       	ldd	r25, Y+62	; 0x3e
     e98:	00 97       	sbiw	r24, 0x00	; 0
     e9a:	69 f7       	brne	.-38     	; 0xe76 <main+0x330>
     e9c:	16 c0       	rjmp	.+44     	; 0xeca <main+0x384>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e9e:	fe 01       	movw	r30, r28
     ea0:	ff 96       	adiw	r30, 0x3f	; 63
     ea2:	60 81       	ld	r22, Z
     ea4:	71 81       	ldd	r23, Z+1	; 0x01
     ea6:	82 81       	ldd	r24, Z+2	; 0x02
     ea8:	93 81       	ldd	r25, Z+3	; 0x03
     eaa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     eae:	dc 01       	movw	r26, r24
     eb0:	cb 01       	movw	r24, r22
     eb2:	9e af       	std	Y+62, r25	; 0x3e
     eb4:	8d af       	std	Y+61, r24	; 0x3d
     eb6:	8d ad       	ldd	r24, Y+61	; 0x3d
     eb8:	9e ad       	ldd	r25, Y+62	; 0x3e
     eba:	9a af       	std	Y+58, r25	; 0x3a
     ebc:	89 af       	std	Y+57, r24	; 0x39
     ebe:	89 ad       	ldd	r24, Y+57	; 0x39
     ec0:	9a ad       	ldd	r25, Y+58	; 0x3a
     ec2:	01 97       	sbiw	r24, 0x01	; 1
     ec4:	f1 f7       	brne	.-4      	; 0xec2 <main+0x37c>
     ec6:	9a af       	std	Y+58, r25	; 0x3a
     ec8:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(10); /*Allow time for transmission & initialization*/

	/*********************************************************************/

	LCD_displayStringRowColumn(0,2,"Welcome To ");
     eca:	20 e6       	ldi	r18, 0x60	; 96
     ecc:	30 e0       	ldi	r19, 0x00	; 0
     ece:	80 e0       	ldi	r24, 0x00	; 0
     ed0:	62 e0       	ldi	r22, 0x02	; 2
     ed2:	a9 01       	movw	r20, r18
     ed4:	0e 94 a9 1c 	call	0x3952	; 0x3952 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1,1,"Final Project !");
     ed8:	2c e6       	ldi	r18, 0x6C	; 108
     eda:	30 e0       	ldi	r19, 0x00	; 0
     edc:	81 e0       	ldi	r24, 0x01	; 1
     ede:	61 e0       	ldi	r22, 0x01	; 1
     ee0:	a9 01       	movw	r20, r18
     ee2:	0e 94 a9 1c 	call	0x3952	; 0x3952 <LCD_displayStringRowColumn>
     ee6:	80 e0       	ldi	r24, 0x00	; 0
     ee8:	90 e8       	ldi	r25, 0x80	; 128
     eea:	ab eb       	ldi	r26, 0xBB	; 187
     eec:	b4 e4       	ldi	r27, 0x44	; 68
     eee:	8d ab       	std	Y+53, r24	; 0x35
     ef0:	9e ab       	std	Y+54, r25	; 0x36
     ef2:	af ab       	std	Y+55, r26	; 0x37
     ef4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ef6:	6d a9       	ldd	r22, Y+53	; 0x35
     ef8:	7e a9       	ldd	r23, Y+54	; 0x36
     efa:	8f a9       	ldd	r24, Y+55	; 0x37
     efc:	98 ad       	ldd	r25, Y+56	; 0x38
     efe:	20 e0       	ldi	r18, 0x00	; 0
     f00:	30 e0       	ldi	r19, 0x00	; 0
     f02:	4a ef       	ldi	r20, 0xFA	; 250
     f04:	54 e4       	ldi	r21, 0x44	; 68
     f06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f0a:	dc 01       	movw	r26, r24
     f0c:	cb 01       	movw	r24, r22
     f0e:	89 ab       	std	Y+49, r24	; 0x31
     f10:	9a ab       	std	Y+50, r25	; 0x32
     f12:	ab ab       	std	Y+51, r26	; 0x33
     f14:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     f16:	69 a9       	ldd	r22, Y+49	; 0x31
     f18:	7a a9       	ldd	r23, Y+50	; 0x32
     f1a:	8b a9       	ldd	r24, Y+51	; 0x33
     f1c:	9c a9       	ldd	r25, Y+52	; 0x34
     f1e:	20 e0       	ldi	r18, 0x00	; 0
     f20:	30 e0       	ldi	r19, 0x00	; 0
     f22:	40 e8       	ldi	r20, 0x80	; 128
     f24:	5f e3       	ldi	r21, 0x3F	; 63
     f26:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f2a:	88 23       	and	r24, r24
     f2c:	2c f4       	brge	.+10     	; 0xf38 <main+0x3f2>
		__ticks = 1;
     f2e:	81 e0       	ldi	r24, 0x01	; 1
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	98 ab       	std	Y+48, r25	; 0x30
     f34:	8f a7       	std	Y+47, r24	; 0x2f
     f36:	3f c0       	rjmp	.+126    	; 0xfb6 <main+0x470>
	else if (__tmp > 65535)
     f38:	69 a9       	ldd	r22, Y+49	; 0x31
     f3a:	7a a9       	ldd	r23, Y+50	; 0x32
     f3c:	8b a9       	ldd	r24, Y+51	; 0x33
     f3e:	9c a9       	ldd	r25, Y+52	; 0x34
     f40:	20 e0       	ldi	r18, 0x00	; 0
     f42:	3f ef       	ldi	r19, 0xFF	; 255
     f44:	4f e7       	ldi	r20, 0x7F	; 127
     f46:	57 e4       	ldi	r21, 0x47	; 71
     f48:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f4c:	18 16       	cp	r1, r24
     f4e:	4c f5       	brge	.+82     	; 0xfa2 <main+0x45c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f50:	6d a9       	ldd	r22, Y+53	; 0x35
     f52:	7e a9       	ldd	r23, Y+54	; 0x36
     f54:	8f a9       	ldd	r24, Y+55	; 0x37
     f56:	98 ad       	ldd	r25, Y+56	; 0x38
     f58:	20 e0       	ldi	r18, 0x00	; 0
     f5a:	30 e0       	ldi	r19, 0x00	; 0
     f5c:	40 e2       	ldi	r20, 0x20	; 32
     f5e:	51 e4       	ldi	r21, 0x41	; 65
     f60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f64:	dc 01       	movw	r26, r24
     f66:	cb 01       	movw	r24, r22
     f68:	bc 01       	movw	r22, r24
     f6a:	cd 01       	movw	r24, r26
     f6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f70:	dc 01       	movw	r26, r24
     f72:	cb 01       	movw	r24, r22
     f74:	98 ab       	std	Y+48, r25	; 0x30
     f76:	8f a7       	std	Y+47, r24	; 0x2f
     f78:	0f c0       	rjmp	.+30     	; 0xf98 <main+0x452>
     f7a:	88 ec       	ldi	r24, 0xC8	; 200
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	9e a7       	std	Y+46, r25	; 0x2e
     f80:	8d a7       	std	Y+45, r24	; 0x2d
     f82:	8d a5       	ldd	r24, Y+45	; 0x2d
     f84:	9e a5       	ldd	r25, Y+46	; 0x2e
     f86:	01 97       	sbiw	r24, 0x01	; 1
     f88:	f1 f7       	brne	.-4      	; 0xf86 <main+0x440>
     f8a:	9e a7       	std	Y+46, r25	; 0x2e
     f8c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f8e:	8f a5       	ldd	r24, Y+47	; 0x2f
     f90:	98 a9       	ldd	r25, Y+48	; 0x30
     f92:	01 97       	sbiw	r24, 0x01	; 1
     f94:	98 ab       	std	Y+48, r25	; 0x30
     f96:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f98:	8f a5       	ldd	r24, Y+47	; 0x2f
     f9a:	98 a9       	ldd	r25, Y+48	; 0x30
     f9c:	00 97       	sbiw	r24, 0x00	; 0
     f9e:	69 f7       	brne	.-38     	; 0xf7a <main+0x434>
     fa0:	14 c0       	rjmp	.+40     	; 0xfca <main+0x484>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fa2:	69 a9       	ldd	r22, Y+49	; 0x31
     fa4:	7a a9       	ldd	r23, Y+50	; 0x32
     fa6:	8b a9       	ldd	r24, Y+51	; 0x33
     fa8:	9c a9       	ldd	r25, Y+52	; 0x34
     faa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fae:	dc 01       	movw	r26, r24
     fb0:	cb 01       	movw	r24, r22
     fb2:	98 ab       	std	Y+48, r25	; 0x30
     fb4:	8f a7       	std	Y+47, r24	; 0x2f
     fb6:	8f a5       	ldd	r24, Y+47	; 0x2f
     fb8:	98 a9       	ldd	r25, Y+48	; 0x30
     fba:	9c a7       	std	Y+44, r25	; 0x2c
     fbc:	8b a7       	std	Y+43, r24	; 0x2b
     fbe:	8b a5       	ldd	r24, Y+43	; 0x2b
     fc0:	9c a5       	ldd	r25, Y+44	; 0x2c
     fc2:	01 97       	sbiw	r24, 0x01	; 1
     fc4:	f1 f7       	brne	.-4      	; 0xfc2 <main+0x47c>
     fc6:	9c a7       	std	Y+44, r25	; 0x2c
     fc8:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(1500); /*Display message for 1.5 seconds*/

	LCD_cleanScreen();
     fca:	0e 94 c2 1c 	call	0x3984	; 0x3984 <LCD_cleanScreen>

	LCD_moveCursor(0,0);
     fce:	80 e0       	ldi	r24, 0x00	; 0
     fd0:	60 e0       	ldi	r22, 0x00	; 0
     fd2:	0e 94 67 1c 	call	0x38ce	; 0x38ce <LCD_moveCursor>

	/* If password are matched and saved in EEPROM ,
	 * nextStatus will be set to Main_menu
	 * OR
	 * will return UmatchedPW*/
	APP_nextState = setPassword();
     fd6:	0e 94 9b 0a 	call	0x1536	; 0x1536 <setPassword>
     fda:	80 93 70 01 	sts	0x0170, r24
	/***************************** Main Loop ****************************/

	while(1)
	{
		/*Checks the required application function*/
		switch(APP_nextState)
     fde:	80 91 70 01 	lds	r24, 0x0170
     fe2:	28 2f       	mov	r18, r24
     fe4:	30 e0       	ldi	r19, 0x00	; 0
     fe6:	a4 96       	adiw	r28, 0x24	; 36
     fe8:	3f af       	std	Y+63, r19	; 0x3f
     fea:	2e af       	std	Y+62, r18	; 0x3e
     fec:	a4 97       	sbiw	r28, 0x24	; 36
     fee:	a4 96       	adiw	r28, 0x24	; 36
     ff0:	8e ad       	ldd	r24, Y+62	; 0x3e
     ff2:	9f ad       	ldd	r25, Y+63	; 0x3f
     ff4:	a4 97       	sbiw	r28, 0x24	; 36
     ff6:	81 30       	cpi	r24, 0x01	; 1
     ff8:	91 05       	cpc	r25, r1
     ffa:	19 f1       	breq	.+70     	; 0x1042 <main+0x4fc>
     ffc:	a4 96       	adiw	r28, 0x24	; 36
     ffe:	ee ad       	ldd	r30, Y+62	; 0x3e
    1000:	ff ad       	ldd	r31, Y+63	; 0x3f
    1002:	a4 97       	sbiw	r28, 0x24	; 36
    1004:	e2 30       	cpi	r30, 0x02	; 2
    1006:	f1 05       	cpc	r31, r1
    1008:	44 f4       	brge	.+16     	; 0x101a <main+0x4d4>
    100a:	a4 96       	adiw	r28, 0x24	; 36
    100c:	2e ad       	ldd	r18, Y+62	; 0x3e
    100e:	3f ad       	ldd	r19, Y+63	; 0x3f
    1010:	a4 97       	sbiw	r28, 0x24	; 36
    1012:	21 15       	cp	r18, r1
    1014:	31 05       	cpc	r19, r1
    1016:	91 f0       	breq	.+36     	; 0x103c <main+0x4f6>
    1018:	e2 cf       	rjmp	.-60     	; 0xfde <main+0x498>
    101a:	a4 96       	adiw	r28, 0x24	; 36
    101c:	8e ad       	ldd	r24, Y+62	; 0x3e
    101e:	9f ad       	ldd	r25, Y+63	; 0x3f
    1020:	a4 97       	sbiw	r28, 0x24	; 36
    1022:	82 30       	cpi	r24, 0x02	; 2
    1024:	91 05       	cpc	r25, r1
    1026:	09 f4       	brne	.+2      	; 0x102a <main+0x4e4>
    1028:	92 c0       	rjmp	.+292    	; 0x114e <main+0x608>
    102a:	a4 96       	adiw	r28, 0x24	; 36
    102c:	ee ad       	ldd	r30, Y+62	; 0x3e
    102e:	ff ad       	ldd	r31, Y+63	; 0x3f
    1030:	a4 97       	sbiw	r28, 0x24	; 36
    1032:	e3 30       	cpi	r30, 0x03	; 3
    1034:	f1 05       	cpc	r31, r1
    1036:	09 f4       	brne	.+2      	; 0x103a <main+0x4f4>
    1038:	2e c1       	rjmp	.+604    	; 0x1296 <main+0x750>
    103a:	d1 cf       	rjmp	.-94     	; 0xfde <main+0x498>
		{
		case MainMenu : /*Password set Success !*/

			/*Display Main Menu*/
			mainMenu();
    103c:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <mainMenu>
    1040:	ce cf       	rjmp	.-100    	; 0xfde <main+0x498>
			break;

		case UnmatchedPW : /*Failed password match  */

			LCD_cleanScreen();
    1042:	0e 94 c2 1c 	call	0x3984	; 0x3984 <LCD_cleanScreen>

			LCD_displayString("    Error !");
    1046:	8c e7       	ldi	r24, 0x7C	; 124
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	0e 94 3b 1c 	call	0x3876	; 0x3876 <LCD_displayString>

			LCD_displayStringRowColumn(1,0,"Unmatched pass");
    104e:	28 e8       	ldi	r18, 0x88	; 136
    1050:	30 e0       	ldi	r19, 0x00	; 0
    1052:	81 e0       	ldi	r24, 0x01	; 1
    1054:	60 e0       	ldi	r22, 0x00	; 0
    1056:	a9 01       	movw	r20, r18
    1058:	0e 94 a9 1c 	call	0x3952	; 0x3952 <LCD_displayStringRowColumn>
    105c:	80 e0       	ldi	r24, 0x00	; 0
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	aa e7       	ldi	r26, 0x7A	; 122
    1062:	b4 e4       	ldi	r27, 0x44	; 68
    1064:	8f a3       	std	Y+39, r24	; 0x27
    1066:	98 a7       	std	Y+40, r25	; 0x28
    1068:	a9 a7       	std	Y+41, r26	; 0x29
    106a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    106c:	6f a1       	ldd	r22, Y+39	; 0x27
    106e:	78 a5       	ldd	r23, Y+40	; 0x28
    1070:	89 a5       	ldd	r24, Y+41	; 0x29
    1072:	9a a5       	ldd	r25, Y+42	; 0x2a
    1074:	20 e0       	ldi	r18, 0x00	; 0
    1076:	30 e0       	ldi	r19, 0x00	; 0
    1078:	4a ef       	ldi	r20, 0xFA	; 250
    107a:	54 e4       	ldi	r21, 0x44	; 68
    107c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1080:	dc 01       	movw	r26, r24
    1082:	cb 01       	movw	r24, r22
    1084:	8b a3       	std	Y+35, r24	; 0x23
    1086:	9c a3       	std	Y+36, r25	; 0x24
    1088:	ad a3       	std	Y+37, r26	; 0x25
    108a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    108c:	6b a1       	ldd	r22, Y+35	; 0x23
    108e:	7c a1       	ldd	r23, Y+36	; 0x24
    1090:	8d a1       	ldd	r24, Y+37	; 0x25
    1092:	9e a1       	ldd	r25, Y+38	; 0x26
    1094:	20 e0       	ldi	r18, 0x00	; 0
    1096:	30 e0       	ldi	r19, 0x00	; 0
    1098:	40 e8       	ldi	r20, 0x80	; 128
    109a:	5f e3       	ldi	r21, 0x3F	; 63
    109c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    10a0:	88 23       	and	r24, r24
    10a2:	2c f4       	brge	.+10     	; 0x10ae <main+0x568>
		__ticks = 1;
    10a4:	81 e0       	ldi	r24, 0x01	; 1
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	9a a3       	std	Y+34, r25	; 0x22
    10aa:	89 a3       	std	Y+33, r24	; 0x21
    10ac:	3f c0       	rjmp	.+126    	; 0x112c <main+0x5e6>
	else if (__tmp > 65535)
    10ae:	6b a1       	ldd	r22, Y+35	; 0x23
    10b0:	7c a1       	ldd	r23, Y+36	; 0x24
    10b2:	8d a1       	ldd	r24, Y+37	; 0x25
    10b4:	9e a1       	ldd	r25, Y+38	; 0x26
    10b6:	20 e0       	ldi	r18, 0x00	; 0
    10b8:	3f ef       	ldi	r19, 0xFF	; 255
    10ba:	4f e7       	ldi	r20, 0x7F	; 127
    10bc:	57 e4       	ldi	r21, 0x47	; 71
    10be:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    10c2:	18 16       	cp	r1, r24
    10c4:	4c f5       	brge	.+82     	; 0x1118 <main+0x5d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10c6:	6f a1       	ldd	r22, Y+39	; 0x27
    10c8:	78 a5       	ldd	r23, Y+40	; 0x28
    10ca:	89 a5       	ldd	r24, Y+41	; 0x29
    10cc:	9a a5       	ldd	r25, Y+42	; 0x2a
    10ce:	20 e0       	ldi	r18, 0x00	; 0
    10d0:	30 e0       	ldi	r19, 0x00	; 0
    10d2:	40 e2       	ldi	r20, 0x20	; 32
    10d4:	51 e4       	ldi	r21, 0x41	; 65
    10d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10da:	dc 01       	movw	r26, r24
    10dc:	cb 01       	movw	r24, r22
    10de:	bc 01       	movw	r22, r24
    10e0:	cd 01       	movw	r24, r26
    10e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10e6:	dc 01       	movw	r26, r24
    10e8:	cb 01       	movw	r24, r22
    10ea:	9a a3       	std	Y+34, r25	; 0x22
    10ec:	89 a3       	std	Y+33, r24	; 0x21
    10ee:	0f c0       	rjmp	.+30     	; 0x110e <main+0x5c8>
    10f0:	88 ec       	ldi	r24, 0xC8	; 200
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	98 a3       	std	Y+32, r25	; 0x20
    10f6:	8f 8f       	std	Y+31, r24	; 0x1f
    10f8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    10fa:	98 a1       	ldd	r25, Y+32	; 0x20
    10fc:	01 97       	sbiw	r24, 0x01	; 1
    10fe:	f1 f7       	brne	.-4      	; 0x10fc <main+0x5b6>
    1100:	98 a3       	std	Y+32, r25	; 0x20
    1102:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1104:	89 a1       	ldd	r24, Y+33	; 0x21
    1106:	9a a1       	ldd	r25, Y+34	; 0x22
    1108:	01 97       	sbiw	r24, 0x01	; 1
    110a:	9a a3       	std	Y+34, r25	; 0x22
    110c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    110e:	89 a1       	ldd	r24, Y+33	; 0x21
    1110:	9a a1       	ldd	r25, Y+34	; 0x22
    1112:	00 97       	sbiw	r24, 0x00	; 0
    1114:	69 f7       	brne	.-38     	; 0x10f0 <main+0x5aa>
    1116:	14 c0       	rjmp	.+40     	; 0x1140 <main+0x5fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1118:	6b a1       	ldd	r22, Y+35	; 0x23
    111a:	7c a1       	ldd	r23, Y+36	; 0x24
    111c:	8d a1       	ldd	r24, Y+37	; 0x25
    111e:	9e a1       	ldd	r25, Y+38	; 0x26
    1120:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1124:	dc 01       	movw	r26, r24
    1126:	cb 01       	movw	r24, r22
    1128:	9a a3       	std	Y+34, r25	; 0x22
    112a:	89 a3       	std	Y+33, r24	; 0x21
    112c:	89 a1       	ldd	r24, Y+33	; 0x21
    112e:	9a a1       	ldd	r25, Y+34	; 0x22
    1130:	9e 8f       	std	Y+30, r25	; 0x1e
    1132:	8d 8f       	std	Y+29, r24	; 0x1d
    1134:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1136:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1138:	01 97       	sbiw	r24, 0x01	; 1
    113a:	f1 f7       	brne	.-4      	; 0x1138 <main+0x5f2>
    113c:	9e 8f       	std	Y+30, r25	; 0x1e
    113e:	8d 8f       	std	Y+29, r24	; 0x1d

			_delay_ms(1000); /*Display message for 1 second*/

			LCD_cleanScreen();
    1140:	0e 94 c2 1c 	call	0x3984	; 0x3984 <LCD_cleanScreen>

			APP_nextState = setPassword();
    1144:	0e 94 9b 0a 	call	0x1536	; 0x1536 <setPassword>
    1148:	80 93 70 01 	sts	0x0170, r24
    114c:	48 cf       	rjmp	.-368    	; 0xfde <main+0x498>

			break;

		case OpenDoor : /*Door unlocking is triggered , password entry is requested*/

			PW_Result = passwordEntry();
    114e:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <passwordEntry>
    1152:	80 93 6b 01 	sts	0x016B, r24

			if (CorrectPW == PW_Result) /*If password matches with EEPROM , proceed*/
    1156:	80 91 6b 01 	lds	r24, 0x016B
    115a:	82 30       	cpi	r24, 0x02	; 2
    115c:	09 f0       	breq	.+2      	; 0x1160 <main+0x61a>
    115e:	91 c0       	rjmp	.+290    	; 0x1282 <main+0x73c>
			{

				passwordState(&PW_Result); /*To reset wrong password counter*/
    1160:	8b e6       	ldi	r24, 0x6B	; 107
    1162:	91 e0       	ldi	r25, 0x01	; 1
    1164:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <passwordState>

				UART_nextState = OpenningDoor;
    1168:	83 e0       	ldi	r24, 0x03	; 3
    116a:	80 93 6a 01 	sts	0x016A, r24

				/*Send command through UART to Control ECU to start door actions*/
				UART_sendByte(UART_nextState);
    116e:	80 91 6a 01 	lds	r24, 0x016A
    1172:	0e 94 8b 1e 	call	0x3d16	; 0x3d16 <UART_sendByte>
    1176:	80 e0       	ldi	r24, 0x00	; 0
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	a0 ea       	ldi	r26, 0xA0	; 160
    117c:	b1 e4       	ldi	r27, 0x41	; 65
    117e:	89 8f       	std	Y+25, r24	; 0x19
    1180:	9a 8f       	std	Y+26, r25	; 0x1a
    1182:	ab 8f       	std	Y+27, r26	; 0x1b
    1184:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1186:	69 8d       	ldd	r22, Y+25	; 0x19
    1188:	7a 8d       	ldd	r23, Y+26	; 0x1a
    118a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    118c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    118e:	20 e0       	ldi	r18, 0x00	; 0
    1190:	30 e0       	ldi	r19, 0x00	; 0
    1192:	4a ef       	ldi	r20, 0xFA	; 250
    1194:	54 e4       	ldi	r21, 0x44	; 68
    1196:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    119a:	dc 01       	movw	r26, r24
    119c:	cb 01       	movw	r24, r22
    119e:	8d 8b       	std	Y+21, r24	; 0x15
    11a0:	9e 8b       	std	Y+22, r25	; 0x16
    11a2:	af 8b       	std	Y+23, r26	; 0x17
    11a4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    11a6:	6d 89       	ldd	r22, Y+21	; 0x15
    11a8:	7e 89       	ldd	r23, Y+22	; 0x16
    11aa:	8f 89       	ldd	r24, Y+23	; 0x17
    11ac:	98 8d       	ldd	r25, Y+24	; 0x18
    11ae:	20 e0       	ldi	r18, 0x00	; 0
    11b0:	30 e0       	ldi	r19, 0x00	; 0
    11b2:	40 e8       	ldi	r20, 0x80	; 128
    11b4:	5f e3       	ldi	r21, 0x3F	; 63
    11b6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    11ba:	88 23       	and	r24, r24
    11bc:	2c f4       	brge	.+10     	; 0x11c8 <main+0x682>
		__ticks = 1;
    11be:	81 e0       	ldi	r24, 0x01	; 1
    11c0:	90 e0       	ldi	r25, 0x00	; 0
    11c2:	9c 8b       	std	Y+20, r25	; 0x14
    11c4:	8b 8b       	std	Y+19, r24	; 0x13
    11c6:	3f c0       	rjmp	.+126    	; 0x1246 <main+0x700>
	else if (__tmp > 65535)
    11c8:	6d 89       	ldd	r22, Y+21	; 0x15
    11ca:	7e 89       	ldd	r23, Y+22	; 0x16
    11cc:	8f 89       	ldd	r24, Y+23	; 0x17
    11ce:	98 8d       	ldd	r25, Y+24	; 0x18
    11d0:	20 e0       	ldi	r18, 0x00	; 0
    11d2:	3f ef       	ldi	r19, 0xFF	; 255
    11d4:	4f e7       	ldi	r20, 0x7F	; 127
    11d6:	57 e4       	ldi	r21, 0x47	; 71
    11d8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    11dc:	18 16       	cp	r1, r24
    11de:	4c f5       	brge	.+82     	; 0x1232 <main+0x6ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11e0:	69 8d       	ldd	r22, Y+25	; 0x19
    11e2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    11e4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    11e6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    11e8:	20 e0       	ldi	r18, 0x00	; 0
    11ea:	30 e0       	ldi	r19, 0x00	; 0
    11ec:	40 e2       	ldi	r20, 0x20	; 32
    11ee:	51 e4       	ldi	r21, 0x41	; 65
    11f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11f4:	dc 01       	movw	r26, r24
    11f6:	cb 01       	movw	r24, r22
    11f8:	bc 01       	movw	r22, r24
    11fa:	cd 01       	movw	r24, r26
    11fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1200:	dc 01       	movw	r26, r24
    1202:	cb 01       	movw	r24, r22
    1204:	9c 8b       	std	Y+20, r25	; 0x14
    1206:	8b 8b       	std	Y+19, r24	; 0x13
    1208:	0f c0       	rjmp	.+30     	; 0x1228 <main+0x6e2>
    120a:	88 ec       	ldi	r24, 0xC8	; 200
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	9a 8b       	std	Y+18, r25	; 0x12
    1210:	89 8b       	std	Y+17, r24	; 0x11
    1212:	89 89       	ldd	r24, Y+17	; 0x11
    1214:	9a 89       	ldd	r25, Y+18	; 0x12
    1216:	01 97       	sbiw	r24, 0x01	; 1
    1218:	f1 f7       	brne	.-4      	; 0x1216 <main+0x6d0>
    121a:	9a 8b       	std	Y+18, r25	; 0x12
    121c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    121e:	8b 89       	ldd	r24, Y+19	; 0x13
    1220:	9c 89       	ldd	r25, Y+20	; 0x14
    1222:	01 97       	sbiw	r24, 0x01	; 1
    1224:	9c 8b       	std	Y+20, r25	; 0x14
    1226:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1228:	8b 89       	ldd	r24, Y+19	; 0x13
    122a:	9c 89       	ldd	r25, Y+20	; 0x14
    122c:	00 97       	sbiw	r24, 0x00	; 0
    122e:	69 f7       	brne	.-38     	; 0x120a <main+0x6c4>
    1230:	14 c0       	rjmp	.+40     	; 0x125a <main+0x714>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1232:	6d 89       	ldd	r22, Y+21	; 0x15
    1234:	7e 89       	ldd	r23, Y+22	; 0x16
    1236:	8f 89       	ldd	r24, Y+23	; 0x17
    1238:	98 8d       	ldd	r25, Y+24	; 0x18
    123a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    123e:	dc 01       	movw	r26, r24
    1240:	cb 01       	movw	r24, r22
    1242:	9c 8b       	std	Y+20, r25	; 0x14
    1244:	8b 8b       	std	Y+19, r24	; 0x13
    1246:	8b 89       	ldd	r24, Y+19	; 0x13
    1248:	9c 89       	ldd	r25, Y+20	; 0x14
    124a:	98 8b       	std	Y+16, r25	; 0x10
    124c:	8f 87       	std	Y+15, r24	; 0x0f
    124e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1250:	98 89       	ldd	r25, Y+16	; 0x10
    1252:	01 97       	sbiw	r24, 0x01	; 1
    1254:	f1 f7       	brne	.-4      	; 0x1252 <main+0x70c>
    1256:	98 8b       	std	Y+16, r25	; 0x10
    1258:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(20); /*Allow time for transmission*/

				/*Synchronization*/
				/*If a feedback is received from Control ECU ,
				 * initiate TIMER1 counter and start displaying status*/
				if(OpenningDoor == UART_recieveByte())
    125a:	0e 94 7c 1e 	call	0x3cf8	; 0x3cf8 <UART_recieveByte>
    125e:	83 30       	cpi	r24, 0x03	; 3
    1260:	09 f0       	breq	.+2      	; 0x1264 <main+0x71e>
    1262:	bd ce       	rjmp	.-646    	; 0xfde <main+0x498>
				{
					LCD_cleanScreen();
    1264:	0e 94 c2 1c 	call	0x3984	; 0x3984 <LCD_cleanScreen>

					/*Set the function to be called by TIMER 1 ISR*/
					Timer1_setCallBack(&displayDoorStatus);
    1268:	8a e1       	ldi	r24, 0x1A	; 26
    126a:	91 e1       	ldi	r25, 0x11	; 17
    126c:	0e 94 76 1d 	call	0x3aec	; 0x3aec <Timer1_setCallBack>

					/*Initiate TIMER with the required configuration*/
					Timer1_init(&s_Timer1Config);
    1270:	ce 01       	movw	r24, r28
    1272:	84 5a       	subi	r24, 0xA4	; 164
    1274:	9f 4f       	sbci	r25, 0xFF	; 255
    1276:	0e 94 ef 1c 	call	0x39de	; 0x39de <Timer1_init>

					/*Send the application to empty loop until the operation is complete*/
					APP_nextState = EmptyLoop;
    127a:	84 e0       	ldi	r24, 0x04	; 4
    127c:	80 93 70 01 	sts	0x0170, r24
    1280:	ae ce       	rjmp	.-676    	; 0xfde <main+0x498>


			}
			/*If password doesn't match with EEPROM ,
			 * allow user to try again if possible (check passwordState)*/
			else if(IncorrectPW == PW_Result)
    1282:	80 91 6b 01 	lds	r24, 0x016B
    1286:	81 30       	cpi	r24, 0x01	; 1
    1288:	09 f0       	breq	.+2      	; 0x128c <main+0x746>
    128a:	a9 ce       	rjmp	.-686    	; 0xfde <main+0x498>
			{
				passwordState(&PW_Result);
    128c:	8b e6       	ldi	r24, 0x6B	; 107
    128e:	91 e0       	ldi	r25, 0x01	; 1
    1290:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <passwordState>
    1294:	a4 ce       	rjmp	.-696    	; 0xfde <main+0x498>

			break;

		case ChangePW : /*Password changing is triggered , password entry is requested*/

			PW_Result = passwordEntry();
    1296:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <passwordEntry>
    129a:	80 93 6b 01 	sts	0x016B, r24

			if (CorrectPW == PW_Result) /*If password matches with EEPROM , proceed*/
    129e:	80 91 6b 01 	lds	r24, 0x016B
    12a2:	82 30       	cpi	r24, 0x02	; 2
    12a4:	09 f0       	breq	.+2      	; 0x12a8 <main+0x762>
    12a6:	8d c0       	rjmp	.+282    	; 0x13c2 <main+0x87c>
			{
				passwordState(&PW_Result); /*To reset wrong password counter*/
    12a8:	8b e6       	ldi	r24, 0x6B	; 107
    12aa:	91 e0       	ldi	r25, 0x01	; 1
    12ac:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <passwordState>

				LCD_cleanScreen();
    12b0:	0e 94 c2 1c 	call	0x3984	; 0x3984 <LCD_cleanScreen>
				LCD_displayStringRowColumn(0,2,"Choose New");
    12b4:	27 e9       	ldi	r18, 0x97	; 151
    12b6:	30 e0       	ldi	r19, 0x00	; 0
    12b8:	80 e0       	ldi	r24, 0x00	; 0
    12ba:	62 e0       	ldi	r22, 0x02	; 2
    12bc:	a9 01       	movw	r20, r18
    12be:	0e 94 a9 1c 	call	0x3952	; 0x3952 <LCD_displayStringRowColumn>
				LCD_displayStringRowColumn(1,3,"Password");
    12c2:	22 ea       	ldi	r18, 0xA2	; 162
    12c4:	30 e0       	ldi	r19, 0x00	; 0
    12c6:	81 e0       	ldi	r24, 0x01	; 1
    12c8:	63 e0       	ldi	r22, 0x03	; 3
    12ca:	a9 01       	movw	r20, r18
    12cc:	0e 94 a9 1c 	call	0x3952	; 0x3952 <LCD_displayStringRowColumn>
    12d0:	80 e0       	ldi	r24, 0x00	; 0
    12d2:	90 e0       	ldi	r25, 0x00	; 0
    12d4:	aa e7       	ldi	r26, 0x7A	; 122
    12d6:	b4 e4       	ldi	r27, 0x44	; 68
    12d8:	8b 87       	std	Y+11, r24	; 0x0b
    12da:	9c 87       	std	Y+12, r25	; 0x0c
    12dc:	ad 87       	std	Y+13, r26	; 0x0d
    12de:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    12e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    12e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    12e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    12e8:	20 e0       	ldi	r18, 0x00	; 0
    12ea:	30 e0       	ldi	r19, 0x00	; 0
    12ec:	4a ef       	ldi	r20, 0xFA	; 250
    12ee:	54 e4       	ldi	r21, 0x44	; 68
    12f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12f4:	dc 01       	movw	r26, r24
    12f6:	cb 01       	movw	r24, r22
    12f8:	8f 83       	std	Y+7, r24	; 0x07
    12fa:	98 87       	std	Y+8, r25	; 0x08
    12fc:	a9 87       	std	Y+9, r26	; 0x09
    12fe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1300:	6f 81       	ldd	r22, Y+7	; 0x07
    1302:	78 85       	ldd	r23, Y+8	; 0x08
    1304:	89 85       	ldd	r24, Y+9	; 0x09
    1306:	9a 85       	ldd	r25, Y+10	; 0x0a
    1308:	20 e0       	ldi	r18, 0x00	; 0
    130a:	30 e0       	ldi	r19, 0x00	; 0
    130c:	40 e8       	ldi	r20, 0x80	; 128
    130e:	5f e3       	ldi	r21, 0x3F	; 63
    1310:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1314:	88 23       	and	r24, r24
    1316:	2c f4       	brge	.+10     	; 0x1322 <main+0x7dc>
		__ticks = 1;
    1318:	81 e0       	ldi	r24, 0x01	; 1
    131a:	90 e0       	ldi	r25, 0x00	; 0
    131c:	9e 83       	std	Y+6, r25	; 0x06
    131e:	8d 83       	std	Y+5, r24	; 0x05
    1320:	3f c0       	rjmp	.+126    	; 0x13a0 <main+0x85a>
	else if (__tmp > 65535)
    1322:	6f 81       	ldd	r22, Y+7	; 0x07
    1324:	78 85       	ldd	r23, Y+8	; 0x08
    1326:	89 85       	ldd	r24, Y+9	; 0x09
    1328:	9a 85       	ldd	r25, Y+10	; 0x0a
    132a:	20 e0       	ldi	r18, 0x00	; 0
    132c:	3f ef       	ldi	r19, 0xFF	; 255
    132e:	4f e7       	ldi	r20, 0x7F	; 127
    1330:	57 e4       	ldi	r21, 0x47	; 71
    1332:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1336:	18 16       	cp	r1, r24
    1338:	4c f5       	brge	.+82     	; 0x138c <main+0x846>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    133a:	6b 85       	ldd	r22, Y+11	; 0x0b
    133c:	7c 85       	ldd	r23, Y+12	; 0x0c
    133e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1340:	9e 85       	ldd	r25, Y+14	; 0x0e
    1342:	20 e0       	ldi	r18, 0x00	; 0
    1344:	30 e0       	ldi	r19, 0x00	; 0
    1346:	40 e2       	ldi	r20, 0x20	; 32
    1348:	51 e4       	ldi	r21, 0x41	; 65
    134a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    134e:	dc 01       	movw	r26, r24
    1350:	cb 01       	movw	r24, r22
    1352:	bc 01       	movw	r22, r24
    1354:	cd 01       	movw	r24, r26
    1356:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    135a:	dc 01       	movw	r26, r24
    135c:	cb 01       	movw	r24, r22
    135e:	9e 83       	std	Y+6, r25	; 0x06
    1360:	8d 83       	std	Y+5, r24	; 0x05
    1362:	0f c0       	rjmp	.+30     	; 0x1382 <main+0x83c>
    1364:	88 ec       	ldi	r24, 0xC8	; 200
    1366:	90 e0       	ldi	r25, 0x00	; 0
    1368:	9c 83       	std	Y+4, r25	; 0x04
    136a:	8b 83       	std	Y+3, r24	; 0x03
    136c:	8b 81       	ldd	r24, Y+3	; 0x03
    136e:	9c 81       	ldd	r25, Y+4	; 0x04
    1370:	01 97       	sbiw	r24, 0x01	; 1
    1372:	f1 f7       	brne	.-4      	; 0x1370 <main+0x82a>
    1374:	9c 83       	std	Y+4, r25	; 0x04
    1376:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1378:	8d 81       	ldd	r24, Y+5	; 0x05
    137a:	9e 81       	ldd	r25, Y+6	; 0x06
    137c:	01 97       	sbiw	r24, 0x01	; 1
    137e:	9e 83       	std	Y+6, r25	; 0x06
    1380:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1382:	8d 81       	ldd	r24, Y+5	; 0x05
    1384:	9e 81       	ldd	r25, Y+6	; 0x06
    1386:	00 97       	sbiw	r24, 0x00	; 0
    1388:	69 f7       	brne	.-38     	; 0x1364 <main+0x81e>
    138a:	14 c0       	rjmp	.+40     	; 0x13b4 <main+0x86e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    138c:	6f 81       	ldd	r22, Y+7	; 0x07
    138e:	78 85       	ldd	r23, Y+8	; 0x08
    1390:	89 85       	ldd	r24, Y+9	; 0x09
    1392:	9a 85       	ldd	r25, Y+10	; 0x0a
    1394:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1398:	dc 01       	movw	r26, r24
    139a:	cb 01       	movw	r24, r22
    139c:	9e 83       	std	Y+6, r25	; 0x06
    139e:	8d 83       	std	Y+5, r24	; 0x05
    13a0:	8d 81       	ldd	r24, Y+5	; 0x05
    13a2:	9e 81       	ldd	r25, Y+6	; 0x06
    13a4:	9a 83       	std	Y+2, r25	; 0x02
    13a6:	89 83       	std	Y+1, r24	; 0x01
    13a8:	89 81       	ldd	r24, Y+1	; 0x01
    13aa:	9a 81       	ldd	r25, Y+2	; 0x02
    13ac:	01 97       	sbiw	r24, 0x01	; 1
    13ae:	f1 f7       	brne	.-4      	; 0x13ac <main+0x866>
    13b0:	9a 83       	std	Y+2, r25	; 0x02
    13b2:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(1000); /*Display message for 1 second*/
				LCD_cleanScreen();
    13b4:	0e 94 c2 1c 	call	0x3984	; 0x3984 <LCD_cleanScreen>

				APP_nextState = setPassword(); /*Set the new password*/
    13b8:	0e 94 9b 0a 	call	0x1536	; 0x1536 <setPassword>
    13bc:	80 93 70 01 	sts	0x0170, r24
    13c0:	0e ce       	rjmp	.-996    	; 0xfde <main+0x498>
			}
			/*If password doesn't match with EEPROM ,
			 * allow user to try again if possible (check passwordState)*/
			else if(IncorrectPW == PW_Result)
    13c2:	80 91 6b 01 	lds	r24, 0x016B
    13c6:	81 30       	cpi	r24, 0x01	; 1
    13c8:	09 f0       	breq	.+2      	; 0x13cc <main+0x886>
    13ca:	09 ce       	rjmp	.-1006   	; 0xfde <main+0x498>
			{
				passwordState(&PW_Result);
    13cc:	8b e6       	ldi	r24, 0x6B	; 107
    13ce:	91 e0       	ldi	r25, 0x01	; 1
    13d0:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <passwordState>
    13d4:	04 ce       	rjmp	.-1016   	; 0xfde <main+0x498>

000013d6 <mainMenu>:
/********************************************************************************
 *                              Functions Definitions                           *
 ********************************************************************************/

void mainMenu(void)
{
    13d6:	df 93       	push	r29
    13d8:	cf 93       	push	r28
    13da:	cd b7       	in	r28, 0x3d	; 61
    13dc:	de b7       	in	r29, 0x3e	; 62
    13de:	2f 97       	sbiw	r28, 0x0f	; 15
    13e0:	0f b6       	in	r0, 0x3f	; 63
    13e2:	f8 94       	cli
    13e4:	de bf       	out	0x3e, r29	; 62
    13e6:	0f be       	out	0x3f, r0	; 63
    13e8:	cd bf       	out	0x3d, r28	; 61
	uint8 menuSelect = 0; /*Local variable for menu selection*/
    13ea:	1f 86       	std	Y+15, r1	; 0x0f


	LCD_cleanScreen();
    13ec:	0e 94 c2 1c 	call	0x3984	; 0x3984 <LCD_cleanScreen>

	LCD_displayStringRowColumn(0,0,"+ : Open Door");
    13f0:	2b ea       	ldi	r18, 0xAB	; 171
    13f2:	30 e0       	ldi	r19, 0x00	; 0
    13f4:	80 e0       	ldi	r24, 0x00	; 0
    13f6:	60 e0       	ldi	r22, 0x00	; 0
    13f8:	a9 01       	movw	r20, r18
    13fa:	0e 94 a9 1c 	call	0x3952	; 0x3952 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1,0,"- : Change Pass");
    13fe:	29 eb       	ldi	r18, 0xB9	; 185
    1400:	30 e0       	ldi	r19, 0x00	; 0
    1402:	81 e0       	ldi	r24, 0x01	; 1
    1404:	60 e0       	ldi	r22, 0x00	; 0
    1406:	a9 01       	movw	r20, r18
    1408:	0e 94 a9 1c 	call	0x3952	; 0x3952 <LCD_displayStringRowColumn>
    140c:	75 c0       	rjmp	.+234    	; 0x14f8 <mainMenu+0x122>

	/*Polling on menu options INSIDE the function*/
	while(menuSelect != '+' && menuSelect != '-' )
	{
		menuSelect = KEYPAD_getPressedKey(); /*Get input from user through Keypad*/
    140e:	0e 94 91 22 	call	0x4522	; 0x4522 <KEYPAD_getPressedKey>
    1412:	8f 87       	std	Y+15, r24	; 0x0f
    1414:	80 e0       	ldi	r24, 0x00	; 0
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	a8 ec       	ldi	r26, 0xC8	; 200
    141a:	b2 e4       	ldi	r27, 0x42	; 66
    141c:	8b 87       	std	Y+11, r24	; 0x0b
    141e:	9c 87       	std	Y+12, r25	; 0x0c
    1420:	ad 87       	std	Y+13, r26	; 0x0d
    1422:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1424:	6b 85       	ldd	r22, Y+11	; 0x0b
    1426:	7c 85       	ldd	r23, Y+12	; 0x0c
    1428:	8d 85       	ldd	r24, Y+13	; 0x0d
    142a:	9e 85       	ldd	r25, Y+14	; 0x0e
    142c:	20 e0       	ldi	r18, 0x00	; 0
    142e:	30 e0       	ldi	r19, 0x00	; 0
    1430:	4a ef       	ldi	r20, 0xFA	; 250
    1432:	54 e4       	ldi	r21, 0x44	; 68
    1434:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1438:	dc 01       	movw	r26, r24
    143a:	cb 01       	movw	r24, r22
    143c:	8f 83       	std	Y+7, r24	; 0x07
    143e:	98 87       	std	Y+8, r25	; 0x08
    1440:	a9 87       	std	Y+9, r26	; 0x09
    1442:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1444:	6f 81       	ldd	r22, Y+7	; 0x07
    1446:	78 85       	ldd	r23, Y+8	; 0x08
    1448:	89 85       	ldd	r24, Y+9	; 0x09
    144a:	9a 85       	ldd	r25, Y+10	; 0x0a
    144c:	20 e0       	ldi	r18, 0x00	; 0
    144e:	30 e0       	ldi	r19, 0x00	; 0
    1450:	40 e8       	ldi	r20, 0x80	; 128
    1452:	5f e3       	ldi	r21, 0x3F	; 63
    1454:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1458:	88 23       	and	r24, r24
    145a:	2c f4       	brge	.+10     	; 0x1466 <mainMenu+0x90>
		__ticks = 1;
    145c:	81 e0       	ldi	r24, 0x01	; 1
    145e:	90 e0       	ldi	r25, 0x00	; 0
    1460:	9e 83       	std	Y+6, r25	; 0x06
    1462:	8d 83       	std	Y+5, r24	; 0x05
    1464:	3f c0       	rjmp	.+126    	; 0x14e4 <mainMenu+0x10e>
	else if (__tmp > 65535)
    1466:	6f 81       	ldd	r22, Y+7	; 0x07
    1468:	78 85       	ldd	r23, Y+8	; 0x08
    146a:	89 85       	ldd	r24, Y+9	; 0x09
    146c:	9a 85       	ldd	r25, Y+10	; 0x0a
    146e:	20 e0       	ldi	r18, 0x00	; 0
    1470:	3f ef       	ldi	r19, 0xFF	; 255
    1472:	4f e7       	ldi	r20, 0x7F	; 127
    1474:	57 e4       	ldi	r21, 0x47	; 71
    1476:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    147a:	18 16       	cp	r1, r24
    147c:	4c f5       	brge	.+82     	; 0x14d0 <mainMenu+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    147e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1480:	7c 85       	ldd	r23, Y+12	; 0x0c
    1482:	8d 85       	ldd	r24, Y+13	; 0x0d
    1484:	9e 85       	ldd	r25, Y+14	; 0x0e
    1486:	20 e0       	ldi	r18, 0x00	; 0
    1488:	30 e0       	ldi	r19, 0x00	; 0
    148a:	40 e2       	ldi	r20, 0x20	; 32
    148c:	51 e4       	ldi	r21, 0x41	; 65
    148e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1492:	dc 01       	movw	r26, r24
    1494:	cb 01       	movw	r24, r22
    1496:	bc 01       	movw	r22, r24
    1498:	cd 01       	movw	r24, r26
    149a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    149e:	dc 01       	movw	r26, r24
    14a0:	cb 01       	movw	r24, r22
    14a2:	9e 83       	std	Y+6, r25	; 0x06
    14a4:	8d 83       	std	Y+5, r24	; 0x05
    14a6:	0f c0       	rjmp	.+30     	; 0x14c6 <mainMenu+0xf0>
    14a8:	88 ec       	ldi	r24, 0xC8	; 200
    14aa:	90 e0       	ldi	r25, 0x00	; 0
    14ac:	9c 83       	std	Y+4, r25	; 0x04
    14ae:	8b 83       	std	Y+3, r24	; 0x03
    14b0:	8b 81       	ldd	r24, Y+3	; 0x03
    14b2:	9c 81       	ldd	r25, Y+4	; 0x04
    14b4:	01 97       	sbiw	r24, 0x01	; 1
    14b6:	f1 f7       	brne	.-4      	; 0x14b4 <mainMenu+0xde>
    14b8:	9c 83       	std	Y+4, r25	; 0x04
    14ba:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14bc:	8d 81       	ldd	r24, Y+5	; 0x05
    14be:	9e 81       	ldd	r25, Y+6	; 0x06
    14c0:	01 97       	sbiw	r24, 0x01	; 1
    14c2:	9e 83       	std	Y+6, r25	; 0x06
    14c4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14c6:	8d 81       	ldd	r24, Y+5	; 0x05
    14c8:	9e 81       	ldd	r25, Y+6	; 0x06
    14ca:	00 97       	sbiw	r24, 0x00	; 0
    14cc:	69 f7       	brne	.-38     	; 0x14a8 <mainMenu+0xd2>
    14ce:	14 c0       	rjmp	.+40     	; 0x14f8 <mainMenu+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14d0:	6f 81       	ldd	r22, Y+7	; 0x07
    14d2:	78 85       	ldd	r23, Y+8	; 0x08
    14d4:	89 85       	ldd	r24, Y+9	; 0x09
    14d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    14d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14dc:	dc 01       	movw	r26, r24
    14de:	cb 01       	movw	r24, r22
    14e0:	9e 83       	std	Y+6, r25	; 0x06
    14e2:	8d 83       	std	Y+5, r24	; 0x05
    14e4:	8d 81       	ldd	r24, Y+5	; 0x05
    14e6:	9e 81       	ldd	r25, Y+6	; 0x06
    14e8:	9a 83       	std	Y+2, r25	; 0x02
    14ea:	89 83       	std	Y+1, r24	; 0x01
    14ec:	89 81       	ldd	r24, Y+1	; 0x01
    14ee:	9a 81       	ldd	r25, Y+2	; 0x02
    14f0:	01 97       	sbiw	r24, 0x01	; 1
    14f2:	f1 f7       	brne	.-4      	; 0x14f0 <mainMenu+0x11a>
    14f4:	9a 83       	std	Y+2, r25	; 0x02
    14f6:	89 83       	std	Y+1, r24	; 0x01

	LCD_displayStringRowColumn(0,0,"+ : Open Door");
	LCD_displayStringRowColumn(1,0,"- : Change Pass");

	/*Polling on menu options INSIDE the function*/
	while(menuSelect != '+' && menuSelect != '-' )
    14f8:	8f 85       	ldd	r24, Y+15	; 0x0f
    14fa:	8b 32       	cpi	r24, 0x2B	; 43
    14fc:	21 f0       	breq	.+8      	; 0x1506 <mainMenu+0x130>
    14fe:	8f 85       	ldd	r24, Y+15	; 0x0f
    1500:	8d 32       	cpi	r24, 0x2D	; 45
    1502:	09 f0       	breq	.+2      	; 0x1506 <mainMenu+0x130>
    1504:	84 cf       	rjmp	.-248    	; 0x140e <mainMenu+0x38>

		/*De-bounce delay */
		_delay_ms(100);
	}

	if('+' == menuSelect) /*Case '+' is chosen , trigger door opening state*/
    1506:	8f 85       	ldd	r24, Y+15	; 0x0f
    1508:	8b 32       	cpi	r24, 0x2B	; 43
    150a:	29 f4       	brne	.+10     	; 0x1516 <mainMenu+0x140>
	{
		menuSelect = 0; /*Reset selection*/
    150c:	1f 86       	std	Y+15, r1	; 0x0f
		APP_nextState = OpenDoor ;
    150e:	82 e0       	ldi	r24, 0x02	; 2
    1510:	80 93 70 01 	sts	0x0170, r24
    1514:	07 c0       	rjmp	.+14     	; 0x1524 <mainMenu+0x14e>
	}

	else if ('-' == menuSelect) /*Case '-' is chosen , trigger password changing state*/
    1516:	8f 85       	ldd	r24, Y+15	; 0x0f
    1518:	8d 32       	cpi	r24, 0x2D	; 45
    151a:	21 f4       	brne	.+8      	; 0x1524 <mainMenu+0x14e>
	{
		menuSelect = 0; /*Reset selection*/
    151c:	1f 86       	std	Y+15, r1	; 0x0f
		APP_nextState = ChangePW ;
    151e:	83 e0       	ldi	r24, 0x03	; 3
    1520:	80 93 70 01 	sts	0x0170, r24
	}

}
    1524:	2f 96       	adiw	r28, 0x0f	; 15
    1526:	0f b6       	in	r0, 0x3f	; 63
    1528:	f8 94       	cli
    152a:	de bf       	out	0x3e, r29	; 62
    152c:	0f be       	out	0x3f, r0	; 63
    152e:	cd bf       	out	0x3d, r28	; 61
    1530:	cf 91       	pop	r28
    1532:	df 91       	pop	r29
    1534:	08 95       	ret

00001536 <setPassword>:

uint8 setPassword(void)
{
    1536:	df 93       	push	r29
    1538:	cf 93       	push	r28
    153a:	cd b7       	in	r28, 0x3d	; 61
    153c:	de b7       	in	r29, 0x3e	; 62
    153e:	c5 54       	subi	r28, 0x45	; 69
    1540:	d0 40       	sbci	r29, 0x00	; 0
    1542:	0f b6       	in	r0, 0x3f	; 63
    1544:	f8 94       	cli
    1546:	de bf       	out	0x3e, r29	; 62
    1548:	0f be       	out	0x3f, r0	; 63
    154a:	cd bf       	out	0x3d, r28	; 61
	/*2 Local array of password size to get the password digit in it*/
	uint8 firstPasswordEntry[PASSWORD_LENGTH] = {0} ;
    154c:	85 e0       	ldi	r24, 0x05	; 5
    154e:	fe 01       	movw	r30, r28
    1550:	fc 96       	adiw	r30, 0x3c	; 60
    1552:	df 01       	movw	r26, r30
    1554:	98 2f       	mov	r25, r24
    1556:	1d 92       	st	X+, r1
    1558:	9a 95       	dec	r25
    155a:	e9 f7       	brne	.-6      	; 0x1556 <setPassword+0x20>
	uint8 secondPasswordEntry[PASSWORD_LENGTH] = {0} ;
    155c:	85 e0       	ldi	r24, 0x05	; 5
    155e:	fe 01       	movw	r30, r28
    1560:	ef 5b       	subi	r30, 0xBF	; 191
    1562:	ff 4f       	sbci	r31, 0xFF	; 255
    1564:	df 01       	movw	r26, r30
    1566:	98 2f       	mov	r25, r24
    1568:	1d 92       	st	X+, r1
    156a:	9a 95       	dec	r25
    156c:	e9 f7       	brne	.-6      	; 0x1568 <setPassword+0x32>
	/*data type is signed to fit the condition check if decrement was applied ZERO*/
	sint8 passwordDigitCounter ;

	Application_State matchingResult ;

	LCD_displayString("Enter password :");
    156e:	89 ec       	ldi	r24, 0xC9	; 201
    1570:	90 e0       	ldi	r25, 0x00	; 0
    1572:	0e 94 3b 1c 	call	0x3876	; 0x3876 <LCD_displayString>

	LCD_moveCursor(1,0);
    1576:	81 e0       	ldi	r24, 0x01	; 1
    1578:	60 e0       	ldi	r22, 0x00	; 0
    157a:	0e 94 67 1c 	call	0x38ce	; 0x38ce <LCD_moveCursor>

	/*First Password Entry*/
	/*Loop on the array to collect the required the password digits*/
	for(passwordDigitCounter = 0 ; passwordDigitCounter < PASSWORD_LENGTH ; passwordDigitCounter++)
    157e:	1a ae       	std	Y+58, r1	; 0x3a
    1580:	15 c1       	rjmp	.+554    	; 0x17ac <setPassword+0x276>
	{
		/*Place the received input into another variable first for two reasons :
		 * 1 - To check if the received input is a numeric digit
		 * 2 - To allow a de-bounce delay  */
		digitCheck = KEYPAD_getPressedKey() ;
    1582:	0e 94 91 22 	call	0x4522	; 0x4522 <KEYPAD_getPressedKey>
    1586:	8b af       	std	Y+59, r24	; 0x3b
    1588:	80 e0       	ldi	r24, 0x00	; 0
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	a6 e9       	ldi	r26, 0x96	; 150
    158e:	b3 e4       	ldi	r27, 0x43	; 67
    1590:	8d ab       	std	Y+53, r24	; 0x35
    1592:	9e ab       	std	Y+54, r25	; 0x36
    1594:	af ab       	std	Y+55, r26	; 0x37
    1596:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1598:	6d a9       	ldd	r22, Y+53	; 0x35
    159a:	7e a9       	ldd	r23, Y+54	; 0x36
    159c:	8f a9       	ldd	r24, Y+55	; 0x37
    159e:	98 ad       	ldd	r25, Y+56	; 0x38
    15a0:	20 e0       	ldi	r18, 0x00	; 0
    15a2:	30 e0       	ldi	r19, 0x00	; 0
    15a4:	4a ef       	ldi	r20, 0xFA	; 250
    15a6:	54 e4       	ldi	r21, 0x44	; 68
    15a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15ac:	dc 01       	movw	r26, r24
    15ae:	cb 01       	movw	r24, r22
    15b0:	89 ab       	std	Y+49, r24	; 0x31
    15b2:	9a ab       	std	Y+50, r25	; 0x32
    15b4:	ab ab       	std	Y+51, r26	; 0x33
    15b6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    15b8:	69 a9       	ldd	r22, Y+49	; 0x31
    15ba:	7a a9       	ldd	r23, Y+50	; 0x32
    15bc:	8b a9       	ldd	r24, Y+51	; 0x33
    15be:	9c a9       	ldd	r25, Y+52	; 0x34
    15c0:	20 e0       	ldi	r18, 0x00	; 0
    15c2:	30 e0       	ldi	r19, 0x00	; 0
    15c4:	40 e8       	ldi	r20, 0x80	; 128
    15c6:	5f e3       	ldi	r21, 0x3F	; 63
    15c8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15cc:	88 23       	and	r24, r24
    15ce:	2c f4       	brge	.+10     	; 0x15da <setPassword+0xa4>
		__ticks = 1;
    15d0:	81 e0       	ldi	r24, 0x01	; 1
    15d2:	90 e0       	ldi	r25, 0x00	; 0
    15d4:	98 ab       	std	Y+48, r25	; 0x30
    15d6:	8f a7       	std	Y+47, r24	; 0x2f
    15d8:	3f c0       	rjmp	.+126    	; 0x1658 <setPassword+0x122>
	else if (__tmp > 65535)
    15da:	69 a9       	ldd	r22, Y+49	; 0x31
    15dc:	7a a9       	ldd	r23, Y+50	; 0x32
    15de:	8b a9       	ldd	r24, Y+51	; 0x33
    15e0:	9c a9       	ldd	r25, Y+52	; 0x34
    15e2:	20 e0       	ldi	r18, 0x00	; 0
    15e4:	3f ef       	ldi	r19, 0xFF	; 255
    15e6:	4f e7       	ldi	r20, 0x7F	; 127
    15e8:	57 e4       	ldi	r21, 0x47	; 71
    15ea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15ee:	18 16       	cp	r1, r24
    15f0:	4c f5       	brge	.+82     	; 0x1644 <setPassword+0x10e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15f2:	6d a9       	ldd	r22, Y+53	; 0x35
    15f4:	7e a9       	ldd	r23, Y+54	; 0x36
    15f6:	8f a9       	ldd	r24, Y+55	; 0x37
    15f8:	98 ad       	ldd	r25, Y+56	; 0x38
    15fa:	20 e0       	ldi	r18, 0x00	; 0
    15fc:	30 e0       	ldi	r19, 0x00	; 0
    15fe:	40 e2       	ldi	r20, 0x20	; 32
    1600:	51 e4       	ldi	r21, 0x41	; 65
    1602:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1606:	dc 01       	movw	r26, r24
    1608:	cb 01       	movw	r24, r22
    160a:	bc 01       	movw	r22, r24
    160c:	cd 01       	movw	r24, r26
    160e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1612:	dc 01       	movw	r26, r24
    1614:	cb 01       	movw	r24, r22
    1616:	98 ab       	std	Y+48, r25	; 0x30
    1618:	8f a7       	std	Y+47, r24	; 0x2f
    161a:	0f c0       	rjmp	.+30     	; 0x163a <setPassword+0x104>
    161c:	88 ec       	ldi	r24, 0xC8	; 200
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	9e a7       	std	Y+46, r25	; 0x2e
    1622:	8d a7       	std	Y+45, r24	; 0x2d
    1624:	8d a5       	ldd	r24, Y+45	; 0x2d
    1626:	9e a5       	ldd	r25, Y+46	; 0x2e
    1628:	01 97       	sbiw	r24, 0x01	; 1
    162a:	f1 f7       	brne	.-4      	; 0x1628 <setPassword+0xf2>
    162c:	9e a7       	std	Y+46, r25	; 0x2e
    162e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1630:	8f a5       	ldd	r24, Y+47	; 0x2f
    1632:	98 a9       	ldd	r25, Y+48	; 0x30
    1634:	01 97       	sbiw	r24, 0x01	; 1
    1636:	98 ab       	std	Y+48, r25	; 0x30
    1638:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    163a:	8f a5       	ldd	r24, Y+47	; 0x2f
    163c:	98 a9       	ldd	r25, Y+48	; 0x30
    163e:	00 97       	sbiw	r24, 0x00	; 0
    1640:	69 f7       	brne	.-38     	; 0x161c <setPassword+0xe6>
    1642:	14 c0       	rjmp	.+40     	; 0x166c <setPassword+0x136>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1644:	69 a9       	ldd	r22, Y+49	; 0x31
    1646:	7a a9       	ldd	r23, Y+50	; 0x32
    1648:	8b a9       	ldd	r24, Y+51	; 0x33
    164a:	9c a9       	ldd	r25, Y+52	; 0x34
    164c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1650:	dc 01       	movw	r26, r24
    1652:	cb 01       	movw	r24, r22
    1654:	98 ab       	std	Y+48, r25	; 0x30
    1656:	8f a7       	std	Y+47, r24	; 0x2f
    1658:	8f a5       	ldd	r24, Y+47	; 0x2f
    165a:	98 a9       	ldd	r25, Y+48	; 0x30
    165c:	9c a7       	std	Y+44, r25	; 0x2c
    165e:	8b a7       	std	Y+43, r24	; 0x2b
    1660:	8b a5       	ldd	r24, Y+43	; 0x2b
    1662:	9c a5       	ldd	r25, Y+44	; 0x2c
    1664:	01 97       	sbiw	r24, 0x01	; 1
    1666:	f1 f7       	brne	.-4      	; 0x1664 <setPassword+0x12e>
    1668:	9c a7       	std	Y+44, r25	; 0x2c
    166a:	8b a7       	std	Y+43, r24	; 0x2b

		/*De-Bounce delay*/
		_delay_ms(300);

		/*check if input is numeric digit*/
		if(digitCheck>=0 && digitCheck<=9)
    166c:	8b ad       	ldd	r24, Y+59	; 0x3b
    166e:	8a 30       	cpi	r24, 0x0A	; 10
    1670:	08 f0       	brcs	.+2      	; 0x1674 <setPassword+0x13e>
    1672:	96 c0       	rjmp	.+300    	; 0x17a0 <setPassword+0x26a>
		{
			/*Place the final value inside the relative array position*/
			firstPasswordEntry[passwordDigitCounter] = digitCheck;
    1674:	8a ad       	ldd	r24, Y+58	; 0x3a
    1676:	28 2f       	mov	r18, r24
    1678:	33 27       	eor	r19, r19
    167a:	27 fd       	sbrc	r18, 7
    167c:	30 95       	com	r19
    167e:	ce 01       	movw	r24, r28
    1680:	cc 96       	adiw	r24, 0x3c	; 60
    1682:	fc 01       	movw	r30, r24
    1684:	e2 0f       	add	r30, r18
    1686:	f3 1f       	adc	r31, r19
    1688:	8b ad       	ldd	r24, Y+59	; 0x3b
    168a:	80 83       	st	Z, r24

			/*The following steps will print the the number entered and will
			 * be replaced shortly on LCD display with '*' character*/
			LCD_intgerToString(firstPasswordEntry[passwordDigitCounter]);
    168c:	8a ad       	ldd	r24, Y+58	; 0x3a
    168e:	28 2f       	mov	r18, r24
    1690:	33 27       	eor	r19, r19
    1692:	27 fd       	sbrc	r18, 7
    1694:	30 95       	com	r19
    1696:	ce 01       	movw	r24, r28
    1698:	cc 96       	adiw	r24, 0x3c	; 60
    169a:	fc 01       	movw	r30, r24
    169c:	e2 0f       	add	r30, r18
    169e:	f3 1f       	adc	r31, r19
    16a0:	80 81       	ld	r24, Z
    16a2:	88 2f       	mov	r24, r24
    16a4:	90 e0       	ldi	r25, 0x00	; 0
    16a6:	0e 94 cc 1c 	call	0x3998	; 0x3998 <LCD_intgerToString>
    16aa:	80 e0       	ldi	r24, 0x00	; 0
    16ac:	90 e0       	ldi	r25, 0x00	; 0
    16ae:	a8 e4       	ldi	r26, 0x48	; 72
    16b0:	b3 e4       	ldi	r27, 0x43	; 67
    16b2:	8f a3       	std	Y+39, r24	; 0x27
    16b4:	98 a7       	std	Y+40, r25	; 0x28
    16b6:	a9 a7       	std	Y+41, r26	; 0x29
    16b8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16ba:	6f a1       	ldd	r22, Y+39	; 0x27
    16bc:	78 a5       	ldd	r23, Y+40	; 0x28
    16be:	89 a5       	ldd	r24, Y+41	; 0x29
    16c0:	9a a5       	ldd	r25, Y+42	; 0x2a
    16c2:	20 e0       	ldi	r18, 0x00	; 0
    16c4:	30 e0       	ldi	r19, 0x00	; 0
    16c6:	4a ef       	ldi	r20, 0xFA	; 250
    16c8:	54 e4       	ldi	r21, 0x44	; 68
    16ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16ce:	dc 01       	movw	r26, r24
    16d0:	cb 01       	movw	r24, r22
    16d2:	8b a3       	std	Y+35, r24	; 0x23
    16d4:	9c a3       	std	Y+36, r25	; 0x24
    16d6:	ad a3       	std	Y+37, r26	; 0x25
    16d8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    16da:	6b a1       	ldd	r22, Y+35	; 0x23
    16dc:	7c a1       	ldd	r23, Y+36	; 0x24
    16de:	8d a1       	ldd	r24, Y+37	; 0x25
    16e0:	9e a1       	ldd	r25, Y+38	; 0x26
    16e2:	20 e0       	ldi	r18, 0x00	; 0
    16e4:	30 e0       	ldi	r19, 0x00	; 0
    16e6:	40 e8       	ldi	r20, 0x80	; 128
    16e8:	5f e3       	ldi	r21, 0x3F	; 63
    16ea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16ee:	88 23       	and	r24, r24
    16f0:	2c f4       	brge	.+10     	; 0x16fc <setPassword+0x1c6>
		__ticks = 1;
    16f2:	81 e0       	ldi	r24, 0x01	; 1
    16f4:	90 e0       	ldi	r25, 0x00	; 0
    16f6:	9a a3       	std	Y+34, r25	; 0x22
    16f8:	89 a3       	std	Y+33, r24	; 0x21
    16fa:	3f c0       	rjmp	.+126    	; 0x177a <setPassword+0x244>
	else if (__tmp > 65535)
    16fc:	6b a1       	ldd	r22, Y+35	; 0x23
    16fe:	7c a1       	ldd	r23, Y+36	; 0x24
    1700:	8d a1       	ldd	r24, Y+37	; 0x25
    1702:	9e a1       	ldd	r25, Y+38	; 0x26
    1704:	20 e0       	ldi	r18, 0x00	; 0
    1706:	3f ef       	ldi	r19, 0xFF	; 255
    1708:	4f e7       	ldi	r20, 0x7F	; 127
    170a:	57 e4       	ldi	r21, 0x47	; 71
    170c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1710:	18 16       	cp	r1, r24
    1712:	4c f5       	brge	.+82     	; 0x1766 <setPassword+0x230>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1714:	6f a1       	ldd	r22, Y+39	; 0x27
    1716:	78 a5       	ldd	r23, Y+40	; 0x28
    1718:	89 a5       	ldd	r24, Y+41	; 0x29
    171a:	9a a5       	ldd	r25, Y+42	; 0x2a
    171c:	20 e0       	ldi	r18, 0x00	; 0
    171e:	30 e0       	ldi	r19, 0x00	; 0
    1720:	40 e2       	ldi	r20, 0x20	; 32
    1722:	51 e4       	ldi	r21, 0x41	; 65
    1724:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1728:	dc 01       	movw	r26, r24
    172a:	cb 01       	movw	r24, r22
    172c:	bc 01       	movw	r22, r24
    172e:	cd 01       	movw	r24, r26
    1730:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1734:	dc 01       	movw	r26, r24
    1736:	cb 01       	movw	r24, r22
    1738:	9a a3       	std	Y+34, r25	; 0x22
    173a:	89 a3       	std	Y+33, r24	; 0x21
    173c:	0f c0       	rjmp	.+30     	; 0x175c <setPassword+0x226>
    173e:	88 ec       	ldi	r24, 0xC8	; 200
    1740:	90 e0       	ldi	r25, 0x00	; 0
    1742:	98 a3       	std	Y+32, r25	; 0x20
    1744:	8f 8f       	std	Y+31, r24	; 0x1f
    1746:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1748:	98 a1       	ldd	r25, Y+32	; 0x20
    174a:	01 97       	sbiw	r24, 0x01	; 1
    174c:	f1 f7       	brne	.-4      	; 0x174a <setPassword+0x214>
    174e:	98 a3       	std	Y+32, r25	; 0x20
    1750:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1752:	89 a1       	ldd	r24, Y+33	; 0x21
    1754:	9a a1       	ldd	r25, Y+34	; 0x22
    1756:	01 97       	sbiw	r24, 0x01	; 1
    1758:	9a a3       	std	Y+34, r25	; 0x22
    175a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    175c:	89 a1       	ldd	r24, Y+33	; 0x21
    175e:	9a a1       	ldd	r25, Y+34	; 0x22
    1760:	00 97       	sbiw	r24, 0x00	; 0
    1762:	69 f7       	brne	.-38     	; 0x173e <setPassword+0x208>
    1764:	14 c0       	rjmp	.+40     	; 0x178e <setPassword+0x258>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1766:	6b a1       	ldd	r22, Y+35	; 0x23
    1768:	7c a1       	ldd	r23, Y+36	; 0x24
    176a:	8d a1       	ldd	r24, Y+37	; 0x25
    176c:	9e a1       	ldd	r25, Y+38	; 0x26
    176e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1772:	dc 01       	movw	r26, r24
    1774:	cb 01       	movw	r24, r22
    1776:	9a a3       	std	Y+34, r25	; 0x22
    1778:	89 a3       	std	Y+33, r24	; 0x21
    177a:	89 a1       	ldd	r24, Y+33	; 0x21
    177c:	9a a1       	ldd	r25, Y+34	; 0x22
    177e:	9e 8f       	std	Y+30, r25	; 0x1e
    1780:	8d 8f       	std	Y+29, r24	; 0x1d
    1782:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1784:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1786:	01 97       	sbiw	r24, 0x01	; 1
    1788:	f1 f7       	brne	.-4      	; 0x1786 <setPassword+0x250>
    178a:	9e 8f       	std	Y+30, r25	; 0x1e
    178c:	8d 8f       	std	Y+29, r24	; 0x1d

			_delay_ms(200);

			LCD_moveCursor(1,passwordDigitCounter);
    178e:	9a ad       	ldd	r25, Y+58	; 0x3a
    1790:	81 e0       	ldi	r24, 0x01	; 1
    1792:	69 2f       	mov	r22, r25
    1794:	0e 94 67 1c 	call	0x38ce	; 0x38ce <LCD_moveCursor>

			LCD_displayCharacter('*');
    1798:	8a e2       	ldi	r24, 0x2A	; 42
    179a:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <LCD_displayCharacter>
    179e:	03 c0       	rjmp	.+6      	; 0x17a6 <setPassword+0x270>
		}
		else
		{
			/*If the variable wasn't numeric , repeat the iteration once again*/
			passwordDigitCounter--;
    17a0:	8a ad       	ldd	r24, Y+58	; 0x3a
    17a2:	81 50       	subi	r24, 0x01	; 1
    17a4:	8a af       	std	Y+58, r24	; 0x3a

	LCD_moveCursor(1,0);

	/*First Password Entry*/
	/*Loop on the array to collect the required the password digits*/
	for(passwordDigitCounter = 0 ; passwordDigitCounter < PASSWORD_LENGTH ; passwordDigitCounter++)
    17a6:	8a ad       	ldd	r24, Y+58	; 0x3a
    17a8:	8f 5f       	subi	r24, 0xFF	; 255
    17aa:	8a af       	std	Y+58, r24	; 0x3a
    17ac:	8a ad       	ldd	r24, Y+58	; 0x3a
    17ae:	85 30       	cpi	r24, 0x05	; 5
    17b0:	0c f4       	brge	.+2      	; 0x17b4 <setPassword+0x27e>
    17b2:	e7 ce       	rjmp	.-562    	; 0x1582 <setPassword+0x4c>
		}
	}

	/*Once the entry is completed , confirm by
	 * pressing on '=' to proceed to next step*/
	while(KEYPAD_getPressedKey() != '=');
    17b4:	0e 94 91 22 	call	0x4522	; 0x4522 <KEYPAD_getPressedKey>
    17b8:	8d 33       	cpi	r24, 0x3D	; 61
    17ba:	e1 f7       	brne	.-8      	; 0x17b4 <setPassword+0x27e>

	LCD_cleanScreen();
    17bc:	0e 94 c2 1c 	call	0x3984	; 0x3984 <LCD_cleanScreen>

	LCD_displayString("Re-Enter the ");
    17c0:	8a ed       	ldi	r24, 0xDA	; 218
    17c2:	90 e0       	ldi	r25, 0x00	; 0
    17c4:	0e 94 3b 1c 	call	0x3876	; 0x3876 <LCD_displayString>

	LCD_displayStringRowColumn(1,0,"same pass: ");
    17c8:	28 ee       	ldi	r18, 0xE8	; 232
    17ca:	30 e0       	ldi	r19, 0x00	; 0
    17cc:	81 e0       	ldi	r24, 0x01	; 1
    17ce:	60 e0       	ldi	r22, 0x00	; 0
    17d0:	a9 01       	movw	r20, r18
    17d2:	0e 94 a9 1c 	call	0x3952	; 0x3952 <LCD_displayStringRowColumn>

	LCD_moveCursor(1,11);
    17d6:	81 e0       	ldi	r24, 0x01	; 1
    17d8:	6b e0       	ldi	r22, 0x0B	; 11
    17da:	0e 94 67 1c 	call	0x38ce	; 0x38ce <LCD_moveCursor>

	/*Second Password Entry*/
	/*Loop on the array to collect the required the password digits*/
	for(passwordDigitCounter = 0 ; passwordDigitCounter < PASSWORD_LENGTH ; passwordDigitCounter++)
    17de:	1a ae       	std	Y+58, r1	; 0x3a
    17e0:	19 c1       	rjmp	.+562    	; 0x1a14 <setPassword+0x4de>
	{
		/*Place the received input into another variable first for two reasons :
		 * 1 - To check if the received input is a numeric digit
		 * 2 - To allow a de-bounce delay  */
		digitCheck = KEYPAD_getPressedKey() ;
    17e2:	0e 94 91 22 	call	0x4522	; 0x4522 <KEYPAD_getPressedKey>
    17e6:	8b af       	std	Y+59, r24	; 0x3b
    17e8:	80 e0       	ldi	r24, 0x00	; 0
    17ea:	90 e0       	ldi	r25, 0x00	; 0
    17ec:	a6 e9       	ldi	r26, 0x96	; 150
    17ee:	b3 e4       	ldi	r27, 0x43	; 67
    17f0:	89 8f       	std	Y+25, r24	; 0x19
    17f2:	9a 8f       	std	Y+26, r25	; 0x1a
    17f4:	ab 8f       	std	Y+27, r26	; 0x1b
    17f6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17f8:	69 8d       	ldd	r22, Y+25	; 0x19
    17fa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    17fc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    17fe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1800:	20 e0       	ldi	r18, 0x00	; 0
    1802:	30 e0       	ldi	r19, 0x00	; 0
    1804:	4a ef       	ldi	r20, 0xFA	; 250
    1806:	54 e4       	ldi	r21, 0x44	; 68
    1808:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    180c:	dc 01       	movw	r26, r24
    180e:	cb 01       	movw	r24, r22
    1810:	8d 8b       	std	Y+21, r24	; 0x15
    1812:	9e 8b       	std	Y+22, r25	; 0x16
    1814:	af 8b       	std	Y+23, r26	; 0x17
    1816:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1818:	6d 89       	ldd	r22, Y+21	; 0x15
    181a:	7e 89       	ldd	r23, Y+22	; 0x16
    181c:	8f 89       	ldd	r24, Y+23	; 0x17
    181e:	98 8d       	ldd	r25, Y+24	; 0x18
    1820:	20 e0       	ldi	r18, 0x00	; 0
    1822:	30 e0       	ldi	r19, 0x00	; 0
    1824:	40 e8       	ldi	r20, 0x80	; 128
    1826:	5f e3       	ldi	r21, 0x3F	; 63
    1828:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    182c:	88 23       	and	r24, r24
    182e:	2c f4       	brge	.+10     	; 0x183a <setPassword+0x304>
		__ticks = 1;
    1830:	81 e0       	ldi	r24, 0x01	; 1
    1832:	90 e0       	ldi	r25, 0x00	; 0
    1834:	9c 8b       	std	Y+20, r25	; 0x14
    1836:	8b 8b       	std	Y+19, r24	; 0x13
    1838:	3f c0       	rjmp	.+126    	; 0x18b8 <setPassword+0x382>
	else if (__tmp > 65535)
    183a:	6d 89       	ldd	r22, Y+21	; 0x15
    183c:	7e 89       	ldd	r23, Y+22	; 0x16
    183e:	8f 89       	ldd	r24, Y+23	; 0x17
    1840:	98 8d       	ldd	r25, Y+24	; 0x18
    1842:	20 e0       	ldi	r18, 0x00	; 0
    1844:	3f ef       	ldi	r19, 0xFF	; 255
    1846:	4f e7       	ldi	r20, 0x7F	; 127
    1848:	57 e4       	ldi	r21, 0x47	; 71
    184a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    184e:	18 16       	cp	r1, r24
    1850:	4c f5       	brge	.+82     	; 0x18a4 <setPassword+0x36e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1852:	69 8d       	ldd	r22, Y+25	; 0x19
    1854:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1856:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1858:	9c 8d       	ldd	r25, Y+28	; 0x1c
    185a:	20 e0       	ldi	r18, 0x00	; 0
    185c:	30 e0       	ldi	r19, 0x00	; 0
    185e:	40 e2       	ldi	r20, 0x20	; 32
    1860:	51 e4       	ldi	r21, 0x41	; 65
    1862:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1866:	dc 01       	movw	r26, r24
    1868:	cb 01       	movw	r24, r22
    186a:	bc 01       	movw	r22, r24
    186c:	cd 01       	movw	r24, r26
    186e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1872:	dc 01       	movw	r26, r24
    1874:	cb 01       	movw	r24, r22
    1876:	9c 8b       	std	Y+20, r25	; 0x14
    1878:	8b 8b       	std	Y+19, r24	; 0x13
    187a:	0f c0       	rjmp	.+30     	; 0x189a <setPassword+0x364>
    187c:	88 ec       	ldi	r24, 0xC8	; 200
    187e:	90 e0       	ldi	r25, 0x00	; 0
    1880:	9a 8b       	std	Y+18, r25	; 0x12
    1882:	89 8b       	std	Y+17, r24	; 0x11
    1884:	89 89       	ldd	r24, Y+17	; 0x11
    1886:	9a 89       	ldd	r25, Y+18	; 0x12
    1888:	01 97       	sbiw	r24, 0x01	; 1
    188a:	f1 f7       	brne	.-4      	; 0x1888 <setPassword+0x352>
    188c:	9a 8b       	std	Y+18, r25	; 0x12
    188e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1890:	8b 89       	ldd	r24, Y+19	; 0x13
    1892:	9c 89       	ldd	r25, Y+20	; 0x14
    1894:	01 97       	sbiw	r24, 0x01	; 1
    1896:	9c 8b       	std	Y+20, r25	; 0x14
    1898:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    189a:	8b 89       	ldd	r24, Y+19	; 0x13
    189c:	9c 89       	ldd	r25, Y+20	; 0x14
    189e:	00 97       	sbiw	r24, 0x00	; 0
    18a0:	69 f7       	brne	.-38     	; 0x187c <setPassword+0x346>
    18a2:	14 c0       	rjmp	.+40     	; 0x18cc <setPassword+0x396>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18a4:	6d 89       	ldd	r22, Y+21	; 0x15
    18a6:	7e 89       	ldd	r23, Y+22	; 0x16
    18a8:	8f 89       	ldd	r24, Y+23	; 0x17
    18aa:	98 8d       	ldd	r25, Y+24	; 0x18
    18ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18b0:	dc 01       	movw	r26, r24
    18b2:	cb 01       	movw	r24, r22
    18b4:	9c 8b       	std	Y+20, r25	; 0x14
    18b6:	8b 8b       	std	Y+19, r24	; 0x13
    18b8:	8b 89       	ldd	r24, Y+19	; 0x13
    18ba:	9c 89       	ldd	r25, Y+20	; 0x14
    18bc:	98 8b       	std	Y+16, r25	; 0x10
    18be:	8f 87       	std	Y+15, r24	; 0x0f
    18c0:	8f 85       	ldd	r24, Y+15	; 0x0f
    18c2:	98 89       	ldd	r25, Y+16	; 0x10
    18c4:	01 97       	sbiw	r24, 0x01	; 1
    18c6:	f1 f7       	brne	.-4      	; 0x18c4 <setPassword+0x38e>
    18c8:	98 8b       	std	Y+16, r25	; 0x10
    18ca:	8f 87       	std	Y+15, r24	; 0x0f

		/*De-Bounce delay*/
		_delay_ms(300);

		/*check if input is numeric digit*/
		if(digitCheck>=0 && digitCheck<=9)
    18cc:	8b ad       	ldd	r24, Y+59	; 0x3b
    18ce:	8a 30       	cpi	r24, 0x0A	; 10
    18d0:	08 f0       	brcs	.+2      	; 0x18d4 <setPassword+0x39e>
    18d2:	9a c0       	rjmp	.+308    	; 0x1a08 <setPassword+0x4d2>
		{
			/*Place the final value inside the relative array position*/
			secondPasswordEntry[passwordDigitCounter] = digitCheck;
    18d4:	8a ad       	ldd	r24, Y+58	; 0x3a
    18d6:	28 2f       	mov	r18, r24
    18d8:	33 27       	eor	r19, r19
    18da:	27 fd       	sbrc	r18, 7
    18dc:	30 95       	com	r19
    18de:	ce 01       	movw	r24, r28
    18e0:	8f 5b       	subi	r24, 0xBF	; 191
    18e2:	9f 4f       	sbci	r25, 0xFF	; 255
    18e4:	fc 01       	movw	r30, r24
    18e6:	e2 0f       	add	r30, r18
    18e8:	f3 1f       	adc	r31, r19
    18ea:	8b ad       	ldd	r24, Y+59	; 0x3b
    18ec:	80 83       	st	Z, r24

			/*The following steps will print the the number entered and will
			 * be replaced shortly on LCD display with '*' character*/
			LCD_intgerToString(secondPasswordEntry[passwordDigitCounter]);
    18ee:	8a ad       	ldd	r24, Y+58	; 0x3a
    18f0:	28 2f       	mov	r18, r24
    18f2:	33 27       	eor	r19, r19
    18f4:	27 fd       	sbrc	r18, 7
    18f6:	30 95       	com	r19
    18f8:	ce 01       	movw	r24, r28
    18fa:	8f 5b       	subi	r24, 0xBF	; 191
    18fc:	9f 4f       	sbci	r25, 0xFF	; 255
    18fe:	fc 01       	movw	r30, r24
    1900:	e2 0f       	add	r30, r18
    1902:	f3 1f       	adc	r31, r19
    1904:	80 81       	ld	r24, Z
    1906:	88 2f       	mov	r24, r24
    1908:	90 e0       	ldi	r25, 0x00	; 0
    190a:	0e 94 cc 1c 	call	0x3998	; 0x3998 <LCD_intgerToString>
    190e:	80 e0       	ldi	r24, 0x00	; 0
    1910:	90 e0       	ldi	r25, 0x00	; 0
    1912:	a8 e4       	ldi	r26, 0x48	; 72
    1914:	b3 e4       	ldi	r27, 0x43	; 67
    1916:	8b 87       	std	Y+11, r24	; 0x0b
    1918:	9c 87       	std	Y+12, r25	; 0x0c
    191a:	ad 87       	std	Y+13, r26	; 0x0d
    191c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    191e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1920:	7c 85       	ldd	r23, Y+12	; 0x0c
    1922:	8d 85       	ldd	r24, Y+13	; 0x0d
    1924:	9e 85       	ldd	r25, Y+14	; 0x0e
    1926:	20 e0       	ldi	r18, 0x00	; 0
    1928:	30 e0       	ldi	r19, 0x00	; 0
    192a:	4a ef       	ldi	r20, 0xFA	; 250
    192c:	54 e4       	ldi	r21, 0x44	; 68
    192e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1932:	dc 01       	movw	r26, r24
    1934:	cb 01       	movw	r24, r22
    1936:	8f 83       	std	Y+7, r24	; 0x07
    1938:	98 87       	std	Y+8, r25	; 0x08
    193a:	a9 87       	std	Y+9, r26	; 0x09
    193c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    193e:	6f 81       	ldd	r22, Y+7	; 0x07
    1940:	78 85       	ldd	r23, Y+8	; 0x08
    1942:	89 85       	ldd	r24, Y+9	; 0x09
    1944:	9a 85       	ldd	r25, Y+10	; 0x0a
    1946:	20 e0       	ldi	r18, 0x00	; 0
    1948:	30 e0       	ldi	r19, 0x00	; 0
    194a:	40 e8       	ldi	r20, 0x80	; 128
    194c:	5f e3       	ldi	r21, 0x3F	; 63
    194e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1952:	88 23       	and	r24, r24
    1954:	2c f4       	brge	.+10     	; 0x1960 <setPassword+0x42a>
		__ticks = 1;
    1956:	81 e0       	ldi	r24, 0x01	; 1
    1958:	90 e0       	ldi	r25, 0x00	; 0
    195a:	9e 83       	std	Y+6, r25	; 0x06
    195c:	8d 83       	std	Y+5, r24	; 0x05
    195e:	3f c0       	rjmp	.+126    	; 0x19de <setPassword+0x4a8>
	else if (__tmp > 65535)
    1960:	6f 81       	ldd	r22, Y+7	; 0x07
    1962:	78 85       	ldd	r23, Y+8	; 0x08
    1964:	89 85       	ldd	r24, Y+9	; 0x09
    1966:	9a 85       	ldd	r25, Y+10	; 0x0a
    1968:	20 e0       	ldi	r18, 0x00	; 0
    196a:	3f ef       	ldi	r19, 0xFF	; 255
    196c:	4f e7       	ldi	r20, 0x7F	; 127
    196e:	57 e4       	ldi	r21, 0x47	; 71
    1970:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1974:	18 16       	cp	r1, r24
    1976:	4c f5       	brge	.+82     	; 0x19ca <setPassword+0x494>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1978:	6b 85       	ldd	r22, Y+11	; 0x0b
    197a:	7c 85       	ldd	r23, Y+12	; 0x0c
    197c:	8d 85       	ldd	r24, Y+13	; 0x0d
    197e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1980:	20 e0       	ldi	r18, 0x00	; 0
    1982:	30 e0       	ldi	r19, 0x00	; 0
    1984:	40 e2       	ldi	r20, 0x20	; 32
    1986:	51 e4       	ldi	r21, 0x41	; 65
    1988:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    198c:	dc 01       	movw	r26, r24
    198e:	cb 01       	movw	r24, r22
    1990:	bc 01       	movw	r22, r24
    1992:	cd 01       	movw	r24, r26
    1994:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1998:	dc 01       	movw	r26, r24
    199a:	cb 01       	movw	r24, r22
    199c:	9e 83       	std	Y+6, r25	; 0x06
    199e:	8d 83       	std	Y+5, r24	; 0x05
    19a0:	0f c0       	rjmp	.+30     	; 0x19c0 <setPassword+0x48a>
    19a2:	88 ec       	ldi	r24, 0xC8	; 200
    19a4:	90 e0       	ldi	r25, 0x00	; 0
    19a6:	9c 83       	std	Y+4, r25	; 0x04
    19a8:	8b 83       	std	Y+3, r24	; 0x03
    19aa:	8b 81       	ldd	r24, Y+3	; 0x03
    19ac:	9c 81       	ldd	r25, Y+4	; 0x04
    19ae:	01 97       	sbiw	r24, 0x01	; 1
    19b0:	f1 f7       	brne	.-4      	; 0x19ae <setPassword+0x478>
    19b2:	9c 83       	std	Y+4, r25	; 0x04
    19b4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19b6:	8d 81       	ldd	r24, Y+5	; 0x05
    19b8:	9e 81       	ldd	r25, Y+6	; 0x06
    19ba:	01 97       	sbiw	r24, 0x01	; 1
    19bc:	9e 83       	std	Y+6, r25	; 0x06
    19be:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19c0:	8d 81       	ldd	r24, Y+5	; 0x05
    19c2:	9e 81       	ldd	r25, Y+6	; 0x06
    19c4:	00 97       	sbiw	r24, 0x00	; 0
    19c6:	69 f7       	brne	.-38     	; 0x19a2 <setPassword+0x46c>
    19c8:	14 c0       	rjmp	.+40     	; 0x19f2 <setPassword+0x4bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19ca:	6f 81       	ldd	r22, Y+7	; 0x07
    19cc:	78 85       	ldd	r23, Y+8	; 0x08
    19ce:	89 85       	ldd	r24, Y+9	; 0x09
    19d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    19d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19d6:	dc 01       	movw	r26, r24
    19d8:	cb 01       	movw	r24, r22
    19da:	9e 83       	std	Y+6, r25	; 0x06
    19dc:	8d 83       	std	Y+5, r24	; 0x05
    19de:	8d 81       	ldd	r24, Y+5	; 0x05
    19e0:	9e 81       	ldd	r25, Y+6	; 0x06
    19e2:	9a 83       	std	Y+2, r25	; 0x02
    19e4:	89 83       	std	Y+1, r24	; 0x01
    19e6:	89 81       	ldd	r24, Y+1	; 0x01
    19e8:	9a 81       	ldd	r25, Y+2	; 0x02
    19ea:	01 97       	sbiw	r24, 0x01	; 1
    19ec:	f1 f7       	brne	.-4      	; 0x19ea <setPassword+0x4b4>
    19ee:	9a 83       	std	Y+2, r25	; 0x02
    19f0:	89 83       	std	Y+1, r24	; 0x01

			_delay_ms(200);

			LCD_moveCursor(1,11+passwordDigitCounter);
    19f2:	8a ad       	ldd	r24, Y+58	; 0x3a
    19f4:	98 2f       	mov	r25, r24
    19f6:	95 5f       	subi	r25, 0xF5	; 245
    19f8:	81 e0       	ldi	r24, 0x01	; 1
    19fa:	69 2f       	mov	r22, r25
    19fc:	0e 94 67 1c 	call	0x38ce	; 0x38ce <LCD_moveCursor>

			LCD_displayCharacter('*');
    1a00:	8a e2       	ldi	r24, 0x2A	; 42
    1a02:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <LCD_displayCharacter>
    1a06:	03 c0       	rjmp	.+6      	; 0x1a0e <setPassword+0x4d8>
		}
		else
		{
			/*If the variable wasn't numeric , repeat the iteration once again*/
			passwordDigitCounter--;
    1a08:	8a ad       	ldd	r24, Y+58	; 0x3a
    1a0a:	81 50       	subi	r24, 0x01	; 1
    1a0c:	8a af       	std	Y+58, r24	; 0x3a

	LCD_moveCursor(1,11);

	/*Second Password Entry*/
	/*Loop on the array to collect the required the password digits*/
	for(passwordDigitCounter = 0 ; passwordDigitCounter < PASSWORD_LENGTH ; passwordDigitCounter++)
    1a0e:	8a ad       	ldd	r24, Y+58	; 0x3a
    1a10:	8f 5f       	subi	r24, 0xFF	; 255
    1a12:	8a af       	std	Y+58, r24	; 0x3a
    1a14:	8a ad       	ldd	r24, Y+58	; 0x3a
    1a16:	85 30       	cpi	r24, 0x05	; 5
    1a18:	0c f4       	brge	.+2      	; 0x1a1c <setPassword+0x4e6>
    1a1a:	e3 ce       	rjmp	.-570    	; 0x17e2 <setPassword+0x2ac>
		}
	}

	/*Once the entry is completed , confirm by
	 * pressing on '=' to proceed to next step*/
	while(KEYPAD_getPressedKey() != '=');
    1a1c:	0e 94 91 22 	call	0x4522	; 0x4522 <KEYPAD_getPressedKey>
    1a20:	8d 33       	cpi	r24, 0x3D	; 61
    1a22:	e1 f7       	brne	.-8      	; 0x1a1c <setPassword+0x4e6>

	/*Send the two arrays through to EEPROM via Control ECU */
	matchingResult = isPasswordMatched(firstPasswordEntry,secondPasswordEntry);
    1a24:	ce 01       	movw	r24, r28
    1a26:	cc 96       	adiw	r24, 0x3c	; 60
    1a28:	9e 01       	movw	r18, r28
    1a2a:	2f 5b       	subi	r18, 0xBF	; 191
    1a2c:	3f 4f       	sbci	r19, 0xFF	; 255
    1a2e:	b9 01       	movw	r22, r18
    1a30:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <isPasswordMatched>
    1a34:	89 af       	std	Y+57, r24	; 0x39

	/*Return the matching result confirming whether
	* the password was set or unmatched*/
	return matchingResult ;
    1a36:	89 ad       	ldd	r24, Y+57	; 0x39

}
    1a38:	cb 5b       	subi	r28, 0xBB	; 187
    1a3a:	df 4f       	sbci	r29, 0xFF	; 255
    1a3c:	0f b6       	in	r0, 0x3f	; 63
    1a3e:	f8 94       	cli
    1a40:	de bf       	out	0x3e, r29	; 62
    1a42:	0f be       	out	0x3f, r0	; 63
    1a44:	cd bf       	out	0x3d, r28	; 61
    1a46:	cf 91       	pop	r28
    1a48:	df 91       	pop	r29
    1a4a:	08 95       	ret

00001a4c <isPasswordMatched>:

uint8 isPasswordMatched(const uint8 * a_firstEntry , const uint8 * a_secondEntry)
{
    1a4c:	df 93       	push	r29
    1a4e:	cf 93       	push	r28
    1a50:	cd b7       	in	r28, 0x3d	; 61
    1a52:	de b7       	in	r29, 0x3e	; 62
    1a54:	a0 97       	sbiw	r28, 0x20	; 32
    1a56:	0f b6       	in	r0, 0x3f	; 63
    1a58:	f8 94       	cli
    1a5a:	de bf       	out	0x3e, r29	; 62
    1a5c:	0f be       	out	0x3f, r0	; 63
    1a5e:	cd bf       	out	0x3d, r28	; 61
    1a60:	9e 8f       	std	Y+30, r25	; 0x1e
    1a62:	8d 8f       	std	Y+29, r24	; 0x1d
    1a64:	78 a3       	std	Y+32, r23	; 0x20
    1a66:	6f 8f       	std	Y+31, r22	; 0x1f
	/*next Control ECU state is to set the PW if matched or return unmatched*/
	UART_nextState = SetPW;
    1a68:	81 e0       	ldi	r24, 0x01	; 1
    1a6a:	80 93 6a 01 	sts	0x016A, r24

	/*Send command to Control ECU via UART to go to set password state*/
	UART_sendByte(UART_nextState);
    1a6e:	80 91 6a 01 	lds	r24, 0x016A
    1a72:	0e 94 8b 1e 	call	0x3d16	; 0x3d16 <UART_sendByte>

	/*Send first password Entry*/
	UART_sendData(a_firstEntry,PASSWORD_LENGTH);
    1a76:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a78:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1a7a:	65 e0       	ldi	r22, 0x05	; 5
    1a7c:	0e 94 f9 1e 	call	0x3df2	; 0x3df2 <UART_sendData>
    1a80:	80 e0       	ldi	r24, 0x00	; 0
    1a82:	90 e0       	ldi	r25, 0x00	; 0
    1a84:	a8 ec       	ldi	r26, 0xC8	; 200
    1a86:	b2 e4       	ldi	r27, 0x42	; 66
    1a88:	89 8f       	std	Y+25, r24	; 0x19
    1a8a:	9a 8f       	std	Y+26, r25	; 0x1a
    1a8c:	ab 8f       	std	Y+27, r26	; 0x1b
    1a8e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a90:	69 8d       	ldd	r22, Y+25	; 0x19
    1a92:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a94:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a96:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a98:	20 e0       	ldi	r18, 0x00	; 0
    1a9a:	30 e0       	ldi	r19, 0x00	; 0
    1a9c:	4a ef       	ldi	r20, 0xFA	; 250
    1a9e:	54 e4       	ldi	r21, 0x44	; 68
    1aa0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aa4:	dc 01       	movw	r26, r24
    1aa6:	cb 01       	movw	r24, r22
    1aa8:	8d 8b       	std	Y+21, r24	; 0x15
    1aaa:	9e 8b       	std	Y+22, r25	; 0x16
    1aac:	af 8b       	std	Y+23, r26	; 0x17
    1aae:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1ab0:	6d 89       	ldd	r22, Y+21	; 0x15
    1ab2:	7e 89       	ldd	r23, Y+22	; 0x16
    1ab4:	8f 89       	ldd	r24, Y+23	; 0x17
    1ab6:	98 8d       	ldd	r25, Y+24	; 0x18
    1ab8:	20 e0       	ldi	r18, 0x00	; 0
    1aba:	30 e0       	ldi	r19, 0x00	; 0
    1abc:	40 e8       	ldi	r20, 0x80	; 128
    1abe:	5f e3       	ldi	r21, 0x3F	; 63
    1ac0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ac4:	88 23       	and	r24, r24
    1ac6:	2c f4       	brge	.+10     	; 0x1ad2 <isPasswordMatched+0x86>
		__ticks = 1;
    1ac8:	81 e0       	ldi	r24, 0x01	; 1
    1aca:	90 e0       	ldi	r25, 0x00	; 0
    1acc:	9c 8b       	std	Y+20, r25	; 0x14
    1ace:	8b 8b       	std	Y+19, r24	; 0x13
    1ad0:	3f c0       	rjmp	.+126    	; 0x1b50 <isPasswordMatched+0x104>
	else if (__tmp > 65535)
    1ad2:	6d 89       	ldd	r22, Y+21	; 0x15
    1ad4:	7e 89       	ldd	r23, Y+22	; 0x16
    1ad6:	8f 89       	ldd	r24, Y+23	; 0x17
    1ad8:	98 8d       	ldd	r25, Y+24	; 0x18
    1ada:	20 e0       	ldi	r18, 0x00	; 0
    1adc:	3f ef       	ldi	r19, 0xFF	; 255
    1ade:	4f e7       	ldi	r20, 0x7F	; 127
    1ae0:	57 e4       	ldi	r21, 0x47	; 71
    1ae2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ae6:	18 16       	cp	r1, r24
    1ae8:	4c f5       	brge	.+82     	; 0x1b3c <isPasswordMatched+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1aea:	69 8d       	ldd	r22, Y+25	; 0x19
    1aec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1aee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1af0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1af2:	20 e0       	ldi	r18, 0x00	; 0
    1af4:	30 e0       	ldi	r19, 0x00	; 0
    1af6:	40 e2       	ldi	r20, 0x20	; 32
    1af8:	51 e4       	ldi	r21, 0x41	; 65
    1afa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1afe:	dc 01       	movw	r26, r24
    1b00:	cb 01       	movw	r24, r22
    1b02:	bc 01       	movw	r22, r24
    1b04:	cd 01       	movw	r24, r26
    1b06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b0a:	dc 01       	movw	r26, r24
    1b0c:	cb 01       	movw	r24, r22
    1b0e:	9c 8b       	std	Y+20, r25	; 0x14
    1b10:	8b 8b       	std	Y+19, r24	; 0x13
    1b12:	0f c0       	rjmp	.+30     	; 0x1b32 <isPasswordMatched+0xe6>
    1b14:	88 ec       	ldi	r24, 0xC8	; 200
    1b16:	90 e0       	ldi	r25, 0x00	; 0
    1b18:	9a 8b       	std	Y+18, r25	; 0x12
    1b1a:	89 8b       	std	Y+17, r24	; 0x11
    1b1c:	89 89       	ldd	r24, Y+17	; 0x11
    1b1e:	9a 89       	ldd	r25, Y+18	; 0x12
    1b20:	01 97       	sbiw	r24, 0x01	; 1
    1b22:	f1 f7       	brne	.-4      	; 0x1b20 <isPasswordMatched+0xd4>
    1b24:	9a 8b       	std	Y+18, r25	; 0x12
    1b26:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b28:	8b 89       	ldd	r24, Y+19	; 0x13
    1b2a:	9c 89       	ldd	r25, Y+20	; 0x14
    1b2c:	01 97       	sbiw	r24, 0x01	; 1
    1b2e:	9c 8b       	std	Y+20, r25	; 0x14
    1b30:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b32:	8b 89       	ldd	r24, Y+19	; 0x13
    1b34:	9c 89       	ldd	r25, Y+20	; 0x14
    1b36:	00 97       	sbiw	r24, 0x00	; 0
    1b38:	69 f7       	brne	.-38     	; 0x1b14 <isPasswordMatched+0xc8>
    1b3a:	14 c0       	rjmp	.+40     	; 0x1b64 <isPasswordMatched+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b3c:	6d 89       	ldd	r22, Y+21	; 0x15
    1b3e:	7e 89       	ldd	r23, Y+22	; 0x16
    1b40:	8f 89       	ldd	r24, Y+23	; 0x17
    1b42:	98 8d       	ldd	r25, Y+24	; 0x18
    1b44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b48:	dc 01       	movw	r26, r24
    1b4a:	cb 01       	movw	r24, r22
    1b4c:	9c 8b       	std	Y+20, r25	; 0x14
    1b4e:	8b 8b       	std	Y+19, r24	; 0x13
    1b50:	8b 89       	ldd	r24, Y+19	; 0x13
    1b52:	9c 89       	ldd	r25, Y+20	; 0x14
    1b54:	98 8b       	std	Y+16, r25	; 0x10
    1b56:	8f 87       	std	Y+15, r24	; 0x0f
    1b58:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b5a:	98 89       	ldd	r25, Y+16	; 0x10
    1b5c:	01 97       	sbiw	r24, 0x01	; 1
    1b5e:	f1 f7       	brne	.-4      	; 0x1b5c <isPasswordMatched+0x110>
    1b60:	98 8b       	std	Y+16, r25	; 0x10
    1b62:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(100); /*Allow time for transmission*/

	/*Send second password Entry*/
	UART_sendData(a_secondEntry,PASSWORD_LENGTH);
    1b64:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b66:	98 a1       	ldd	r25, Y+32	; 0x20
    1b68:	65 e0       	ldi	r22, 0x05	; 5
    1b6a:	0e 94 f9 1e 	call	0x3df2	; 0x3df2 <UART_sendData>
    1b6e:	80 e0       	ldi	r24, 0x00	; 0
    1b70:	90 e0       	ldi	r25, 0x00	; 0
    1b72:	a8 ec       	ldi	r26, 0xC8	; 200
    1b74:	b2 e4       	ldi	r27, 0x42	; 66
    1b76:	8b 87       	std	Y+11, r24	; 0x0b
    1b78:	9c 87       	std	Y+12, r25	; 0x0c
    1b7a:	ad 87       	std	Y+13, r26	; 0x0d
    1b7c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b7e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b80:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b82:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b84:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b86:	20 e0       	ldi	r18, 0x00	; 0
    1b88:	30 e0       	ldi	r19, 0x00	; 0
    1b8a:	4a ef       	ldi	r20, 0xFA	; 250
    1b8c:	54 e4       	ldi	r21, 0x44	; 68
    1b8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b92:	dc 01       	movw	r26, r24
    1b94:	cb 01       	movw	r24, r22
    1b96:	8f 83       	std	Y+7, r24	; 0x07
    1b98:	98 87       	std	Y+8, r25	; 0x08
    1b9a:	a9 87       	std	Y+9, r26	; 0x09
    1b9c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b9e:	6f 81       	ldd	r22, Y+7	; 0x07
    1ba0:	78 85       	ldd	r23, Y+8	; 0x08
    1ba2:	89 85       	ldd	r24, Y+9	; 0x09
    1ba4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ba6:	20 e0       	ldi	r18, 0x00	; 0
    1ba8:	30 e0       	ldi	r19, 0x00	; 0
    1baa:	40 e8       	ldi	r20, 0x80	; 128
    1bac:	5f e3       	ldi	r21, 0x3F	; 63
    1bae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bb2:	88 23       	and	r24, r24
    1bb4:	2c f4       	brge	.+10     	; 0x1bc0 <isPasswordMatched+0x174>
		__ticks = 1;
    1bb6:	81 e0       	ldi	r24, 0x01	; 1
    1bb8:	90 e0       	ldi	r25, 0x00	; 0
    1bba:	9e 83       	std	Y+6, r25	; 0x06
    1bbc:	8d 83       	std	Y+5, r24	; 0x05
    1bbe:	3f c0       	rjmp	.+126    	; 0x1c3e <isPasswordMatched+0x1f2>
	else if (__tmp > 65535)
    1bc0:	6f 81       	ldd	r22, Y+7	; 0x07
    1bc2:	78 85       	ldd	r23, Y+8	; 0x08
    1bc4:	89 85       	ldd	r24, Y+9	; 0x09
    1bc6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bc8:	20 e0       	ldi	r18, 0x00	; 0
    1bca:	3f ef       	ldi	r19, 0xFF	; 255
    1bcc:	4f e7       	ldi	r20, 0x7F	; 127
    1bce:	57 e4       	ldi	r21, 0x47	; 71
    1bd0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bd4:	18 16       	cp	r1, r24
    1bd6:	4c f5       	brge	.+82     	; 0x1c2a <isPasswordMatched+0x1de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bd8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bda:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bdc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bde:	9e 85       	ldd	r25, Y+14	; 0x0e
    1be0:	20 e0       	ldi	r18, 0x00	; 0
    1be2:	30 e0       	ldi	r19, 0x00	; 0
    1be4:	40 e2       	ldi	r20, 0x20	; 32
    1be6:	51 e4       	ldi	r21, 0x41	; 65
    1be8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bec:	dc 01       	movw	r26, r24
    1bee:	cb 01       	movw	r24, r22
    1bf0:	bc 01       	movw	r22, r24
    1bf2:	cd 01       	movw	r24, r26
    1bf4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bf8:	dc 01       	movw	r26, r24
    1bfa:	cb 01       	movw	r24, r22
    1bfc:	9e 83       	std	Y+6, r25	; 0x06
    1bfe:	8d 83       	std	Y+5, r24	; 0x05
    1c00:	0f c0       	rjmp	.+30     	; 0x1c20 <isPasswordMatched+0x1d4>
    1c02:	88 ec       	ldi	r24, 0xC8	; 200
    1c04:	90 e0       	ldi	r25, 0x00	; 0
    1c06:	9c 83       	std	Y+4, r25	; 0x04
    1c08:	8b 83       	std	Y+3, r24	; 0x03
    1c0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c0c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c0e:	01 97       	sbiw	r24, 0x01	; 1
    1c10:	f1 f7       	brne	.-4      	; 0x1c0e <isPasswordMatched+0x1c2>
    1c12:	9c 83       	std	Y+4, r25	; 0x04
    1c14:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c16:	8d 81       	ldd	r24, Y+5	; 0x05
    1c18:	9e 81       	ldd	r25, Y+6	; 0x06
    1c1a:	01 97       	sbiw	r24, 0x01	; 1
    1c1c:	9e 83       	std	Y+6, r25	; 0x06
    1c1e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c20:	8d 81       	ldd	r24, Y+5	; 0x05
    1c22:	9e 81       	ldd	r25, Y+6	; 0x06
    1c24:	00 97       	sbiw	r24, 0x00	; 0
    1c26:	69 f7       	brne	.-38     	; 0x1c02 <isPasswordMatched+0x1b6>
    1c28:	14 c0       	rjmp	.+40     	; 0x1c52 <isPasswordMatched+0x206>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c2a:	6f 81       	ldd	r22, Y+7	; 0x07
    1c2c:	78 85       	ldd	r23, Y+8	; 0x08
    1c2e:	89 85       	ldd	r24, Y+9	; 0x09
    1c30:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c36:	dc 01       	movw	r26, r24
    1c38:	cb 01       	movw	r24, r22
    1c3a:	9e 83       	std	Y+6, r25	; 0x06
    1c3c:	8d 83       	std	Y+5, r24	; 0x05
    1c3e:	8d 81       	ldd	r24, Y+5	; 0x05
    1c40:	9e 81       	ldd	r25, Y+6	; 0x06
    1c42:	9a 83       	std	Y+2, r25	; 0x02
    1c44:	89 83       	std	Y+1, r24	; 0x01
    1c46:	89 81       	ldd	r24, Y+1	; 0x01
    1c48:	9a 81       	ldd	r25, Y+2	; 0x02
    1c4a:	01 97       	sbiw	r24, 0x01	; 1
    1c4c:	f1 f7       	brne	.-4      	; 0x1c4a <isPasswordMatched+0x1fe>
    1c4e:	9a 83       	std	Y+2, r25	; 0x02
    1c50:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(100); /*Allow time for transmission*/

	/*Receives either password is matched & set OR need to be entered again*/
	return UART_recieveByte();
    1c52:	0e 94 7c 1e 	call	0x3cf8	; 0x3cf8 <UART_recieveByte>

}
    1c56:	a0 96       	adiw	r28, 0x20	; 32
    1c58:	0f b6       	in	r0, 0x3f	; 63
    1c5a:	f8 94       	cli
    1c5c:	de bf       	out	0x3e, r29	; 62
    1c5e:	0f be       	out	0x3f, r0	; 63
    1c60:	cd bf       	out	0x3d, r28	; 61
    1c62:	cf 91       	pop	r28
    1c64:	df 91       	pop	r29
    1c66:	08 95       	ret

00001c68 <passwordEntry>:

uint8 passwordEntry(void)
{
    1c68:	df 93       	push	r29
    1c6a:	cf 93       	push	r28
    1c6c:	cd b7       	in	r28, 0x3d	; 61
    1c6e:	de b7       	in	r29, 0x3e	; 62
    1c70:	ef 97       	sbiw	r28, 0x3f	; 63
    1c72:	0f b6       	in	r0, 0x3f	; 63
    1c74:	f8 94       	cli
    1c76:	de bf       	out	0x3e, r29	; 62
    1c78:	0f be       	out	0x3f, r0	; 63
    1c7a:	cd bf       	out	0x3d, r28	; 61
	/*Local array of password size to get the password digits in it*/
	uint8 passwordEntryArray[PASSWORD_LENGTH] = {0} ;
    1c7c:	85 e0       	ldi	r24, 0x05	; 5
    1c7e:	fe 01       	movw	r30, r28
    1c80:	fb 96       	adiw	r30, 0x3b	; 59
    1c82:	df 01       	movw	r26, r30
    1c84:	98 2f       	mov	r25, r24
    1c86:	1d 92       	st	X+, r1
    1c88:	9a 95       	dec	r25
    1c8a:	e9 f7       	brne	.-6      	; 0x1c86 <passwordEntry+0x1e>
	/*data type is signed to fit the condition check if decrement was applied ZERO*/
	sint8 passwordDigitCounter ;
	uint8 digitCheck ;

	/*next Control ECU state is to get a password to check if correct or incorrect*/
	UART_nextState = EnterPW;
    1c8c:	82 e0       	ldi	r24, 0x02	; 2
    1c8e:	80 93 6a 01 	sts	0x016A, r24

	LCD_cleanScreen();
    1c92:	0e 94 c2 1c 	call	0x3984	; 0x3984 <LCD_cleanScreen>

	/*Send command to Control ECU via UART to go to enter password state*/
	UART_sendByte(UART_nextState);
    1c96:	80 91 6a 01 	lds	r24, 0x016A
    1c9a:	0e 94 8b 1e 	call	0x3d16	; 0x3d16 <UART_sendByte>
    1c9e:	80 e0       	ldi	r24, 0x00	; 0
    1ca0:	90 e0       	ldi	r25, 0x00	; 0
    1ca2:	a0 e2       	ldi	r26, 0x20	; 32
    1ca4:	b1 e4       	ldi	r27, 0x41	; 65
    1ca6:	8d ab       	std	Y+53, r24	; 0x35
    1ca8:	9e ab       	std	Y+54, r25	; 0x36
    1caa:	af ab       	std	Y+55, r26	; 0x37
    1cac:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cae:	6d a9       	ldd	r22, Y+53	; 0x35
    1cb0:	7e a9       	ldd	r23, Y+54	; 0x36
    1cb2:	8f a9       	ldd	r24, Y+55	; 0x37
    1cb4:	98 ad       	ldd	r25, Y+56	; 0x38
    1cb6:	20 e0       	ldi	r18, 0x00	; 0
    1cb8:	30 e0       	ldi	r19, 0x00	; 0
    1cba:	4a ef       	ldi	r20, 0xFA	; 250
    1cbc:	54 e4       	ldi	r21, 0x44	; 68
    1cbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cc2:	dc 01       	movw	r26, r24
    1cc4:	cb 01       	movw	r24, r22
    1cc6:	89 ab       	std	Y+49, r24	; 0x31
    1cc8:	9a ab       	std	Y+50, r25	; 0x32
    1cca:	ab ab       	std	Y+51, r26	; 0x33
    1ccc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1cce:	69 a9       	ldd	r22, Y+49	; 0x31
    1cd0:	7a a9       	ldd	r23, Y+50	; 0x32
    1cd2:	8b a9       	ldd	r24, Y+51	; 0x33
    1cd4:	9c a9       	ldd	r25, Y+52	; 0x34
    1cd6:	20 e0       	ldi	r18, 0x00	; 0
    1cd8:	30 e0       	ldi	r19, 0x00	; 0
    1cda:	40 e8       	ldi	r20, 0x80	; 128
    1cdc:	5f e3       	ldi	r21, 0x3F	; 63
    1cde:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ce2:	88 23       	and	r24, r24
    1ce4:	2c f4       	brge	.+10     	; 0x1cf0 <passwordEntry+0x88>
		__ticks = 1;
    1ce6:	81 e0       	ldi	r24, 0x01	; 1
    1ce8:	90 e0       	ldi	r25, 0x00	; 0
    1cea:	98 ab       	std	Y+48, r25	; 0x30
    1cec:	8f a7       	std	Y+47, r24	; 0x2f
    1cee:	3f c0       	rjmp	.+126    	; 0x1d6e <passwordEntry+0x106>
	else if (__tmp > 65535)
    1cf0:	69 a9       	ldd	r22, Y+49	; 0x31
    1cf2:	7a a9       	ldd	r23, Y+50	; 0x32
    1cf4:	8b a9       	ldd	r24, Y+51	; 0x33
    1cf6:	9c a9       	ldd	r25, Y+52	; 0x34
    1cf8:	20 e0       	ldi	r18, 0x00	; 0
    1cfa:	3f ef       	ldi	r19, 0xFF	; 255
    1cfc:	4f e7       	ldi	r20, 0x7F	; 127
    1cfe:	57 e4       	ldi	r21, 0x47	; 71
    1d00:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d04:	18 16       	cp	r1, r24
    1d06:	4c f5       	brge	.+82     	; 0x1d5a <passwordEntry+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d08:	6d a9       	ldd	r22, Y+53	; 0x35
    1d0a:	7e a9       	ldd	r23, Y+54	; 0x36
    1d0c:	8f a9       	ldd	r24, Y+55	; 0x37
    1d0e:	98 ad       	ldd	r25, Y+56	; 0x38
    1d10:	20 e0       	ldi	r18, 0x00	; 0
    1d12:	30 e0       	ldi	r19, 0x00	; 0
    1d14:	40 e2       	ldi	r20, 0x20	; 32
    1d16:	51 e4       	ldi	r21, 0x41	; 65
    1d18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d1c:	dc 01       	movw	r26, r24
    1d1e:	cb 01       	movw	r24, r22
    1d20:	bc 01       	movw	r22, r24
    1d22:	cd 01       	movw	r24, r26
    1d24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d28:	dc 01       	movw	r26, r24
    1d2a:	cb 01       	movw	r24, r22
    1d2c:	98 ab       	std	Y+48, r25	; 0x30
    1d2e:	8f a7       	std	Y+47, r24	; 0x2f
    1d30:	0f c0       	rjmp	.+30     	; 0x1d50 <passwordEntry+0xe8>
    1d32:	88 ec       	ldi	r24, 0xC8	; 200
    1d34:	90 e0       	ldi	r25, 0x00	; 0
    1d36:	9e a7       	std	Y+46, r25	; 0x2e
    1d38:	8d a7       	std	Y+45, r24	; 0x2d
    1d3a:	8d a5       	ldd	r24, Y+45	; 0x2d
    1d3c:	9e a5       	ldd	r25, Y+46	; 0x2e
    1d3e:	01 97       	sbiw	r24, 0x01	; 1
    1d40:	f1 f7       	brne	.-4      	; 0x1d3e <passwordEntry+0xd6>
    1d42:	9e a7       	std	Y+46, r25	; 0x2e
    1d44:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d46:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d48:	98 a9       	ldd	r25, Y+48	; 0x30
    1d4a:	01 97       	sbiw	r24, 0x01	; 1
    1d4c:	98 ab       	std	Y+48, r25	; 0x30
    1d4e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d50:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d52:	98 a9       	ldd	r25, Y+48	; 0x30
    1d54:	00 97       	sbiw	r24, 0x00	; 0
    1d56:	69 f7       	brne	.-38     	; 0x1d32 <passwordEntry+0xca>
    1d58:	14 c0       	rjmp	.+40     	; 0x1d82 <passwordEntry+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d5a:	69 a9       	ldd	r22, Y+49	; 0x31
    1d5c:	7a a9       	ldd	r23, Y+50	; 0x32
    1d5e:	8b a9       	ldd	r24, Y+51	; 0x33
    1d60:	9c a9       	ldd	r25, Y+52	; 0x34
    1d62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d66:	dc 01       	movw	r26, r24
    1d68:	cb 01       	movw	r24, r22
    1d6a:	98 ab       	std	Y+48, r25	; 0x30
    1d6c:	8f a7       	std	Y+47, r24	; 0x2f
    1d6e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d70:	98 a9       	ldd	r25, Y+48	; 0x30
    1d72:	9c a7       	std	Y+44, r25	; 0x2c
    1d74:	8b a7       	std	Y+43, r24	; 0x2b
    1d76:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d78:	9c a5       	ldd	r25, Y+44	; 0x2c
    1d7a:	01 97       	sbiw	r24, 0x01	; 1
    1d7c:	f1 f7       	brne	.-4      	; 0x1d7a <passwordEntry+0x112>
    1d7e:	9c a7       	std	Y+44, r25	; 0x2c
    1d80:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(10); /*Allow time for transmission*/

	LCD_displayString("Enter password :");
    1d82:	89 ec       	ldi	r24, 0xC9	; 201
    1d84:	90 e0       	ldi	r25, 0x00	; 0
    1d86:	0e 94 3b 1c 	call	0x3876	; 0x3876 <LCD_displayString>

	LCD_moveCursor(1,0);
    1d8a:	81 e0       	ldi	r24, 0x01	; 1
    1d8c:	60 e0       	ldi	r22, 0x00	; 0
    1d8e:	0e 94 67 1c 	call	0x38ce	; 0x38ce <LCD_moveCursor>

	/*Loop on the array to collect the required the password digits*/
	for(passwordDigitCounter = 0 ; passwordDigitCounter < PASSWORD_LENGTH ; passwordDigitCounter++)
    1d92:	1a ae       	std	Y+58, r1	; 0x3a
    1d94:	15 c1       	rjmp	.+554    	; 0x1fc0 <passwordEntry+0x358>
	{
		/*Place the received input into another variable first for two reasons :
		 * 1 - To check if the received input is a numeric digit
		 * 2 - To allow a de-bounce delay  */
		digitCheck = KEYPAD_getPressedKey() ;
    1d96:	0e 94 91 22 	call	0x4522	; 0x4522 <KEYPAD_getPressedKey>
    1d9a:	89 af       	std	Y+57, r24	; 0x39
    1d9c:	80 e0       	ldi	r24, 0x00	; 0
    1d9e:	90 e0       	ldi	r25, 0x00	; 0
    1da0:	a6 e9       	ldi	r26, 0x96	; 150
    1da2:	b3 e4       	ldi	r27, 0x43	; 67
    1da4:	8f a3       	std	Y+39, r24	; 0x27
    1da6:	98 a7       	std	Y+40, r25	; 0x28
    1da8:	a9 a7       	std	Y+41, r26	; 0x29
    1daa:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dac:	6f a1       	ldd	r22, Y+39	; 0x27
    1dae:	78 a5       	ldd	r23, Y+40	; 0x28
    1db0:	89 a5       	ldd	r24, Y+41	; 0x29
    1db2:	9a a5       	ldd	r25, Y+42	; 0x2a
    1db4:	20 e0       	ldi	r18, 0x00	; 0
    1db6:	30 e0       	ldi	r19, 0x00	; 0
    1db8:	4a ef       	ldi	r20, 0xFA	; 250
    1dba:	54 e4       	ldi	r21, 0x44	; 68
    1dbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dc0:	dc 01       	movw	r26, r24
    1dc2:	cb 01       	movw	r24, r22
    1dc4:	8b a3       	std	Y+35, r24	; 0x23
    1dc6:	9c a3       	std	Y+36, r25	; 0x24
    1dc8:	ad a3       	std	Y+37, r26	; 0x25
    1dca:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1dcc:	6b a1       	ldd	r22, Y+35	; 0x23
    1dce:	7c a1       	ldd	r23, Y+36	; 0x24
    1dd0:	8d a1       	ldd	r24, Y+37	; 0x25
    1dd2:	9e a1       	ldd	r25, Y+38	; 0x26
    1dd4:	20 e0       	ldi	r18, 0x00	; 0
    1dd6:	30 e0       	ldi	r19, 0x00	; 0
    1dd8:	40 e8       	ldi	r20, 0x80	; 128
    1dda:	5f e3       	ldi	r21, 0x3F	; 63
    1ddc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1de0:	88 23       	and	r24, r24
    1de2:	2c f4       	brge	.+10     	; 0x1dee <passwordEntry+0x186>
		__ticks = 1;
    1de4:	81 e0       	ldi	r24, 0x01	; 1
    1de6:	90 e0       	ldi	r25, 0x00	; 0
    1de8:	9a a3       	std	Y+34, r25	; 0x22
    1dea:	89 a3       	std	Y+33, r24	; 0x21
    1dec:	3f c0       	rjmp	.+126    	; 0x1e6c <passwordEntry+0x204>
	else if (__tmp > 65535)
    1dee:	6b a1       	ldd	r22, Y+35	; 0x23
    1df0:	7c a1       	ldd	r23, Y+36	; 0x24
    1df2:	8d a1       	ldd	r24, Y+37	; 0x25
    1df4:	9e a1       	ldd	r25, Y+38	; 0x26
    1df6:	20 e0       	ldi	r18, 0x00	; 0
    1df8:	3f ef       	ldi	r19, 0xFF	; 255
    1dfa:	4f e7       	ldi	r20, 0x7F	; 127
    1dfc:	57 e4       	ldi	r21, 0x47	; 71
    1dfe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e02:	18 16       	cp	r1, r24
    1e04:	4c f5       	brge	.+82     	; 0x1e58 <passwordEntry+0x1f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e06:	6f a1       	ldd	r22, Y+39	; 0x27
    1e08:	78 a5       	ldd	r23, Y+40	; 0x28
    1e0a:	89 a5       	ldd	r24, Y+41	; 0x29
    1e0c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e0e:	20 e0       	ldi	r18, 0x00	; 0
    1e10:	30 e0       	ldi	r19, 0x00	; 0
    1e12:	40 e2       	ldi	r20, 0x20	; 32
    1e14:	51 e4       	ldi	r21, 0x41	; 65
    1e16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e1a:	dc 01       	movw	r26, r24
    1e1c:	cb 01       	movw	r24, r22
    1e1e:	bc 01       	movw	r22, r24
    1e20:	cd 01       	movw	r24, r26
    1e22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e26:	dc 01       	movw	r26, r24
    1e28:	cb 01       	movw	r24, r22
    1e2a:	9a a3       	std	Y+34, r25	; 0x22
    1e2c:	89 a3       	std	Y+33, r24	; 0x21
    1e2e:	0f c0       	rjmp	.+30     	; 0x1e4e <passwordEntry+0x1e6>
    1e30:	88 ec       	ldi	r24, 0xC8	; 200
    1e32:	90 e0       	ldi	r25, 0x00	; 0
    1e34:	98 a3       	std	Y+32, r25	; 0x20
    1e36:	8f 8f       	std	Y+31, r24	; 0x1f
    1e38:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1e3a:	98 a1       	ldd	r25, Y+32	; 0x20
    1e3c:	01 97       	sbiw	r24, 0x01	; 1
    1e3e:	f1 f7       	brne	.-4      	; 0x1e3c <passwordEntry+0x1d4>
    1e40:	98 a3       	std	Y+32, r25	; 0x20
    1e42:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e44:	89 a1       	ldd	r24, Y+33	; 0x21
    1e46:	9a a1       	ldd	r25, Y+34	; 0x22
    1e48:	01 97       	sbiw	r24, 0x01	; 1
    1e4a:	9a a3       	std	Y+34, r25	; 0x22
    1e4c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e4e:	89 a1       	ldd	r24, Y+33	; 0x21
    1e50:	9a a1       	ldd	r25, Y+34	; 0x22
    1e52:	00 97       	sbiw	r24, 0x00	; 0
    1e54:	69 f7       	brne	.-38     	; 0x1e30 <passwordEntry+0x1c8>
    1e56:	14 c0       	rjmp	.+40     	; 0x1e80 <passwordEntry+0x218>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e58:	6b a1       	ldd	r22, Y+35	; 0x23
    1e5a:	7c a1       	ldd	r23, Y+36	; 0x24
    1e5c:	8d a1       	ldd	r24, Y+37	; 0x25
    1e5e:	9e a1       	ldd	r25, Y+38	; 0x26
    1e60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e64:	dc 01       	movw	r26, r24
    1e66:	cb 01       	movw	r24, r22
    1e68:	9a a3       	std	Y+34, r25	; 0x22
    1e6a:	89 a3       	std	Y+33, r24	; 0x21
    1e6c:	89 a1       	ldd	r24, Y+33	; 0x21
    1e6e:	9a a1       	ldd	r25, Y+34	; 0x22
    1e70:	9e 8f       	std	Y+30, r25	; 0x1e
    1e72:	8d 8f       	std	Y+29, r24	; 0x1d
    1e74:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e76:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1e78:	01 97       	sbiw	r24, 0x01	; 1
    1e7a:	f1 f7       	brne	.-4      	; 0x1e78 <passwordEntry+0x210>
    1e7c:	9e 8f       	std	Y+30, r25	; 0x1e
    1e7e:	8d 8f       	std	Y+29, r24	; 0x1d

		/*De-Bounce delay*/
		_delay_ms(300);

		/*check if input is numeric digit*/
		if(digitCheck>=0 && digitCheck<=9)
    1e80:	89 ad       	ldd	r24, Y+57	; 0x39
    1e82:	8a 30       	cpi	r24, 0x0A	; 10
    1e84:	08 f0       	brcs	.+2      	; 0x1e88 <passwordEntry+0x220>
    1e86:	96 c0       	rjmp	.+300    	; 0x1fb4 <passwordEntry+0x34c>
		{
			/*Place the final value inside the relative array position*/
			passwordEntryArray[passwordDigitCounter] = digitCheck ;
    1e88:	8a ad       	ldd	r24, Y+58	; 0x3a
    1e8a:	28 2f       	mov	r18, r24
    1e8c:	33 27       	eor	r19, r19
    1e8e:	27 fd       	sbrc	r18, 7
    1e90:	30 95       	com	r19
    1e92:	ce 01       	movw	r24, r28
    1e94:	cb 96       	adiw	r24, 0x3b	; 59
    1e96:	fc 01       	movw	r30, r24
    1e98:	e2 0f       	add	r30, r18
    1e9a:	f3 1f       	adc	r31, r19
    1e9c:	89 ad       	ldd	r24, Y+57	; 0x39
    1e9e:	80 83       	st	Z, r24

			/*The following steps will print the the number entered and will
			 * be replaced shortly on LCD display with '*' character*/
			LCD_intgerToString(passwordEntryArray[passwordDigitCounter]);
    1ea0:	8a ad       	ldd	r24, Y+58	; 0x3a
    1ea2:	28 2f       	mov	r18, r24
    1ea4:	33 27       	eor	r19, r19
    1ea6:	27 fd       	sbrc	r18, 7
    1ea8:	30 95       	com	r19
    1eaa:	ce 01       	movw	r24, r28
    1eac:	cb 96       	adiw	r24, 0x3b	; 59
    1eae:	fc 01       	movw	r30, r24
    1eb0:	e2 0f       	add	r30, r18
    1eb2:	f3 1f       	adc	r31, r19
    1eb4:	80 81       	ld	r24, Z
    1eb6:	88 2f       	mov	r24, r24
    1eb8:	90 e0       	ldi	r25, 0x00	; 0
    1eba:	0e 94 cc 1c 	call	0x3998	; 0x3998 <LCD_intgerToString>
    1ebe:	80 e0       	ldi	r24, 0x00	; 0
    1ec0:	90 e0       	ldi	r25, 0x00	; 0
    1ec2:	a8 e4       	ldi	r26, 0x48	; 72
    1ec4:	b3 e4       	ldi	r27, 0x43	; 67
    1ec6:	89 8f       	std	Y+25, r24	; 0x19
    1ec8:	9a 8f       	std	Y+26, r25	; 0x1a
    1eca:	ab 8f       	std	Y+27, r26	; 0x1b
    1ecc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ece:	69 8d       	ldd	r22, Y+25	; 0x19
    1ed0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ed2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ed4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ed6:	20 e0       	ldi	r18, 0x00	; 0
    1ed8:	30 e0       	ldi	r19, 0x00	; 0
    1eda:	4a ef       	ldi	r20, 0xFA	; 250
    1edc:	54 e4       	ldi	r21, 0x44	; 68
    1ede:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ee2:	dc 01       	movw	r26, r24
    1ee4:	cb 01       	movw	r24, r22
    1ee6:	8d 8b       	std	Y+21, r24	; 0x15
    1ee8:	9e 8b       	std	Y+22, r25	; 0x16
    1eea:	af 8b       	std	Y+23, r26	; 0x17
    1eec:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1eee:	6d 89       	ldd	r22, Y+21	; 0x15
    1ef0:	7e 89       	ldd	r23, Y+22	; 0x16
    1ef2:	8f 89       	ldd	r24, Y+23	; 0x17
    1ef4:	98 8d       	ldd	r25, Y+24	; 0x18
    1ef6:	20 e0       	ldi	r18, 0x00	; 0
    1ef8:	30 e0       	ldi	r19, 0x00	; 0
    1efa:	40 e8       	ldi	r20, 0x80	; 128
    1efc:	5f e3       	ldi	r21, 0x3F	; 63
    1efe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f02:	88 23       	and	r24, r24
    1f04:	2c f4       	brge	.+10     	; 0x1f10 <passwordEntry+0x2a8>
		__ticks = 1;
    1f06:	81 e0       	ldi	r24, 0x01	; 1
    1f08:	90 e0       	ldi	r25, 0x00	; 0
    1f0a:	9c 8b       	std	Y+20, r25	; 0x14
    1f0c:	8b 8b       	std	Y+19, r24	; 0x13
    1f0e:	3f c0       	rjmp	.+126    	; 0x1f8e <passwordEntry+0x326>
	else if (__tmp > 65535)
    1f10:	6d 89       	ldd	r22, Y+21	; 0x15
    1f12:	7e 89       	ldd	r23, Y+22	; 0x16
    1f14:	8f 89       	ldd	r24, Y+23	; 0x17
    1f16:	98 8d       	ldd	r25, Y+24	; 0x18
    1f18:	20 e0       	ldi	r18, 0x00	; 0
    1f1a:	3f ef       	ldi	r19, 0xFF	; 255
    1f1c:	4f e7       	ldi	r20, 0x7F	; 127
    1f1e:	57 e4       	ldi	r21, 0x47	; 71
    1f20:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f24:	18 16       	cp	r1, r24
    1f26:	4c f5       	brge	.+82     	; 0x1f7a <passwordEntry+0x312>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f28:	69 8d       	ldd	r22, Y+25	; 0x19
    1f2a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f2c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f2e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f30:	20 e0       	ldi	r18, 0x00	; 0
    1f32:	30 e0       	ldi	r19, 0x00	; 0
    1f34:	40 e2       	ldi	r20, 0x20	; 32
    1f36:	51 e4       	ldi	r21, 0x41	; 65
    1f38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f3c:	dc 01       	movw	r26, r24
    1f3e:	cb 01       	movw	r24, r22
    1f40:	bc 01       	movw	r22, r24
    1f42:	cd 01       	movw	r24, r26
    1f44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f48:	dc 01       	movw	r26, r24
    1f4a:	cb 01       	movw	r24, r22
    1f4c:	9c 8b       	std	Y+20, r25	; 0x14
    1f4e:	8b 8b       	std	Y+19, r24	; 0x13
    1f50:	0f c0       	rjmp	.+30     	; 0x1f70 <passwordEntry+0x308>
    1f52:	88 ec       	ldi	r24, 0xC8	; 200
    1f54:	90 e0       	ldi	r25, 0x00	; 0
    1f56:	9a 8b       	std	Y+18, r25	; 0x12
    1f58:	89 8b       	std	Y+17, r24	; 0x11
    1f5a:	89 89       	ldd	r24, Y+17	; 0x11
    1f5c:	9a 89       	ldd	r25, Y+18	; 0x12
    1f5e:	01 97       	sbiw	r24, 0x01	; 1
    1f60:	f1 f7       	brne	.-4      	; 0x1f5e <passwordEntry+0x2f6>
    1f62:	9a 8b       	std	Y+18, r25	; 0x12
    1f64:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f66:	8b 89       	ldd	r24, Y+19	; 0x13
    1f68:	9c 89       	ldd	r25, Y+20	; 0x14
    1f6a:	01 97       	sbiw	r24, 0x01	; 1
    1f6c:	9c 8b       	std	Y+20, r25	; 0x14
    1f6e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f70:	8b 89       	ldd	r24, Y+19	; 0x13
    1f72:	9c 89       	ldd	r25, Y+20	; 0x14
    1f74:	00 97       	sbiw	r24, 0x00	; 0
    1f76:	69 f7       	brne	.-38     	; 0x1f52 <passwordEntry+0x2ea>
    1f78:	14 c0       	rjmp	.+40     	; 0x1fa2 <passwordEntry+0x33a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f7a:	6d 89       	ldd	r22, Y+21	; 0x15
    1f7c:	7e 89       	ldd	r23, Y+22	; 0x16
    1f7e:	8f 89       	ldd	r24, Y+23	; 0x17
    1f80:	98 8d       	ldd	r25, Y+24	; 0x18
    1f82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f86:	dc 01       	movw	r26, r24
    1f88:	cb 01       	movw	r24, r22
    1f8a:	9c 8b       	std	Y+20, r25	; 0x14
    1f8c:	8b 8b       	std	Y+19, r24	; 0x13
    1f8e:	8b 89       	ldd	r24, Y+19	; 0x13
    1f90:	9c 89       	ldd	r25, Y+20	; 0x14
    1f92:	98 8b       	std	Y+16, r25	; 0x10
    1f94:	8f 87       	std	Y+15, r24	; 0x0f
    1f96:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f98:	98 89       	ldd	r25, Y+16	; 0x10
    1f9a:	01 97       	sbiw	r24, 0x01	; 1
    1f9c:	f1 f7       	brne	.-4      	; 0x1f9a <passwordEntry+0x332>
    1f9e:	98 8b       	std	Y+16, r25	; 0x10
    1fa0:	8f 87       	std	Y+15, r24	; 0x0f

			_delay_ms(200);

			LCD_moveCursor(1,passwordDigitCounter);
    1fa2:	9a ad       	ldd	r25, Y+58	; 0x3a
    1fa4:	81 e0       	ldi	r24, 0x01	; 1
    1fa6:	69 2f       	mov	r22, r25
    1fa8:	0e 94 67 1c 	call	0x38ce	; 0x38ce <LCD_moveCursor>

			LCD_displayCharacter('*');
    1fac:	8a e2       	ldi	r24, 0x2A	; 42
    1fae:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <LCD_displayCharacter>
    1fb2:	03 c0       	rjmp	.+6      	; 0x1fba <passwordEntry+0x352>
		}
		else
		{
			/*If the variable wasn't numeric , repeat the iteration once again*/
			passwordDigitCounter--;
    1fb4:	8a ad       	ldd	r24, Y+58	; 0x3a
    1fb6:	81 50       	subi	r24, 0x01	; 1
    1fb8:	8a af       	std	Y+58, r24	; 0x3a
	LCD_displayString("Enter password :");

	LCD_moveCursor(1,0);

	/*Loop on the array to collect the required the password digits*/
	for(passwordDigitCounter = 0 ; passwordDigitCounter < PASSWORD_LENGTH ; passwordDigitCounter++)
    1fba:	8a ad       	ldd	r24, Y+58	; 0x3a
    1fbc:	8f 5f       	subi	r24, 0xFF	; 255
    1fbe:	8a af       	std	Y+58, r24	; 0x3a
    1fc0:	8a ad       	ldd	r24, Y+58	; 0x3a
    1fc2:	85 30       	cpi	r24, 0x05	; 5
    1fc4:	0c f4       	brge	.+2      	; 0x1fc8 <passwordEntry+0x360>
    1fc6:	e7 ce       	rjmp	.-562    	; 0x1d96 <passwordEntry+0x12e>
		}
	}

	/*Once the entry is completed , confirm by
	 * pressing on '=' to proceed to next step*/
	while(KEYPAD_getPressedKey() != '=');
    1fc8:	0e 94 91 22 	call	0x4522	; 0x4522 <KEYPAD_getPressedKey>
    1fcc:	8d 33       	cpi	r24, 0x3D	; 61
    1fce:	e1 f7       	brne	.-8      	; 0x1fc8 <passwordEntry+0x360>

	/*Send the password Entry*/
	UART_sendData(passwordEntryArray,PASSWORD_LENGTH);
    1fd0:	ce 01       	movw	r24, r28
    1fd2:	cb 96       	adiw	r24, 0x3b	; 59
    1fd4:	65 e0       	ldi	r22, 0x05	; 5
    1fd6:	0e 94 f9 1e 	call	0x3df2	; 0x3df2 <UART_sendData>
    1fda:	80 e0       	ldi	r24, 0x00	; 0
    1fdc:	90 e0       	ldi	r25, 0x00	; 0
    1fde:	a8 ec       	ldi	r26, 0xC8	; 200
    1fe0:	b2 e4       	ldi	r27, 0x42	; 66
    1fe2:	8b 87       	std	Y+11, r24	; 0x0b
    1fe4:	9c 87       	std	Y+12, r25	; 0x0c
    1fe6:	ad 87       	std	Y+13, r26	; 0x0d
    1fe8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fea:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fec:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fee:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ff0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ff2:	20 e0       	ldi	r18, 0x00	; 0
    1ff4:	30 e0       	ldi	r19, 0x00	; 0
    1ff6:	4a ef       	ldi	r20, 0xFA	; 250
    1ff8:	54 e4       	ldi	r21, 0x44	; 68
    1ffa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ffe:	dc 01       	movw	r26, r24
    2000:	cb 01       	movw	r24, r22
    2002:	8f 83       	std	Y+7, r24	; 0x07
    2004:	98 87       	std	Y+8, r25	; 0x08
    2006:	a9 87       	std	Y+9, r26	; 0x09
    2008:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    200a:	6f 81       	ldd	r22, Y+7	; 0x07
    200c:	78 85       	ldd	r23, Y+8	; 0x08
    200e:	89 85       	ldd	r24, Y+9	; 0x09
    2010:	9a 85       	ldd	r25, Y+10	; 0x0a
    2012:	20 e0       	ldi	r18, 0x00	; 0
    2014:	30 e0       	ldi	r19, 0x00	; 0
    2016:	40 e8       	ldi	r20, 0x80	; 128
    2018:	5f e3       	ldi	r21, 0x3F	; 63
    201a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    201e:	88 23       	and	r24, r24
    2020:	2c f4       	brge	.+10     	; 0x202c <passwordEntry+0x3c4>
		__ticks = 1;
    2022:	81 e0       	ldi	r24, 0x01	; 1
    2024:	90 e0       	ldi	r25, 0x00	; 0
    2026:	9e 83       	std	Y+6, r25	; 0x06
    2028:	8d 83       	std	Y+5, r24	; 0x05
    202a:	3f c0       	rjmp	.+126    	; 0x20aa <passwordEntry+0x442>
	else if (__tmp > 65535)
    202c:	6f 81       	ldd	r22, Y+7	; 0x07
    202e:	78 85       	ldd	r23, Y+8	; 0x08
    2030:	89 85       	ldd	r24, Y+9	; 0x09
    2032:	9a 85       	ldd	r25, Y+10	; 0x0a
    2034:	20 e0       	ldi	r18, 0x00	; 0
    2036:	3f ef       	ldi	r19, 0xFF	; 255
    2038:	4f e7       	ldi	r20, 0x7F	; 127
    203a:	57 e4       	ldi	r21, 0x47	; 71
    203c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2040:	18 16       	cp	r1, r24
    2042:	4c f5       	brge	.+82     	; 0x2096 <passwordEntry+0x42e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2044:	6b 85       	ldd	r22, Y+11	; 0x0b
    2046:	7c 85       	ldd	r23, Y+12	; 0x0c
    2048:	8d 85       	ldd	r24, Y+13	; 0x0d
    204a:	9e 85       	ldd	r25, Y+14	; 0x0e
    204c:	20 e0       	ldi	r18, 0x00	; 0
    204e:	30 e0       	ldi	r19, 0x00	; 0
    2050:	40 e2       	ldi	r20, 0x20	; 32
    2052:	51 e4       	ldi	r21, 0x41	; 65
    2054:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2058:	dc 01       	movw	r26, r24
    205a:	cb 01       	movw	r24, r22
    205c:	bc 01       	movw	r22, r24
    205e:	cd 01       	movw	r24, r26
    2060:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2064:	dc 01       	movw	r26, r24
    2066:	cb 01       	movw	r24, r22
    2068:	9e 83       	std	Y+6, r25	; 0x06
    206a:	8d 83       	std	Y+5, r24	; 0x05
    206c:	0f c0       	rjmp	.+30     	; 0x208c <passwordEntry+0x424>
    206e:	88 ec       	ldi	r24, 0xC8	; 200
    2070:	90 e0       	ldi	r25, 0x00	; 0
    2072:	9c 83       	std	Y+4, r25	; 0x04
    2074:	8b 83       	std	Y+3, r24	; 0x03
    2076:	8b 81       	ldd	r24, Y+3	; 0x03
    2078:	9c 81       	ldd	r25, Y+4	; 0x04
    207a:	01 97       	sbiw	r24, 0x01	; 1
    207c:	f1 f7       	brne	.-4      	; 0x207a <passwordEntry+0x412>
    207e:	9c 83       	std	Y+4, r25	; 0x04
    2080:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2082:	8d 81       	ldd	r24, Y+5	; 0x05
    2084:	9e 81       	ldd	r25, Y+6	; 0x06
    2086:	01 97       	sbiw	r24, 0x01	; 1
    2088:	9e 83       	std	Y+6, r25	; 0x06
    208a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    208c:	8d 81       	ldd	r24, Y+5	; 0x05
    208e:	9e 81       	ldd	r25, Y+6	; 0x06
    2090:	00 97       	sbiw	r24, 0x00	; 0
    2092:	69 f7       	brne	.-38     	; 0x206e <passwordEntry+0x406>
    2094:	14 c0       	rjmp	.+40     	; 0x20be <passwordEntry+0x456>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2096:	6f 81       	ldd	r22, Y+7	; 0x07
    2098:	78 85       	ldd	r23, Y+8	; 0x08
    209a:	89 85       	ldd	r24, Y+9	; 0x09
    209c:	9a 85       	ldd	r25, Y+10	; 0x0a
    209e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20a2:	dc 01       	movw	r26, r24
    20a4:	cb 01       	movw	r24, r22
    20a6:	9e 83       	std	Y+6, r25	; 0x06
    20a8:	8d 83       	std	Y+5, r24	; 0x05
    20aa:	8d 81       	ldd	r24, Y+5	; 0x05
    20ac:	9e 81       	ldd	r25, Y+6	; 0x06
    20ae:	9a 83       	std	Y+2, r25	; 0x02
    20b0:	89 83       	std	Y+1, r24	; 0x01
    20b2:	89 81       	ldd	r24, Y+1	; 0x01
    20b4:	9a 81       	ldd	r25, Y+2	; 0x02
    20b6:	01 97       	sbiw	r24, 0x01	; 1
    20b8:	f1 f7       	brne	.-4      	; 0x20b6 <passwordEntry+0x44e>
    20ba:	9a 83       	std	Y+2, r25	; 0x02
    20bc:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(100); /*Allow time for transmission*/

	/*Receive pw_match results to check whether correct / incorrect password*/
	return UART_recieveByte();
    20be:	0e 94 7c 1e 	call	0x3cf8	; 0x3cf8 <UART_recieveByte>

}
    20c2:	ef 96       	adiw	r28, 0x3f	; 63
    20c4:	0f b6       	in	r0, 0x3f	; 63
    20c6:	f8 94       	cli
    20c8:	de bf       	out	0x3e, r29	; 62
    20ca:	0f be       	out	0x3f, r0	; 63
    20cc:	cd bf       	out	0x3d, r28	; 61
    20ce:	cf 91       	pop	r28
    20d0:	df 91       	pop	r29
    20d2:	08 95       	ret

000020d4 <passwordState>:

void passwordState(const Password_Results * a_Result)
{
    20d4:	df 93       	push	r29
    20d6:	cf 93       	push	r28
    20d8:	cd b7       	in	r28, 0x3d	; 61
    20da:	de b7       	in	r29, 0x3e	; 62
    20dc:	60 97       	sbiw	r28, 0x10	; 16
    20de:	0f b6       	in	r0, 0x3f	; 63
    20e0:	f8 94       	cli
    20e2:	de bf       	out	0x3e, r29	; 62
    20e4:	0f be       	out	0x3f, r0	; 63
    20e6:	cd bf       	out	0x3d, r28	; 61
    20e8:	98 8b       	std	Y+16, r25	; 0x10
    20ea:	8f 87       	std	Y+15, r24	; 0x0f
	 * password entered was incorrect*/
	static uint8 wrongPasswordCounter = 0;

	/*If the maximum allowable entries of password are reached
	 * it will redirect to Locked mode !*/
	if(2 == wrongPasswordCounter && IncorrectPW == *a_Result )
    20ec:	80 91 6c 01 	lds	r24, 0x016C
    20f0:	82 30       	cpi	r24, 0x02	; 2
    20f2:	51 f4       	brne	.+20     	; 0x2108 <passwordState+0x34>
    20f4:	ef 85       	ldd	r30, Y+15	; 0x0f
    20f6:	f8 89       	ldd	r31, Y+16	; 0x10
    20f8:	80 81       	ld	r24, Z
    20fa:	81 30       	cpi	r24, 0x01	; 1
    20fc:	29 f4       	brne	.+10     	; 0x2108 <passwordState+0x34>
	{
		wrongPasswordCounter=0;
    20fe:	10 92 6c 01 	sts	0x016C, r1
		lockedMode();
    2102:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <lockedMode>
    2106:	8b c0       	rjmp	.+278    	; 0x221e <passwordState+0x14a>
	}

	/*If the password was incorrect , increment wrong password
	 * entries counter by one and display message on LCD */
	else if(IncorrectPW == *a_Result)
    2108:	ef 85       	ldd	r30, Y+15	; 0x0f
    210a:	f8 89       	ldd	r31, Y+16	; 0x10
    210c:	80 81       	ld	r24, Z
    210e:	81 30       	cpi	r24, 0x01	; 1
    2110:	09 f0       	breq	.+2      	; 0x2114 <passwordState+0x40>
    2112:	7e c0       	rjmp	.+252    	; 0x2210 <passwordState+0x13c>
	{
		wrongPasswordCounter++;
    2114:	80 91 6c 01 	lds	r24, 0x016C
    2118:	8f 5f       	subi	r24, 0xFF	; 255
    211a:	80 93 6c 01 	sts	0x016C, r24
		LCD_cleanScreen();
    211e:	0e 94 c2 1c 	call	0x3984	; 0x3984 <LCD_cleanScreen>

		LCD_displayString("Incorrect PW !");
    2122:	84 ef       	ldi	r24, 0xF4	; 244
    2124:	90 e0       	ldi	r25, 0x00	; 0
    2126:	0e 94 3b 1c 	call	0x3876	; 0x3876 <LCD_displayString>
    212a:	80 e0       	ldi	r24, 0x00	; 0
    212c:	90 e0       	ldi	r25, 0x00	; 0
    212e:	aa ef       	ldi	r26, 0xFA	; 250
    2130:	b3 e4       	ldi	r27, 0x43	; 67
    2132:	8b 87       	std	Y+11, r24	; 0x0b
    2134:	9c 87       	std	Y+12, r25	; 0x0c
    2136:	ad 87       	std	Y+13, r26	; 0x0d
    2138:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    213a:	6b 85       	ldd	r22, Y+11	; 0x0b
    213c:	7c 85       	ldd	r23, Y+12	; 0x0c
    213e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2140:	9e 85       	ldd	r25, Y+14	; 0x0e
    2142:	20 e0       	ldi	r18, 0x00	; 0
    2144:	30 e0       	ldi	r19, 0x00	; 0
    2146:	4a ef       	ldi	r20, 0xFA	; 250
    2148:	54 e4       	ldi	r21, 0x44	; 68
    214a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    214e:	dc 01       	movw	r26, r24
    2150:	cb 01       	movw	r24, r22
    2152:	8f 83       	std	Y+7, r24	; 0x07
    2154:	98 87       	std	Y+8, r25	; 0x08
    2156:	a9 87       	std	Y+9, r26	; 0x09
    2158:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    215a:	6f 81       	ldd	r22, Y+7	; 0x07
    215c:	78 85       	ldd	r23, Y+8	; 0x08
    215e:	89 85       	ldd	r24, Y+9	; 0x09
    2160:	9a 85       	ldd	r25, Y+10	; 0x0a
    2162:	20 e0       	ldi	r18, 0x00	; 0
    2164:	30 e0       	ldi	r19, 0x00	; 0
    2166:	40 e8       	ldi	r20, 0x80	; 128
    2168:	5f e3       	ldi	r21, 0x3F	; 63
    216a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    216e:	88 23       	and	r24, r24
    2170:	2c f4       	brge	.+10     	; 0x217c <passwordState+0xa8>
		__ticks = 1;
    2172:	81 e0       	ldi	r24, 0x01	; 1
    2174:	90 e0       	ldi	r25, 0x00	; 0
    2176:	9e 83       	std	Y+6, r25	; 0x06
    2178:	8d 83       	std	Y+5, r24	; 0x05
    217a:	3f c0       	rjmp	.+126    	; 0x21fa <passwordState+0x126>
	else if (__tmp > 65535)
    217c:	6f 81       	ldd	r22, Y+7	; 0x07
    217e:	78 85       	ldd	r23, Y+8	; 0x08
    2180:	89 85       	ldd	r24, Y+9	; 0x09
    2182:	9a 85       	ldd	r25, Y+10	; 0x0a
    2184:	20 e0       	ldi	r18, 0x00	; 0
    2186:	3f ef       	ldi	r19, 0xFF	; 255
    2188:	4f e7       	ldi	r20, 0x7F	; 127
    218a:	57 e4       	ldi	r21, 0x47	; 71
    218c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2190:	18 16       	cp	r1, r24
    2192:	4c f5       	brge	.+82     	; 0x21e6 <passwordState+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2194:	6b 85       	ldd	r22, Y+11	; 0x0b
    2196:	7c 85       	ldd	r23, Y+12	; 0x0c
    2198:	8d 85       	ldd	r24, Y+13	; 0x0d
    219a:	9e 85       	ldd	r25, Y+14	; 0x0e
    219c:	20 e0       	ldi	r18, 0x00	; 0
    219e:	30 e0       	ldi	r19, 0x00	; 0
    21a0:	40 e2       	ldi	r20, 0x20	; 32
    21a2:	51 e4       	ldi	r21, 0x41	; 65
    21a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21a8:	dc 01       	movw	r26, r24
    21aa:	cb 01       	movw	r24, r22
    21ac:	bc 01       	movw	r22, r24
    21ae:	cd 01       	movw	r24, r26
    21b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21b4:	dc 01       	movw	r26, r24
    21b6:	cb 01       	movw	r24, r22
    21b8:	9e 83       	std	Y+6, r25	; 0x06
    21ba:	8d 83       	std	Y+5, r24	; 0x05
    21bc:	0f c0       	rjmp	.+30     	; 0x21dc <passwordState+0x108>
    21be:	88 ec       	ldi	r24, 0xC8	; 200
    21c0:	90 e0       	ldi	r25, 0x00	; 0
    21c2:	9c 83       	std	Y+4, r25	; 0x04
    21c4:	8b 83       	std	Y+3, r24	; 0x03
    21c6:	8b 81       	ldd	r24, Y+3	; 0x03
    21c8:	9c 81       	ldd	r25, Y+4	; 0x04
    21ca:	01 97       	sbiw	r24, 0x01	; 1
    21cc:	f1 f7       	brne	.-4      	; 0x21ca <passwordState+0xf6>
    21ce:	9c 83       	std	Y+4, r25	; 0x04
    21d0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21d2:	8d 81       	ldd	r24, Y+5	; 0x05
    21d4:	9e 81       	ldd	r25, Y+6	; 0x06
    21d6:	01 97       	sbiw	r24, 0x01	; 1
    21d8:	9e 83       	std	Y+6, r25	; 0x06
    21da:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21dc:	8d 81       	ldd	r24, Y+5	; 0x05
    21de:	9e 81       	ldd	r25, Y+6	; 0x06
    21e0:	00 97       	sbiw	r24, 0x00	; 0
    21e2:	69 f7       	brne	.-38     	; 0x21be <passwordState+0xea>
    21e4:	1c c0       	rjmp	.+56     	; 0x221e <passwordState+0x14a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21e6:	6f 81       	ldd	r22, Y+7	; 0x07
    21e8:	78 85       	ldd	r23, Y+8	; 0x08
    21ea:	89 85       	ldd	r24, Y+9	; 0x09
    21ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    21ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21f2:	dc 01       	movw	r26, r24
    21f4:	cb 01       	movw	r24, r22
    21f6:	9e 83       	std	Y+6, r25	; 0x06
    21f8:	8d 83       	std	Y+5, r24	; 0x05
    21fa:	8d 81       	ldd	r24, Y+5	; 0x05
    21fc:	9e 81       	ldd	r25, Y+6	; 0x06
    21fe:	9a 83       	std	Y+2, r25	; 0x02
    2200:	89 83       	std	Y+1, r24	; 0x01
    2202:	89 81       	ldd	r24, Y+1	; 0x01
    2204:	9a 81       	ldd	r25, Y+2	; 0x02
    2206:	01 97       	sbiw	r24, 0x01	; 1
    2208:	f1 f7       	brne	.-4      	; 0x2206 <passwordState+0x132>
    220a:	9a 83       	std	Y+2, r25	; 0x02
    220c:	89 83       	std	Y+1, r24	; 0x01
    220e:	07 c0       	rjmp	.+14     	; 0x221e <passwordState+0x14a>

		_delay_ms(500); /*display message for 0.5 second*/
	}

	/*If entered password was correct , reset wrong password entries counter*/
	else if (CorrectPW == *a_Result)
    2210:	ef 85       	ldd	r30, Y+15	; 0x0f
    2212:	f8 89       	ldd	r31, Y+16	; 0x10
    2214:	80 81       	ld	r24, Z
    2216:	82 30       	cpi	r24, 0x02	; 2
    2218:	11 f4       	brne	.+4      	; 0x221e <passwordState+0x14a>
	{
		wrongPasswordCounter=0;
    221a:	10 92 6c 01 	sts	0x016C, r1
	}

	/*Reset password status back to empty*/
	PW_Result = EmptyPW;
    221e:	10 92 6b 01 	sts	0x016B, r1
}
    2222:	60 96       	adiw	r28, 0x10	; 16
    2224:	0f b6       	in	r0, 0x3f	; 63
    2226:	f8 94       	cli
    2228:	de bf       	out	0x3e, r29	; 62
    222a:	0f be       	out	0x3f, r0	; 63
    222c:	cd bf       	out	0x3d, r28	; 61
    222e:	cf 91       	pop	r28
    2230:	df 91       	pop	r29
    2232:	08 95       	ret

00002234 <displayDoorStatus>:

void displayDoorStatus(void)
{
    2234:	df 93       	push	r29
    2236:	cf 93       	push	r28
    2238:	cd b7       	in	r28, 0x3d	; 61
    223a:	de b7       	in	r29, 0x3e	; 62
	 * the run time & set to volatile to disable compiler
	 * optimization on the variable*/
	static volatile uint8 doorTimerCounter = MOTOR_START_TIME;

	/*Display the main message that won't be altered at first iteration*/
	if(MOTOR_START_TIME==doorTimerCounter)
    223c:	80 91 6d 01 	lds	r24, 0x016D
    2240:	88 23       	and	r24, r24
    2242:	39 f4       	brne	.+14     	; 0x2252 <displayDoorStatus+0x1e>
	LCD_displayStringRowColumn(0,0,"Door is ");
    2244:	23 e0       	ldi	r18, 0x03	; 3
    2246:	31 e0       	ldi	r19, 0x01	; 1
    2248:	80 e0       	ldi	r24, 0x00	; 0
    224a:	60 e0       	ldi	r22, 0x00	; 0
    224c:	a9 01       	movw	r20, r18
    224e:	0e 94 a9 1c 	call	0x3952	; 0x3952 <LCD_displayStringRowColumn>

	/*Timer counter value is within unlocking mode*/
	if(doorTimerCounter < MOTOR_UNLOCKING_TIME)
    2252:	80 91 6d 01 	lds	r24, 0x016D
    2256:	8f 30       	cpi	r24, 0x0F	; 15
    2258:	08 f0       	brcs	.+2      	; 0x225c <displayDoorStatus+0x28>
    225a:	4b c0       	rjmp	.+150    	; 0x22f2 <displayDoorStatus+0xbe>
	{
		if(MOTOR_START_TIME==doorTimerCounter)
    225c:	80 91 6d 01 	lds	r24, 0x016D
    2260:	88 23       	and	r24, r24
    2262:	39 f4       	brne	.+14     	; 0x2272 <displayDoorStatus+0x3e>
		LCD_displayStringRowColumn(1,0,"Unlocking");
    2264:	2c e0       	ldi	r18, 0x0C	; 12
    2266:	31 e0       	ldi	r19, 0x01	; 1
    2268:	81 e0       	ldi	r24, 0x01	; 1
    226a:	60 e0       	ldi	r22, 0x00	; 0
    226c:	a9 01       	movw	r20, r18
    226e:	0e 94 a9 1c 	call	0x3952	; 0x3952 <LCD_displayStringRowColumn>


		/*A buffer animation on screen :D*/
		/*A number divisible by 3 , display three dots*/
		if(BIT_IS_SET(doorTimerCounter,0) && BIT_IS_SET(doorTimerCounter,1))
    2272:	80 91 6d 01 	lds	r24, 0x016D
    2276:	88 2f       	mov	r24, r24
    2278:	90 e0       	ldi	r25, 0x00	; 0
    227a:	81 70       	andi	r24, 0x01	; 1
    227c:	90 70       	andi	r25, 0x00	; 0
    227e:	98 2f       	mov	r25, r24
    2280:	81 e0       	ldi	r24, 0x01	; 1
    2282:	89 27       	eor	r24, r25
    2284:	88 23       	and	r24, r24
    2286:	81 f4       	brne	.+32     	; 0x22a8 <displayDoorStatus+0x74>
    2288:	80 91 6d 01 	lds	r24, 0x016D
    228c:	88 2f       	mov	r24, r24
    228e:	90 e0       	ldi	r25, 0x00	; 0
    2290:	82 70       	andi	r24, 0x02	; 2
    2292:	90 70       	andi	r25, 0x00	; 0
    2294:	00 97       	sbiw	r24, 0x00	; 0
    2296:	41 f0       	breq	.+16     	; 0x22a8 <displayDoorStatus+0x74>
		{
			LCD_displayStringRowColumn(1,9,"...");
    2298:	26 e1       	ldi	r18, 0x16	; 22
    229a:	31 e0       	ldi	r19, 0x01	; 1
    229c:	81 e0       	ldi	r24, 0x01	; 1
    229e:	69 e0       	ldi	r22, 0x09	; 9
    22a0:	a9 01       	movw	r20, r18
    22a2:	0e 94 a9 1c 	call	0x3952	; 0x3952 <LCD_displayStringRowColumn>
    22a6:	1f c0       	rjmp	.+62     	; 0x22e6 <displayDoorStatus+0xb2>
		}
		/*An even number , display two dots*/
		else if(BIT_IS_SET(doorTimerCounter,1) )
    22a8:	80 91 6d 01 	lds	r24, 0x016D
    22ac:	88 2f       	mov	r24, r24
    22ae:	90 e0       	ldi	r25, 0x00	; 0
    22b0:	82 70       	andi	r24, 0x02	; 2
    22b2:	90 70       	andi	r25, 0x00	; 0
    22b4:	00 97       	sbiw	r24, 0x00	; 0
    22b6:	41 f0       	breq	.+16     	; 0x22c8 <displayDoorStatus+0x94>
		{
			LCD_displayStringRowColumn(1,9,".. ");
    22b8:	2a e1       	ldi	r18, 0x1A	; 26
    22ba:	31 e0       	ldi	r19, 0x01	; 1
    22bc:	81 e0       	ldi	r24, 0x01	; 1
    22be:	69 e0       	ldi	r22, 0x09	; 9
    22c0:	a9 01       	movw	r20, r18
    22c2:	0e 94 a9 1c 	call	0x3952	; 0x3952 <LCD_displayStringRowColumn>
    22c6:	0f c0       	rjmp	.+30     	; 0x22e6 <displayDoorStatus+0xb2>
		}
		/*An odd number , display one dot*/
		else if(BIT_IS_SET(doorTimerCounter,0))
    22c8:	80 91 6d 01 	lds	r24, 0x016D
    22cc:	88 2f       	mov	r24, r24
    22ce:	90 e0       	ldi	r25, 0x00	; 0
    22d0:	81 70       	andi	r24, 0x01	; 1
    22d2:	90 70       	andi	r25, 0x00	; 0
    22d4:	88 23       	and	r24, r24
    22d6:	39 f0       	breq	.+14     	; 0x22e6 <displayDoorStatus+0xb2>
		{
			LCD_displayStringRowColumn(1,9,".  ");
    22d8:	2e e1       	ldi	r18, 0x1E	; 30
    22da:	31 e0       	ldi	r19, 0x01	; 1
    22dc:	81 e0       	ldi	r24, 0x01	; 1
    22de:	69 e0       	ldi	r22, 0x09	; 9
    22e0:	a9 01       	movw	r20, r18
    22e2:	0e 94 a9 1c 	call	0x3952	; 0x3952 <LCD_displayStringRowColumn>
		}

		/*Increment timer by one , which means one second has passed */
		doorTimerCounter++;
    22e6:	80 91 6d 01 	lds	r24, 0x016D
    22ea:	8f 5f       	subi	r24, 0xFF	; 255
    22ec:	80 93 6d 01 	sts	0x016D, r24
    22f0:	78 c0       	rjmp	.+240    	; 0x23e2 <displayDoorStatus+0x1ae>

	}

	/*Timer counter value is within stop mode*/
	else if (doorTimerCounter >=MOTOR_UNLOCKING_TIME && doorTimerCounter<MOTOR_STOPPING_TIME)
    22f2:	80 91 6d 01 	lds	r24, 0x016D
    22f6:	8f 30       	cpi	r24, 0x0F	; 15
    22f8:	a8 f0       	brcs	.+42     	; 0x2324 <displayDoorStatus+0xf0>
    22fa:	80 91 6d 01 	lds	r24, 0x016D
    22fe:	82 31       	cpi	r24, 0x12	; 18
    2300:	88 f4       	brcc	.+34     	; 0x2324 <displayDoorStatus+0xf0>
	{
		if(MOTOR_UNLOCKING_TIME==doorTimerCounter)
    2302:	80 91 6d 01 	lds	r24, 0x016D
    2306:	8f 30       	cpi	r24, 0x0F	; 15
    2308:	39 f4       	brne	.+14     	; 0x2318 <displayDoorStatus+0xe4>
		LCD_displayStringRowColumn(1,0,"Unlocked !  ");
    230a:	22 e2       	ldi	r18, 0x22	; 34
    230c:	31 e0       	ldi	r19, 0x01	; 1
    230e:	81 e0       	ldi	r24, 0x01	; 1
    2310:	60 e0       	ldi	r22, 0x00	; 0
    2312:	a9 01       	movw	r20, r18
    2314:	0e 94 a9 1c 	call	0x3952	; 0x3952 <LCD_displayStringRowColumn>

		/*Increment timer by one , which means one second has passed */
		doorTimerCounter++;
    2318:	80 91 6d 01 	lds	r24, 0x016D
    231c:	8f 5f       	subi	r24, 0xFF	; 255
    231e:	80 93 6d 01 	sts	0x016D, r24
    2322:	5f c0       	rjmp	.+190    	; 0x23e2 <displayDoorStatus+0x1ae>
	}

	/*Timer counter value is within locking mode*/
	else if(doorTimerCounter >=MOTOR_STOPPING_TIME && doorTimerCounter  < (MOTOR_LOCKING_TIME))
    2324:	80 91 6d 01 	lds	r24, 0x016D
    2328:	82 31       	cpi	r24, 0x12	; 18
    232a:	08 f4       	brcc	.+2      	; 0x232e <displayDoorStatus+0xfa>
    232c:	50 c0       	rjmp	.+160    	; 0x23ce <displayDoorStatus+0x19a>
    232e:	80 91 6d 01 	lds	r24, 0x016D
    2332:	81 32       	cpi	r24, 0x21	; 33
    2334:	08 f0       	brcs	.+2      	; 0x2338 <displayDoorStatus+0x104>
    2336:	4b c0       	rjmp	.+150    	; 0x23ce <displayDoorStatus+0x19a>
	{
		if((MOTOR_STOPPING_TIME)==doorTimerCounter)
    2338:	80 91 6d 01 	lds	r24, 0x016D
    233c:	82 31       	cpi	r24, 0x12	; 18
    233e:	39 f4       	brne	.+14     	; 0x234e <displayDoorStatus+0x11a>
		LCD_displayStringRowColumn(1,0,"Locking");
    2340:	2f e2       	ldi	r18, 0x2F	; 47
    2342:	31 e0       	ldi	r19, 0x01	; 1
    2344:	81 e0       	ldi	r24, 0x01	; 1
    2346:	60 e0       	ldi	r22, 0x00	; 0
    2348:	a9 01       	movw	r20, r18
    234a:	0e 94 a9 1c 	call	0x3952	; 0x3952 <LCD_displayStringRowColumn>

		/*A buffer animation on screen :D*/
		/*A number divisible by 3 , display three dots*/
		if(BIT_IS_SET(doorTimerCounter,0) && BIT_IS_SET(doorTimerCounter,1))
    234e:	80 91 6d 01 	lds	r24, 0x016D
    2352:	88 2f       	mov	r24, r24
    2354:	90 e0       	ldi	r25, 0x00	; 0
    2356:	81 70       	andi	r24, 0x01	; 1
    2358:	90 70       	andi	r25, 0x00	; 0
    235a:	98 2f       	mov	r25, r24
    235c:	81 e0       	ldi	r24, 0x01	; 1
    235e:	89 27       	eor	r24, r25
    2360:	88 23       	and	r24, r24
    2362:	81 f4       	brne	.+32     	; 0x2384 <displayDoorStatus+0x150>
    2364:	80 91 6d 01 	lds	r24, 0x016D
    2368:	88 2f       	mov	r24, r24
    236a:	90 e0       	ldi	r25, 0x00	; 0
    236c:	82 70       	andi	r24, 0x02	; 2
    236e:	90 70       	andi	r25, 0x00	; 0
    2370:	00 97       	sbiw	r24, 0x00	; 0
    2372:	41 f0       	breq	.+16     	; 0x2384 <displayDoorStatus+0x150>
		{
			LCD_displayStringRowColumn(1,7,"...");
    2374:	26 e1       	ldi	r18, 0x16	; 22
    2376:	31 e0       	ldi	r19, 0x01	; 1
    2378:	81 e0       	ldi	r24, 0x01	; 1
    237a:	67 e0       	ldi	r22, 0x07	; 7
    237c:	a9 01       	movw	r20, r18
    237e:	0e 94 a9 1c 	call	0x3952	; 0x3952 <LCD_displayStringRowColumn>
    2382:	1f c0       	rjmp	.+62     	; 0x23c2 <displayDoorStatus+0x18e>
		}
		/*An even number , display two dots*/
		else if(BIT_IS_SET(doorTimerCounter,1) )
    2384:	80 91 6d 01 	lds	r24, 0x016D
    2388:	88 2f       	mov	r24, r24
    238a:	90 e0       	ldi	r25, 0x00	; 0
    238c:	82 70       	andi	r24, 0x02	; 2
    238e:	90 70       	andi	r25, 0x00	; 0
    2390:	00 97       	sbiw	r24, 0x00	; 0
    2392:	41 f0       	breq	.+16     	; 0x23a4 <displayDoorStatus+0x170>
		{
			LCD_displayStringRowColumn(1,7,".. ");
    2394:	2a e1       	ldi	r18, 0x1A	; 26
    2396:	31 e0       	ldi	r19, 0x01	; 1
    2398:	81 e0       	ldi	r24, 0x01	; 1
    239a:	67 e0       	ldi	r22, 0x07	; 7
    239c:	a9 01       	movw	r20, r18
    239e:	0e 94 a9 1c 	call	0x3952	; 0x3952 <LCD_displayStringRowColumn>
    23a2:	0f c0       	rjmp	.+30     	; 0x23c2 <displayDoorStatus+0x18e>
		}
		/*An odd number , display one dot*/
		else if(BIT_IS_SET(doorTimerCounter,0))
    23a4:	80 91 6d 01 	lds	r24, 0x016D
    23a8:	88 2f       	mov	r24, r24
    23aa:	90 e0       	ldi	r25, 0x00	; 0
    23ac:	81 70       	andi	r24, 0x01	; 1
    23ae:	90 70       	andi	r25, 0x00	; 0
    23b0:	88 23       	and	r24, r24
    23b2:	39 f0       	breq	.+14     	; 0x23c2 <displayDoorStatus+0x18e>
		{
			LCD_displayStringRowColumn(1,7,".  ");
    23b4:	2e e1       	ldi	r18, 0x1E	; 30
    23b6:	31 e0       	ldi	r19, 0x01	; 1
    23b8:	81 e0       	ldi	r24, 0x01	; 1
    23ba:	67 e0       	ldi	r22, 0x07	; 7
    23bc:	a9 01       	movw	r20, r18
    23be:	0e 94 a9 1c 	call	0x3952	; 0x3952 <LCD_displayStringRowColumn>
		}

		/*Increment timer by one , which means one second has passed */
		doorTimerCounter++;
    23c2:	80 91 6d 01 	lds	r24, 0x016D
    23c6:	8f 5f       	subi	r24, 0xFF	; 255
    23c8:	80 93 6d 01 	sts	0x016D, r24
    23cc:	0a c0       	rjmp	.+20     	; 0x23e2 <displayDoorStatus+0x1ae>
	}

	/*IF Timer counter reached the last required time ,
	 * Stop / DeInit. TIMER 1 , reset counter & return back to Main Menu*/
	else if(doorTimerCounter == MOTOR_LOCKING_TIME	)
    23ce:	80 91 6d 01 	lds	r24, 0x016D
    23d2:	81 32       	cpi	r24, 0x21	; 33
    23d4:	31 f4       	brne	.+12     	; 0x23e2 <displayDoorStatus+0x1ae>
	{
		Timer1_deInit();
    23d6:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <Timer1_deInit>
		doorTimerCounter=0;
    23da:	10 92 6d 01 	sts	0x016D, r1
		APP_nextState = MainMenu ;
    23de:	10 92 70 01 	sts	0x0170, r1
	}
}
    23e2:	cf 91       	pop	r28
    23e4:	df 91       	pop	r29
    23e6:	08 95       	ret

000023e8 <lockedMode>:

void lockedMode(void)
{
    23e8:	df 93       	push	r29
    23ea:	cf 93       	push	r28
    23ec:	cd b7       	in	r28, 0x3d	; 61
    23ee:	de b7       	in	r29, 0x3e	; 62
    23f0:	2e 97       	sbiw	r28, 0x0e	; 14
    23f2:	0f b6       	in	r0, 0x3f	; 63
    23f4:	f8 94       	cli
    23f6:	de bf       	out	0x3e, r29	; 62
    23f8:	0f be       	out	0x3f, r0	; 63
    23fa:	cd bf       	out	0x3d, r28	; 61

	/*Set the next Control ECU state to be in locked mode*/
	UART_nextState = LockedMode;
    23fc:	84 e0       	ldi	r24, 0x04	; 4
    23fe:	80 93 6a 01 	sts	0x016A, r24

	/*Send the UART command*/
	UART_sendByte(UART_nextState);
    2402:	80 91 6a 01 	lds	r24, 0x016A
    2406:	0e 94 8b 1e 	call	0x3d16	; 0x3d16 <UART_sendByte>
    240a:	80 e0       	ldi	r24, 0x00	; 0
    240c:	90 e0       	ldi	r25, 0x00	; 0
    240e:	a0 e2       	ldi	r26, 0x20	; 32
    2410:	b1 e4       	ldi	r27, 0x41	; 65
    2412:	8b 87       	std	Y+11, r24	; 0x0b
    2414:	9c 87       	std	Y+12, r25	; 0x0c
    2416:	ad 87       	std	Y+13, r26	; 0x0d
    2418:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    241a:	6b 85       	ldd	r22, Y+11	; 0x0b
    241c:	7c 85       	ldd	r23, Y+12	; 0x0c
    241e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2420:	9e 85       	ldd	r25, Y+14	; 0x0e
    2422:	20 e0       	ldi	r18, 0x00	; 0
    2424:	30 e0       	ldi	r19, 0x00	; 0
    2426:	4a ef       	ldi	r20, 0xFA	; 250
    2428:	54 e4       	ldi	r21, 0x44	; 68
    242a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    242e:	dc 01       	movw	r26, r24
    2430:	cb 01       	movw	r24, r22
    2432:	8f 83       	std	Y+7, r24	; 0x07
    2434:	98 87       	std	Y+8, r25	; 0x08
    2436:	a9 87       	std	Y+9, r26	; 0x09
    2438:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    243a:	6f 81       	ldd	r22, Y+7	; 0x07
    243c:	78 85       	ldd	r23, Y+8	; 0x08
    243e:	89 85       	ldd	r24, Y+9	; 0x09
    2440:	9a 85       	ldd	r25, Y+10	; 0x0a
    2442:	20 e0       	ldi	r18, 0x00	; 0
    2444:	30 e0       	ldi	r19, 0x00	; 0
    2446:	40 e8       	ldi	r20, 0x80	; 128
    2448:	5f e3       	ldi	r21, 0x3F	; 63
    244a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    244e:	88 23       	and	r24, r24
    2450:	2c f4       	brge	.+10     	; 0x245c <lockedMode+0x74>
		__ticks = 1;
    2452:	81 e0       	ldi	r24, 0x01	; 1
    2454:	90 e0       	ldi	r25, 0x00	; 0
    2456:	9e 83       	std	Y+6, r25	; 0x06
    2458:	8d 83       	std	Y+5, r24	; 0x05
    245a:	3f c0       	rjmp	.+126    	; 0x24da <lockedMode+0xf2>
	else if (__tmp > 65535)
    245c:	6f 81       	ldd	r22, Y+7	; 0x07
    245e:	78 85       	ldd	r23, Y+8	; 0x08
    2460:	89 85       	ldd	r24, Y+9	; 0x09
    2462:	9a 85       	ldd	r25, Y+10	; 0x0a
    2464:	20 e0       	ldi	r18, 0x00	; 0
    2466:	3f ef       	ldi	r19, 0xFF	; 255
    2468:	4f e7       	ldi	r20, 0x7F	; 127
    246a:	57 e4       	ldi	r21, 0x47	; 71
    246c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2470:	18 16       	cp	r1, r24
    2472:	4c f5       	brge	.+82     	; 0x24c6 <lockedMode+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2474:	6b 85       	ldd	r22, Y+11	; 0x0b
    2476:	7c 85       	ldd	r23, Y+12	; 0x0c
    2478:	8d 85       	ldd	r24, Y+13	; 0x0d
    247a:	9e 85       	ldd	r25, Y+14	; 0x0e
    247c:	20 e0       	ldi	r18, 0x00	; 0
    247e:	30 e0       	ldi	r19, 0x00	; 0
    2480:	40 e2       	ldi	r20, 0x20	; 32
    2482:	51 e4       	ldi	r21, 0x41	; 65
    2484:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2488:	dc 01       	movw	r26, r24
    248a:	cb 01       	movw	r24, r22
    248c:	bc 01       	movw	r22, r24
    248e:	cd 01       	movw	r24, r26
    2490:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2494:	dc 01       	movw	r26, r24
    2496:	cb 01       	movw	r24, r22
    2498:	9e 83       	std	Y+6, r25	; 0x06
    249a:	8d 83       	std	Y+5, r24	; 0x05
    249c:	0f c0       	rjmp	.+30     	; 0x24bc <lockedMode+0xd4>
    249e:	88 ec       	ldi	r24, 0xC8	; 200
    24a0:	90 e0       	ldi	r25, 0x00	; 0
    24a2:	9c 83       	std	Y+4, r25	; 0x04
    24a4:	8b 83       	std	Y+3, r24	; 0x03
    24a6:	8b 81       	ldd	r24, Y+3	; 0x03
    24a8:	9c 81       	ldd	r25, Y+4	; 0x04
    24aa:	01 97       	sbiw	r24, 0x01	; 1
    24ac:	f1 f7       	brne	.-4      	; 0x24aa <lockedMode+0xc2>
    24ae:	9c 83       	std	Y+4, r25	; 0x04
    24b0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24b2:	8d 81       	ldd	r24, Y+5	; 0x05
    24b4:	9e 81       	ldd	r25, Y+6	; 0x06
    24b6:	01 97       	sbiw	r24, 0x01	; 1
    24b8:	9e 83       	std	Y+6, r25	; 0x06
    24ba:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24bc:	8d 81       	ldd	r24, Y+5	; 0x05
    24be:	9e 81       	ldd	r25, Y+6	; 0x06
    24c0:	00 97       	sbiw	r24, 0x00	; 0
    24c2:	69 f7       	brne	.-38     	; 0x249e <lockedMode+0xb6>
    24c4:	14 c0       	rjmp	.+40     	; 0x24ee <lockedMode+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24c6:	6f 81       	ldd	r22, Y+7	; 0x07
    24c8:	78 85       	ldd	r23, Y+8	; 0x08
    24ca:	89 85       	ldd	r24, Y+9	; 0x09
    24cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    24ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24d2:	dc 01       	movw	r26, r24
    24d4:	cb 01       	movw	r24, r22
    24d6:	9e 83       	std	Y+6, r25	; 0x06
    24d8:	8d 83       	std	Y+5, r24	; 0x05
    24da:	8d 81       	ldd	r24, Y+5	; 0x05
    24dc:	9e 81       	ldd	r25, Y+6	; 0x06
    24de:	9a 83       	std	Y+2, r25	; 0x02
    24e0:	89 83       	std	Y+1, r24	; 0x01
    24e2:	89 81       	ldd	r24, Y+1	; 0x01
    24e4:	9a 81       	ldd	r25, Y+2	; 0x02
    24e6:	01 97       	sbiw	r24, 0x01	; 1
    24e8:	f1 f7       	brne	.-4      	; 0x24e6 <lockedMode+0xfe>
    24ea:	9a 83       	std	Y+2, r25	; 0x02
    24ec:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(10); /*Allow time for transmission */

	LCD_cleanScreen();
    24ee:	0e 94 c2 1c 	call	0x3984	; 0x3984 <LCD_cleanScreen>

	LCD_displayString("     Error !");
    24f2:	87 e3       	ldi	r24, 0x37	; 55
    24f4:	91 e0       	ldi	r25, 0x01	; 1
    24f6:	0e 94 3b 1c 	call	0x3876	; 0x3876 <LCD_displayString>

	LCD_displayStringRowColumn(1,0," You're Locked !");
    24fa:	24 e4       	ldi	r18, 0x44	; 68
    24fc:	31 e0       	ldi	r19, 0x01	; 1
    24fe:	81 e0       	ldi	r24, 0x01	; 1
    2500:	60 e0       	ldi	r22, 0x00	; 0
    2502:	a9 01       	movw	r20, r18
    2504:	0e 94 a9 1c 	call	0x3952	; 0x3952 <LCD_displayStringRowColumn>

	/*Loop on the previous screen till Control ECU sends a
	 * command feeding back it has exited locked mode*/
	while(Loop != UART_recieveByte());
    2508:	0e 94 7c 1e 	call	0x3cf8	; 0x3cf8 <UART_recieveByte>
    250c:	88 23       	and	r24, r24
    250e:	e1 f7       	brne	.-8      	; 0x2508 <lockedMode+0x120>

	/*Return back to Main Menu*/
	APP_nextState = MainMenu ;
    2510:	10 92 70 01 	sts	0x0170, r1
}
    2514:	2e 96       	adiw	r28, 0x0e	; 14
    2516:	0f b6       	in	r0, 0x3f	; 63
    2518:	f8 94       	cli
    251a:	de bf       	out	0x3e, r29	; 62
    251c:	0f be       	out	0x3f, r0	; 63
    251e:	cd bf       	out	0x3d, r28	; 61
    2520:	cf 91       	pop	r28
    2522:	df 91       	pop	r29
    2524:	08 95       	ret

00002526 <LCD_init>:
#include <util/delay.h>
#include "stdlib.h"
#include "common_macros.h" /* For GET_BIT Macro */

void LCD_init(void)
{
    2526:	df 93       	push	r29
    2528:	cf 93       	push	r28
    252a:	cd b7       	in	r28, 0x3d	; 61
    252c:	de b7       	in	r29, 0x3e	; 62
    252e:	2e 97       	sbiw	r28, 0x0e	; 14
    2530:	0f b6       	in	r0, 0x3f	; 63
    2532:	f8 94       	cli
    2534:	de bf       	out	0x3e, r29	; 62
    2536:	0f be       	out	0x3f, r0	; 63
    2538:	cd bf       	out	0x3d, r28	; 61
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT); /*RS pin = output*/
    253a:	80 e0       	ldi	r24, 0x00	; 0
    253c:	61 e0       	ldi	r22, 0x01	; 1
    253e:	41 e0       	ldi	r20, 0x01	; 1
    2540:	0e 94 46 1f 	call	0x3e8c	; 0x3e8c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT); /*Enable pin = output*/
    2544:	80 e0       	ldi	r24, 0x00	; 0
    2546:	62 e0       	ldi	r22, 0x02	; 2
    2548:	41 e0       	ldi	r20, 0x01	; 1
    254a:	0e 94 46 1f 	call	0x3e8c	; 0x3e8c <GPIO_setupPinDirection>
    254e:	80 e0       	ldi	r24, 0x00	; 0
    2550:	90 e0       	ldi	r25, 0x00	; 0
    2552:	a0 ea       	ldi	r26, 0xA0	; 160
    2554:	b1 e4       	ldi	r27, 0x41	; 65
    2556:	8b 87       	std	Y+11, r24	; 0x0b
    2558:	9c 87       	std	Y+12, r25	; 0x0c
    255a:	ad 87       	std	Y+13, r26	; 0x0d
    255c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    255e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2560:	7c 85       	ldd	r23, Y+12	; 0x0c
    2562:	8d 85       	ldd	r24, Y+13	; 0x0d
    2564:	9e 85       	ldd	r25, Y+14	; 0x0e
    2566:	20 e0       	ldi	r18, 0x00	; 0
    2568:	30 e0       	ldi	r19, 0x00	; 0
    256a:	4a ef       	ldi	r20, 0xFA	; 250
    256c:	54 e4       	ldi	r21, 0x44	; 68
    256e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2572:	dc 01       	movw	r26, r24
    2574:	cb 01       	movw	r24, r22
    2576:	8f 83       	std	Y+7, r24	; 0x07
    2578:	98 87       	std	Y+8, r25	; 0x08
    257a:	a9 87       	std	Y+9, r26	; 0x09
    257c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    257e:	6f 81       	ldd	r22, Y+7	; 0x07
    2580:	78 85       	ldd	r23, Y+8	; 0x08
    2582:	89 85       	ldd	r24, Y+9	; 0x09
    2584:	9a 85       	ldd	r25, Y+10	; 0x0a
    2586:	20 e0       	ldi	r18, 0x00	; 0
    2588:	30 e0       	ldi	r19, 0x00	; 0
    258a:	40 e8       	ldi	r20, 0x80	; 128
    258c:	5f e3       	ldi	r21, 0x3F	; 63
    258e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2592:	88 23       	and	r24, r24
    2594:	2c f4       	brge	.+10     	; 0x25a0 <LCD_init+0x7a>
		__ticks = 1;
    2596:	81 e0       	ldi	r24, 0x01	; 1
    2598:	90 e0       	ldi	r25, 0x00	; 0
    259a:	9e 83       	std	Y+6, r25	; 0x06
    259c:	8d 83       	std	Y+5, r24	; 0x05
    259e:	3f c0       	rjmp	.+126    	; 0x261e <LCD_init+0xf8>
	else if (__tmp > 65535)
    25a0:	6f 81       	ldd	r22, Y+7	; 0x07
    25a2:	78 85       	ldd	r23, Y+8	; 0x08
    25a4:	89 85       	ldd	r24, Y+9	; 0x09
    25a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    25a8:	20 e0       	ldi	r18, 0x00	; 0
    25aa:	3f ef       	ldi	r19, 0xFF	; 255
    25ac:	4f e7       	ldi	r20, 0x7F	; 127
    25ae:	57 e4       	ldi	r21, 0x47	; 71
    25b0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25b4:	18 16       	cp	r1, r24
    25b6:	4c f5       	brge	.+82     	; 0x260a <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    25ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    25bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    25be:	9e 85       	ldd	r25, Y+14	; 0x0e
    25c0:	20 e0       	ldi	r18, 0x00	; 0
    25c2:	30 e0       	ldi	r19, 0x00	; 0
    25c4:	40 e2       	ldi	r20, 0x20	; 32
    25c6:	51 e4       	ldi	r21, 0x41	; 65
    25c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25cc:	dc 01       	movw	r26, r24
    25ce:	cb 01       	movw	r24, r22
    25d0:	bc 01       	movw	r22, r24
    25d2:	cd 01       	movw	r24, r26
    25d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25d8:	dc 01       	movw	r26, r24
    25da:	cb 01       	movw	r24, r22
    25dc:	9e 83       	std	Y+6, r25	; 0x06
    25de:	8d 83       	std	Y+5, r24	; 0x05
    25e0:	0f c0       	rjmp	.+30     	; 0x2600 <LCD_init+0xda>
    25e2:	88 ec       	ldi	r24, 0xC8	; 200
    25e4:	90 e0       	ldi	r25, 0x00	; 0
    25e6:	9c 83       	std	Y+4, r25	; 0x04
    25e8:	8b 83       	std	Y+3, r24	; 0x03
    25ea:	8b 81       	ldd	r24, Y+3	; 0x03
    25ec:	9c 81       	ldd	r25, Y+4	; 0x04
    25ee:	01 97       	sbiw	r24, 0x01	; 1
    25f0:	f1 f7       	brne	.-4      	; 0x25ee <LCD_init+0xc8>
    25f2:	9c 83       	std	Y+4, r25	; 0x04
    25f4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25f6:	8d 81       	ldd	r24, Y+5	; 0x05
    25f8:	9e 81       	ldd	r25, Y+6	; 0x06
    25fa:	01 97       	sbiw	r24, 0x01	; 1
    25fc:	9e 83       	std	Y+6, r25	; 0x06
    25fe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2600:	8d 81       	ldd	r24, Y+5	; 0x05
    2602:	9e 81       	ldd	r25, Y+6	; 0x06
    2604:	00 97       	sbiw	r24, 0x00	; 0
    2606:	69 f7       	brne	.-38     	; 0x25e2 <LCD_init+0xbc>
    2608:	14 c0       	rjmp	.+40     	; 0x2632 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    260a:	6f 81       	ldd	r22, Y+7	; 0x07
    260c:	78 85       	ldd	r23, Y+8	; 0x08
    260e:	89 85       	ldd	r24, Y+9	; 0x09
    2610:	9a 85       	ldd	r25, Y+10	; 0x0a
    2612:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2616:	dc 01       	movw	r26, r24
    2618:	cb 01       	movw	r24, r22
    261a:	9e 83       	std	Y+6, r25	; 0x06
    261c:	8d 83       	std	Y+5, r24	; 0x05
    261e:	8d 81       	ldd	r24, Y+5	; 0x05
    2620:	9e 81       	ldd	r25, Y+6	; 0x06
    2622:	9a 83       	std	Y+2, r25	; 0x02
    2624:	89 83       	std	Y+1, r24	; 0x01
    2626:	89 81       	ldd	r24, Y+1	; 0x01
    2628:	9a 81       	ldd	r25, Y+2	; 0x02
    262a:	01 97       	sbiw	r24, 0x01	; 1
    262c:	f1 f7       	brne	.-4      	; 0x262a <LCD_init+0x104>
    262e:	9a 83       	std	Y+2, r25	; 0x02
    2630:	89 83       	std	Y+1, r24	; 0x01
	/*Set Data pins as output in case of 8-bits mode && all pins are on the same port*/
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PIN_OUTPUT);
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);

#elif (LCD_DATA_BITS_MODE==4)
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,PIN_OUTPUT);
    2632:	80 e0       	ldi	r24, 0x00	; 0
    2634:	63 e0       	ldi	r22, 0x03	; 3
    2636:	41 e0       	ldi	r20, 0x01	; 1
    2638:	0e 94 46 1f 	call	0x3e8c	; 0x3e8c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,PIN_OUTPUT);
    263c:	80 e0       	ldi	r24, 0x00	; 0
    263e:	64 e0       	ldi	r22, 0x04	; 4
    2640:	41 e0       	ldi	r20, 0x01	; 1
    2642:	0e 94 46 1f 	call	0x3e8c	; 0x3e8c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,PIN_OUTPUT);
    2646:	80 e0       	ldi	r24, 0x00	; 0
    2648:	65 e0       	ldi	r22, 0x05	; 5
    264a:	41 e0       	ldi	r20, 0x01	; 1
    264c:	0e 94 46 1f 	call	0x3e8c	; 0x3e8c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,PIN_OUTPUT);
    2650:	80 e0       	ldi	r24, 0x00	; 0
    2652:	66 e0       	ldi	r22, 0x06	; 6
    2654:	41 e0       	ldi	r20, 0x01	; 1
    2656:	0e 94 46 1f 	call	0x3e8c	; 0x3e8c <GPIO_setupPinDirection>

	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    265a:	83 e3       	ldi	r24, 0x33	; 51
    265c:	0e 94 45 13 	call	0x268a	; 0x268a <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    2660:	82 e3       	ldi	r24, 0x32	; 50
    2662:	0e 94 45 13 	call	0x268a	; 0x268a <LCD_sendCommand>

	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    2666:	88 e2       	ldi	r24, 0x28	; 40
    2668:	0e 94 45 13 	call	0x268a	; 0x268a <LCD_sendCommand>

	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
#endif
#endif

	LCD_sendCommand(LCD_CURSOR_OFF);
    266c:	8c e0       	ldi	r24, 0x0C	; 12
    266e:	0e 94 45 13 	call	0x268a	; 0x268a <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    2672:	81 e0       	ldi	r24, 0x01	; 1
    2674:	0e 94 45 13 	call	0x268a	; 0x268a <LCD_sendCommand>
}
    2678:	2e 96       	adiw	r28, 0x0e	; 14
    267a:	0f b6       	in	r0, 0x3f	; 63
    267c:	f8 94       	cli
    267e:	de bf       	out	0x3e, r29	; 62
    2680:	0f be       	out	0x3f, r0	; 63
    2682:	cd bf       	out	0x3d, r28	; 61
    2684:	cf 91       	pop	r28
    2686:	df 91       	pop	r29
    2688:	08 95       	ret

0000268a <LCD_sendCommand>:

/*Description :
 * Function that send required command to the LCD*/
/*Check Data-Sheet for sending command sequence*/
void LCD_sendCommand(uint8 command)
{
    268a:	0f 93       	push	r16
    268c:	1f 93       	push	r17
    268e:	df 93       	push	r29
    2690:	cf 93       	push	r28
    2692:	cd b7       	in	r28, 0x3d	; 61
    2694:	de b7       	in	r29, 0x3e	; 62
    2696:	c3 56       	subi	r28, 0x63	; 99
    2698:	d0 40       	sbci	r29, 0x00	; 0
    269a:	0f b6       	in	r0, 0x3f	; 63
    269c:	f8 94       	cli
    269e:	de bf       	out	0x3e, r29	; 62
    26a0:	0f be       	out	0x3f, r0	; 63
    26a2:	cd bf       	out	0x3d, r28	; 61
    26a4:	fe 01       	movw	r30, r28
    26a6:	ed 59       	subi	r30, 0x9D	; 157
    26a8:	ff 4f       	sbci	r31, 0xFF	; 255
    26aa:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW);
    26ac:	80 e0       	ldi	r24, 0x00	; 0
    26ae:	61 e0       	ldi	r22, 0x01	; 1
    26b0:	40 e0       	ldi	r20, 0x00	; 0
    26b2:	0e 94 31 20 	call	0x4062	; 0x4062 <GPIO_writePin>
    26b6:	fe 01       	movw	r30, r28
    26b8:	e1 5a       	subi	r30, 0xA1	; 161
    26ba:	ff 4f       	sbci	r31, 0xFF	; 255
    26bc:	80 e0       	ldi	r24, 0x00	; 0
    26be:	90 e0       	ldi	r25, 0x00	; 0
    26c0:	a0 e8       	ldi	r26, 0x80	; 128
    26c2:	bf e3       	ldi	r27, 0x3F	; 63
    26c4:	80 83       	st	Z, r24
    26c6:	91 83       	std	Z+1, r25	; 0x01
    26c8:	a2 83       	std	Z+2, r26	; 0x02
    26ca:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26cc:	8e 01       	movw	r16, r28
    26ce:	05 5a       	subi	r16, 0xA5	; 165
    26d0:	1f 4f       	sbci	r17, 0xFF	; 255
    26d2:	fe 01       	movw	r30, r28
    26d4:	e1 5a       	subi	r30, 0xA1	; 161
    26d6:	ff 4f       	sbci	r31, 0xFF	; 255
    26d8:	60 81       	ld	r22, Z
    26da:	71 81       	ldd	r23, Z+1	; 0x01
    26dc:	82 81       	ldd	r24, Z+2	; 0x02
    26de:	93 81       	ldd	r25, Z+3	; 0x03
    26e0:	20 e0       	ldi	r18, 0x00	; 0
    26e2:	30 e0       	ldi	r19, 0x00	; 0
    26e4:	4a ef       	ldi	r20, 0xFA	; 250
    26e6:	54 e4       	ldi	r21, 0x44	; 68
    26e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26ec:	dc 01       	movw	r26, r24
    26ee:	cb 01       	movw	r24, r22
    26f0:	f8 01       	movw	r30, r16
    26f2:	80 83       	st	Z, r24
    26f4:	91 83       	std	Z+1, r25	; 0x01
    26f6:	a2 83       	std	Z+2, r26	; 0x02
    26f8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    26fa:	fe 01       	movw	r30, r28
    26fc:	e5 5a       	subi	r30, 0xA5	; 165
    26fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2700:	60 81       	ld	r22, Z
    2702:	71 81       	ldd	r23, Z+1	; 0x01
    2704:	82 81       	ldd	r24, Z+2	; 0x02
    2706:	93 81       	ldd	r25, Z+3	; 0x03
    2708:	20 e0       	ldi	r18, 0x00	; 0
    270a:	30 e0       	ldi	r19, 0x00	; 0
    270c:	40 e8       	ldi	r20, 0x80	; 128
    270e:	5f e3       	ldi	r21, 0x3F	; 63
    2710:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2714:	88 23       	and	r24, r24
    2716:	44 f4       	brge	.+16     	; 0x2728 <LCD_sendCommand+0x9e>
		__ticks = 1;
    2718:	fe 01       	movw	r30, r28
    271a:	e7 5a       	subi	r30, 0xA7	; 167
    271c:	ff 4f       	sbci	r31, 0xFF	; 255
    271e:	81 e0       	ldi	r24, 0x01	; 1
    2720:	90 e0       	ldi	r25, 0x00	; 0
    2722:	91 83       	std	Z+1, r25	; 0x01
    2724:	80 83       	st	Z, r24
    2726:	64 c0       	rjmp	.+200    	; 0x27f0 <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    2728:	fe 01       	movw	r30, r28
    272a:	e5 5a       	subi	r30, 0xA5	; 165
    272c:	ff 4f       	sbci	r31, 0xFF	; 255
    272e:	60 81       	ld	r22, Z
    2730:	71 81       	ldd	r23, Z+1	; 0x01
    2732:	82 81       	ldd	r24, Z+2	; 0x02
    2734:	93 81       	ldd	r25, Z+3	; 0x03
    2736:	20 e0       	ldi	r18, 0x00	; 0
    2738:	3f ef       	ldi	r19, 0xFF	; 255
    273a:	4f e7       	ldi	r20, 0x7F	; 127
    273c:	57 e4       	ldi	r21, 0x47	; 71
    273e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2742:	18 16       	cp	r1, r24
    2744:	0c f0       	brlt	.+2      	; 0x2748 <LCD_sendCommand+0xbe>
    2746:	43 c0       	rjmp	.+134    	; 0x27ce <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2748:	fe 01       	movw	r30, r28
    274a:	e1 5a       	subi	r30, 0xA1	; 161
    274c:	ff 4f       	sbci	r31, 0xFF	; 255
    274e:	60 81       	ld	r22, Z
    2750:	71 81       	ldd	r23, Z+1	; 0x01
    2752:	82 81       	ldd	r24, Z+2	; 0x02
    2754:	93 81       	ldd	r25, Z+3	; 0x03
    2756:	20 e0       	ldi	r18, 0x00	; 0
    2758:	30 e0       	ldi	r19, 0x00	; 0
    275a:	40 e2       	ldi	r20, 0x20	; 32
    275c:	51 e4       	ldi	r21, 0x41	; 65
    275e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2762:	dc 01       	movw	r26, r24
    2764:	cb 01       	movw	r24, r22
    2766:	8e 01       	movw	r16, r28
    2768:	07 5a       	subi	r16, 0xA7	; 167
    276a:	1f 4f       	sbci	r17, 0xFF	; 255
    276c:	bc 01       	movw	r22, r24
    276e:	cd 01       	movw	r24, r26
    2770:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2774:	dc 01       	movw	r26, r24
    2776:	cb 01       	movw	r24, r22
    2778:	f8 01       	movw	r30, r16
    277a:	91 83       	std	Z+1, r25	; 0x01
    277c:	80 83       	st	Z, r24
    277e:	1f c0       	rjmp	.+62     	; 0x27be <LCD_sendCommand+0x134>
    2780:	fe 01       	movw	r30, r28
    2782:	e9 5a       	subi	r30, 0xA9	; 169
    2784:	ff 4f       	sbci	r31, 0xFF	; 255
    2786:	88 ec       	ldi	r24, 0xC8	; 200
    2788:	90 e0       	ldi	r25, 0x00	; 0
    278a:	91 83       	std	Z+1, r25	; 0x01
    278c:	80 83       	st	Z, r24
    278e:	fe 01       	movw	r30, r28
    2790:	e9 5a       	subi	r30, 0xA9	; 169
    2792:	ff 4f       	sbci	r31, 0xFF	; 255
    2794:	80 81       	ld	r24, Z
    2796:	91 81       	ldd	r25, Z+1	; 0x01
    2798:	01 97       	sbiw	r24, 0x01	; 1
    279a:	f1 f7       	brne	.-4      	; 0x2798 <LCD_sendCommand+0x10e>
    279c:	fe 01       	movw	r30, r28
    279e:	e9 5a       	subi	r30, 0xA9	; 169
    27a0:	ff 4f       	sbci	r31, 0xFF	; 255
    27a2:	91 83       	std	Z+1, r25	; 0x01
    27a4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27a6:	de 01       	movw	r26, r28
    27a8:	a7 5a       	subi	r26, 0xA7	; 167
    27aa:	bf 4f       	sbci	r27, 0xFF	; 255
    27ac:	fe 01       	movw	r30, r28
    27ae:	e7 5a       	subi	r30, 0xA7	; 167
    27b0:	ff 4f       	sbci	r31, 0xFF	; 255
    27b2:	80 81       	ld	r24, Z
    27b4:	91 81       	ldd	r25, Z+1	; 0x01
    27b6:	01 97       	sbiw	r24, 0x01	; 1
    27b8:	11 96       	adiw	r26, 0x01	; 1
    27ba:	9c 93       	st	X, r25
    27bc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27be:	fe 01       	movw	r30, r28
    27c0:	e7 5a       	subi	r30, 0xA7	; 167
    27c2:	ff 4f       	sbci	r31, 0xFF	; 255
    27c4:	80 81       	ld	r24, Z
    27c6:	91 81       	ldd	r25, Z+1	; 0x01
    27c8:	00 97       	sbiw	r24, 0x00	; 0
    27ca:	d1 f6       	brne	.-76     	; 0x2780 <LCD_sendCommand+0xf6>
    27cc:	27 c0       	rjmp	.+78     	; 0x281c <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27ce:	8e 01       	movw	r16, r28
    27d0:	07 5a       	subi	r16, 0xA7	; 167
    27d2:	1f 4f       	sbci	r17, 0xFF	; 255
    27d4:	fe 01       	movw	r30, r28
    27d6:	e5 5a       	subi	r30, 0xA5	; 165
    27d8:	ff 4f       	sbci	r31, 0xFF	; 255
    27da:	60 81       	ld	r22, Z
    27dc:	71 81       	ldd	r23, Z+1	; 0x01
    27de:	82 81       	ldd	r24, Z+2	; 0x02
    27e0:	93 81       	ldd	r25, Z+3	; 0x03
    27e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27e6:	dc 01       	movw	r26, r24
    27e8:	cb 01       	movw	r24, r22
    27ea:	f8 01       	movw	r30, r16
    27ec:	91 83       	std	Z+1, r25	; 0x01
    27ee:	80 83       	st	Z, r24
    27f0:	de 01       	movw	r26, r28
    27f2:	ab 5a       	subi	r26, 0xAB	; 171
    27f4:	bf 4f       	sbci	r27, 0xFF	; 255
    27f6:	fe 01       	movw	r30, r28
    27f8:	e7 5a       	subi	r30, 0xA7	; 167
    27fa:	ff 4f       	sbci	r31, 0xFF	; 255
    27fc:	80 81       	ld	r24, Z
    27fe:	91 81       	ldd	r25, Z+1	; 0x01
    2800:	8d 93       	st	X+, r24
    2802:	9c 93       	st	X, r25
    2804:	fe 01       	movw	r30, r28
    2806:	eb 5a       	subi	r30, 0xAB	; 171
    2808:	ff 4f       	sbci	r31, 0xFF	; 255
    280a:	80 81       	ld	r24, Z
    280c:	91 81       	ldd	r25, Z+1	; 0x01
    280e:	01 97       	sbiw	r24, 0x01	; 1
    2810:	f1 f7       	brne	.-4      	; 0x280e <LCD_sendCommand+0x184>
    2812:	fe 01       	movw	r30, r28
    2814:	eb 5a       	subi	r30, 0xAB	; 171
    2816:	ff 4f       	sbci	r31, 0xFF	; 255
    2818:	91 83       	std	Z+1, r25	; 0x01
    281a:	80 83       	st	Z, r24
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH);
    281c:	80 e0       	ldi	r24, 0x00	; 0
    281e:	62 e0       	ldi	r22, 0x02	; 2
    2820:	41 e0       	ldi	r20, 0x01	; 1
    2822:	0e 94 31 20 	call	0x4062	; 0x4062 <GPIO_writePin>
    2826:	fe 01       	movw	r30, r28
    2828:	ef 5a       	subi	r30, 0xAF	; 175
    282a:	ff 4f       	sbci	r31, 0xFF	; 255
    282c:	80 e0       	ldi	r24, 0x00	; 0
    282e:	90 e0       	ldi	r25, 0x00	; 0
    2830:	a0 e8       	ldi	r26, 0x80	; 128
    2832:	bf e3       	ldi	r27, 0x3F	; 63
    2834:	80 83       	st	Z, r24
    2836:	91 83       	std	Z+1, r25	; 0x01
    2838:	a2 83       	std	Z+2, r26	; 0x02
    283a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    283c:	8e 01       	movw	r16, r28
    283e:	03 5b       	subi	r16, 0xB3	; 179
    2840:	1f 4f       	sbci	r17, 0xFF	; 255
    2842:	fe 01       	movw	r30, r28
    2844:	ef 5a       	subi	r30, 0xAF	; 175
    2846:	ff 4f       	sbci	r31, 0xFF	; 255
    2848:	60 81       	ld	r22, Z
    284a:	71 81       	ldd	r23, Z+1	; 0x01
    284c:	82 81       	ldd	r24, Z+2	; 0x02
    284e:	93 81       	ldd	r25, Z+3	; 0x03
    2850:	20 e0       	ldi	r18, 0x00	; 0
    2852:	30 e0       	ldi	r19, 0x00	; 0
    2854:	4a ef       	ldi	r20, 0xFA	; 250
    2856:	54 e4       	ldi	r21, 0x44	; 68
    2858:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    285c:	dc 01       	movw	r26, r24
    285e:	cb 01       	movw	r24, r22
    2860:	f8 01       	movw	r30, r16
    2862:	80 83       	st	Z, r24
    2864:	91 83       	std	Z+1, r25	; 0x01
    2866:	a2 83       	std	Z+2, r26	; 0x02
    2868:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    286a:	fe 01       	movw	r30, r28
    286c:	e3 5b       	subi	r30, 0xB3	; 179
    286e:	ff 4f       	sbci	r31, 0xFF	; 255
    2870:	60 81       	ld	r22, Z
    2872:	71 81       	ldd	r23, Z+1	; 0x01
    2874:	82 81       	ldd	r24, Z+2	; 0x02
    2876:	93 81       	ldd	r25, Z+3	; 0x03
    2878:	20 e0       	ldi	r18, 0x00	; 0
    287a:	30 e0       	ldi	r19, 0x00	; 0
    287c:	40 e8       	ldi	r20, 0x80	; 128
    287e:	5f e3       	ldi	r21, 0x3F	; 63
    2880:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2884:	88 23       	and	r24, r24
    2886:	44 f4       	brge	.+16     	; 0x2898 <LCD_sendCommand+0x20e>
		__ticks = 1;
    2888:	fe 01       	movw	r30, r28
    288a:	e5 5b       	subi	r30, 0xB5	; 181
    288c:	ff 4f       	sbci	r31, 0xFF	; 255
    288e:	81 e0       	ldi	r24, 0x01	; 1
    2890:	90 e0       	ldi	r25, 0x00	; 0
    2892:	91 83       	std	Z+1, r25	; 0x01
    2894:	80 83       	st	Z, r24
    2896:	64 c0       	rjmp	.+200    	; 0x2960 <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    2898:	fe 01       	movw	r30, r28
    289a:	e3 5b       	subi	r30, 0xB3	; 179
    289c:	ff 4f       	sbci	r31, 0xFF	; 255
    289e:	60 81       	ld	r22, Z
    28a0:	71 81       	ldd	r23, Z+1	; 0x01
    28a2:	82 81       	ldd	r24, Z+2	; 0x02
    28a4:	93 81       	ldd	r25, Z+3	; 0x03
    28a6:	20 e0       	ldi	r18, 0x00	; 0
    28a8:	3f ef       	ldi	r19, 0xFF	; 255
    28aa:	4f e7       	ldi	r20, 0x7F	; 127
    28ac:	57 e4       	ldi	r21, 0x47	; 71
    28ae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28b2:	18 16       	cp	r1, r24
    28b4:	0c f0       	brlt	.+2      	; 0x28b8 <LCD_sendCommand+0x22e>
    28b6:	43 c0       	rjmp	.+134    	; 0x293e <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28b8:	fe 01       	movw	r30, r28
    28ba:	ef 5a       	subi	r30, 0xAF	; 175
    28bc:	ff 4f       	sbci	r31, 0xFF	; 255
    28be:	60 81       	ld	r22, Z
    28c0:	71 81       	ldd	r23, Z+1	; 0x01
    28c2:	82 81       	ldd	r24, Z+2	; 0x02
    28c4:	93 81       	ldd	r25, Z+3	; 0x03
    28c6:	20 e0       	ldi	r18, 0x00	; 0
    28c8:	30 e0       	ldi	r19, 0x00	; 0
    28ca:	40 e2       	ldi	r20, 0x20	; 32
    28cc:	51 e4       	ldi	r21, 0x41	; 65
    28ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28d2:	dc 01       	movw	r26, r24
    28d4:	cb 01       	movw	r24, r22
    28d6:	8e 01       	movw	r16, r28
    28d8:	05 5b       	subi	r16, 0xB5	; 181
    28da:	1f 4f       	sbci	r17, 0xFF	; 255
    28dc:	bc 01       	movw	r22, r24
    28de:	cd 01       	movw	r24, r26
    28e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28e4:	dc 01       	movw	r26, r24
    28e6:	cb 01       	movw	r24, r22
    28e8:	f8 01       	movw	r30, r16
    28ea:	91 83       	std	Z+1, r25	; 0x01
    28ec:	80 83       	st	Z, r24
    28ee:	1f c0       	rjmp	.+62     	; 0x292e <LCD_sendCommand+0x2a4>
    28f0:	fe 01       	movw	r30, r28
    28f2:	e7 5b       	subi	r30, 0xB7	; 183
    28f4:	ff 4f       	sbci	r31, 0xFF	; 255
    28f6:	88 ec       	ldi	r24, 0xC8	; 200
    28f8:	90 e0       	ldi	r25, 0x00	; 0
    28fa:	91 83       	std	Z+1, r25	; 0x01
    28fc:	80 83       	st	Z, r24
    28fe:	fe 01       	movw	r30, r28
    2900:	e7 5b       	subi	r30, 0xB7	; 183
    2902:	ff 4f       	sbci	r31, 0xFF	; 255
    2904:	80 81       	ld	r24, Z
    2906:	91 81       	ldd	r25, Z+1	; 0x01
    2908:	01 97       	sbiw	r24, 0x01	; 1
    290a:	f1 f7       	brne	.-4      	; 0x2908 <LCD_sendCommand+0x27e>
    290c:	fe 01       	movw	r30, r28
    290e:	e7 5b       	subi	r30, 0xB7	; 183
    2910:	ff 4f       	sbci	r31, 0xFF	; 255
    2912:	91 83       	std	Z+1, r25	; 0x01
    2914:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2916:	de 01       	movw	r26, r28
    2918:	a5 5b       	subi	r26, 0xB5	; 181
    291a:	bf 4f       	sbci	r27, 0xFF	; 255
    291c:	fe 01       	movw	r30, r28
    291e:	e5 5b       	subi	r30, 0xB5	; 181
    2920:	ff 4f       	sbci	r31, 0xFF	; 255
    2922:	80 81       	ld	r24, Z
    2924:	91 81       	ldd	r25, Z+1	; 0x01
    2926:	01 97       	sbiw	r24, 0x01	; 1
    2928:	11 96       	adiw	r26, 0x01	; 1
    292a:	9c 93       	st	X, r25
    292c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    292e:	fe 01       	movw	r30, r28
    2930:	e5 5b       	subi	r30, 0xB5	; 181
    2932:	ff 4f       	sbci	r31, 0xFF	; 255
    2934:	80 81       	ld	r24, Z
    2936:	91 81       	ldd	r25, Z+1	; 0x01
    2938:	00 97       	sbiw	r24, 0x00	; 0
    293a:	d1 f6       	brne	.-76     	; 0x28f0 <LCD_sendCommand+0x266>
    293c:	27 c0       	rjmp	.+78     	; 0x298c <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    293e:	8e 01       	movw	r16, r28
    2940:	05 5b       	subi	r16, 0xB5	; 181
    2942:	1f 4f       	sbci	r17, 0xFF	; 255
    2944:	fe 01       	movw	r30, r28
    2946:	e3 5b       	subi	r30, 0xB3	; 179
    2948:	ff 4f       	sbci	r31, 0xFF	; 255
    294a:	60 81       	ld	r22, Z
    294c:	71 81       	ldd	r23, Z+1	; 0x01
    294e:	82 81       	ldd	r24, Z+2	; 0x02
    2950:	93 81       	ldd	r25, Z+3	; 0x03
    2952:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2956:	dc 01       	movw	r26, r24
    2958:	cb 01       	movw	r24, r22
    295a:	f8 01       	movw	r30, r16
    295c:	91 83       	std	Z+1, r25	; 0x01
    295e:	80 83       	st	Z, r24
    2960:	de 01       	movw	r26, r28
    2962:	a9 5b       	subi	r26, 0xB9	; 185
    2964:	bf 4f       	sbci	r27, 0xFF	; 255
    2966:	fe 01       	movw	r30, r28
    2968:	e5 5b       	subi	r30, 0xB5	; 181
    296a:	ff 4f       	sbci	r31, 0xFF	; 255
    296c:	80 81       	ld	r24, Z
    296e:	91 81       	ldd	r25, Z+1	; 0x01
    2970:	8d 93       	st	X+, r24
    2972:	9c 93       	st	X, r25
    2974:	fe 01       	movw	r30, r28
    2976:	e9 5b       	subi	r30, 0xB9	; 185
    2978:	ff 4f       	sbci	r31, 0xFF	; 255
    297a:	80 81       	ld	r24, Z
    297c:	91 81       	ldd	r25, Z+1	; 0x01
    297e:	01 97       	sbiw	r24, 0x01	; 1
    2980:	f1 f7       	brne	.-4      	; 0x297e <LCD_sendCommand+0x2f4>
    2982:	fe 01       	movw	r30, r28
    2984:	e9 5b       	subi	r30, 0xB9	; 185
    2986:	ff 4f       	sbci	r31, 0xFF	; 255
    2988:	91 83       	std	Z+1, r25	; 0x01
    298a:	80 83       	st	Z, r24
	GPIO_writePort(LCD_DATA_PORT_ID,command);
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW);
	_delay_ms(1);
#elif (LCD_DATA_BITS_MODE==4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,4));
    298c:	fe 01       	movw	r30, r28
    298e:	ed 59       	subi	r30, 0x9D	; 157
    2990:	ff 4f       	sbci	r31, 0xFF	; 255
    2992:	80 81       	ld	r24, Z
    2994:	88 2f       	mov	r24, r24
    2996:	90 e0       	ldi	r25, 0x00	; 0
    2998:	80 71       	andi	r24, 0x10	; 16
    299a:	90 70       	andi	r25, 0x00	; 0
    299c:	95 95       	asr	r25
    299e:	87 95       	ror	r24
    29a0:	95 95       	asr	r25
    29a2:	87 95       	ror	r24
    29a4:	95 95       	asr	r25
    29a6:	87 95       	ror	r24
    29a8:	95 95       	asr	r25
    29aa:	87 95       	ror	r24
    29ac:	98 2f       	mov	r25, r24
    29ae:	80 e0       	ldi	r24, 0x00	; 0
    29b0:	63 e0       	ldi	r22, 0x03	; 3
    29b2:	49 2f       	mov	r20, r25
    29b4:	0e 94 31 20 	call	0x4062	; 0x4062 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,5));
    29b8:	fe 01       	movw	r30, r28
    29ba:	ed 59       	subi	r30, 0x9D	; 157
    29bc:	ff 4f       	sbci	r31, 0xFF	; 255
    29be:	80 81       	ld	r24, Z
    29c0:	88 2f       	mov	r24, r24
    29c2:	90 e0       	ldi	r25, 0x00	; 0
    29c4:	80 72       	andi	r24, 0x20	; 32
    29c6:	90 70       	andi	r25, 0x00	; 0
    29c8:	95 95       	asr	r25
    29ca:	87 95       	ror	r24
    29cc:	95 95       	asr	r25
    29ce:	87 95       	ror	r24
    29d0:	95 95       	asr	r25
    29d2:	87 95       	ror	r24
    29d4:	95 95       	asr	r25
    29d6:	87 95       	ror	r24
    29d8:	95 95       	asr	r25
    29da:	87 95       	ror	r24
    29dc:	98 2f       	mov	r25, r24
    29de:	80 e0       	ldi	r24, 0x00	; 0
    29e0:	64 e0       	ldi	r22, 0x04	; 4
    29e2:	49 2f       	mov	r20, r25
    29e4:	0e 94 31 20 	call	0x4062	; 0x4062 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,6));
    29e8:	fe 01       	movw	r30, r28
    29ea:	ed 59       	subi	r30, 0x9D	; 157
    29ec:	ff 4f       	sbci	r31, 0xFF	; 255
    29ee:	80 81       	ld	r24, Z
    29f0:	88 2f       	mov	r24, r24
    29f2:	90 e0       	ldi	r25, 0x00	; 0
    29f4:	80 74       	andi	r24, 0x40	; 64
    29f6:	90 70       	andi	r25, 0x00	; 0
    29f8:	08 2e       	mov	r0, r24
    29fa:	89 2f       	mov	r24, r25
    29fc:	00 0c       	add	r0, r0
    29fe:	88 1f       	adc	r24, r24
    2a00:	99 0b       	sbc	r25, r25
    2a02:	00 0c       	add	r0, r0
    2a04:	88 1f       	adc	r24, r24
    2a06:	99 1f       	adc	r25, r25
    2a08:	98 2f       	mov	r25, r24
    2a0a:	80 e0       	ldi	r24, 0x00	; 0
    2a0c:	65 e0       	ldi	r22, 0x05	; 5
    2a0e:	49 2f       	mov	r20, r25
    2a10:	0e 94 31 20 	call	0x4062	; 0x4062 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,7));
    2a14:	fe 01       	movw	r30, r28
    2a16:	ed 59       	subi	r30, 0x9D	; 157
    2a18:	ff 4f       	sbci	r31, 0xFF	; 255
    2a1a:	80 81       	ld	r24, Z
    2a1c:	98 2f       	mov	r25, r24
    2a1e:	99 1f       	adc	r25, r25
    2a20:	99 27       	eor	r25, r25
    2a22:	99 1f       	adc	r25, r25
    2a24:	80 e0       	ldi	r24, 0x00	; 0
    2a26:	66 e0       	ldi	r22, 0x06	; 6
    2a28:	49 2f       	mov	r20, r25
    2a2a:	0e 94 31 20 	call	0x4062	; 0x4062 <GPIO_writePin>
    2a2e:	fe 01       	movw	r30, r28
    2a30:	ed 5b       	subi	r30, 0xBD	; 189
    2a32:	ff 4f       	sbci	r31, 0xFF	; 255
    2a34:	80 e0       	ldi	r24, 0x00	; 0
    2a36:	90 e0       	ldi	r25, 0x00	; 0
    2a38:	a0 e8       	ldi	r26, 0x80	; 128
    2a3a:	bf e3       	ldi	r27, 0x3F	; 63
    2a3c:	80 83       	st	Z, r24
    2a3e:	91 83       	std	Z+1, r25	; 0x01
    2a40:	a2 83       	std	Z+2, r26	; 0x02
    2a42:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a44:	8e 01       	movw	r16, r28
    2a46:	01 5c       	subi	r16, 0xC1	; 193
    2a48:	1f 4f       	sbci	r17, 0xFF	; 255
    2a4a:	fe 01       	movw	r30, r28
    2a4c:	ed 5b       	subi	r30, 0xBD	; 189
    2a4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a50:	60 81       	ld	r22, Z
    2a52:	71 81       	ldd	r23, Z+1	; 0x01
    2a54:	82 81       	ldd	r24, Z+2	; 0x02
    2a56:	93 81       	ldd	r25, Z+3	; 0x03
    2a58:	20 e0       	ldi	r18, 0x00	; 0
    2a5a:	30 e0       	ldi	r19, 0x00	; 0
    2a5c:	4a ef       	ldi	r20, 0xFA	; 250
    2a5e:	54 e4       	ldi	r21, 0x44	; 68
    2a60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a64:	dc 01       	movw	r26, r24
    2a66:	cb 01       	movw	r24, r22
    2a68:	f8 01       	movw	r30, r16
    2a6a:	80 83       	st	Z, r24
    2a6c:	91 83       	std	Z+1, r25	; 0x01
    2a6e:	a2 83       	std	Z+2, r26	; 0x02
    2a70:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2a72:	fe 01       	movw	r30, r28
    2a74:	ff 96       	adiw	r30, 0x3f	; 63
    2a76:	60 81       	ld	r22, Z
    2a78:	71 81       	ldd	r23, Z+1	; 0x01
    2a7a:	82 81       	ldd	r24, Z+2	; 0x02
    2a7c:	93 81       	ldd	r25, Z+3	; 0x03
    2a7e:	20 e0       	ldi	r18, 0x00	; 0
    2a80:	30 e0       	ldi	r19, 0x00	; 0
    2a82:	40 e8       	ldi	r20, 0x80	; 128
    2a84:	5f e3       	ldi	r21, 0x3F	; 63
    2a86:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a8a:	88 23       	and	r24, r24
    2a8c:	2c f4       	brge	.+10     	; 0x2a98 <LCD_sendCommand+0x40e>
		__ticks = 1;
    2a8e:	81 e0       	ldi	r24, 0x01	; 1
    2a90:	90 e0       	ldi	r25, 0x00	; 0
    2a92:	9e af       	std	Y+62, r25	; 0x3e
    2a94:	8d af       	std	Y+61, r24	; 0x3d
    2a96:	46 c0       	rjmp	.+140    	; 0x2b24 <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    2a98:	fe 01       	movw	r30, r28
    2a9a:	ff 96       	adiw	r30, 0x3f	; 63
    2a9c:	60 81       	ld	r22, Z
    2a9e:	71 81       	ldd	r23, Z+1	; 0x01
    2aa0:	82 81       	ldd	r24, Z+2	; 0x02
    2aa2:	93 81       	ldd	r25, Z+3	; 0x03
    2aa4:	20 e0       	ldi	r18, 0x00	; 0
    2aa6:	3f ef       	ldi	r19, 0xFF	; 255
    2aa8:	4f e7       	ldi	r20, 0x7F	; 127
    2aaa:	57 e4       	ldi	r21, 0x47	; 71
    2aac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ab0:	18 16       	cp	r1, r24
    2ab2:	64 f5       	brge	.+88     	; 0x2b0c <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ab4:	fe 01       	movw	r30, r28
    2ab6:	ed 5b       	subi	r30, 0xBD	; 189
    2ab8:	ff 4f       	sbci	r31, 0xFF	; 255
    2aba:	60 81       	ld	r22, Z
    2abc:	71 81       	ldd	r23, Z+1	; 0x01
    2abe:	82 81       	ldd	r24, Z+2	; 0x02
    2ac0:	93 81       	ldd	r25, Z+3	; 0x03
    2ac2:	20 e0       	ldi	r18, 0x00	; 0
    2ac4:	30 e0       	ldi	r19, 0x00	; 0
    2ac6:	40 e2       	ldi	r20, 0x20	; 32
    2ac8:	51 e4       	ldi	r21, 0x41	; 65
    2aca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ace:	dc 01       	movw	r26, r24
    2ad0:	cb 01       	movw	r24, r22
    2ad2:	bc 01       	movw	r22, r24
    2ad4:	cd 01       	movw	r24, r26
    2ad6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ada:	dc 01       	movw	r26, r24
    2adc:	cb 01       	movw	r24, r22
    2ade:	9e af       	std	Y+62, r25	; 0x3e
    2ae0:	8d af       	std	Y+61, r24	; 0x3d
    2ae2:	0f c0       	rjmp	.+30     	; 0x2b02 <LCD_sendCommand+0x478>
    2ae4:	88 ec       	ldi	r24, 0xC8	; 200
    2ae6:	90 e0       	ldi	r25, 0x00	; 0
    2ae8:	9c af       	std	Y+60, r25	; 0x3c
    2aea:	8b af       	std	Y+59, r24	; 0x3b
    2aec:	8b ad       	ldd	r24, Y+59	; 0x3b
    2aee:	9c ad       	ldd	r25, Y+60	; 0x3c
    2af0:	01 97       	sbiw	r24, 0x01	; 1
    2af2:	f1 f7       	brne	.-4      	; 0x2af0 <LCD_sendCommand+0x466>
    2af4:	9c af       	std	Y+60, r25	; 0x3c
    2af6:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2af8:	8d ad       	ldd	r24, Y+61	; 0x3d
    2afa:	9e ad       	ldd	r25, Y+62	; 0x3e
    2afc:	01 97       	sbiw	r24, 0x01	; 1
    2afe:	9e af       	std	Y+62, r25	; 0x3e
    2b00:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b02:	8d ad       	ldd	r24, Y+61	; 0x3d
    2b04:	9e ad       	ldd	r25, Y+62	; 0x3e
    2b06:	00 97       	sbiw	r24, 0x00	; 0
    2b08:	69 f7       	brne	.-38     	; 0x2ae4 <LCD_sendCommand+0x45a>
    2b0a:	16 c0       	rjmp	.+44     	; 0x2b38 <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b0c:	fe 01       	movw	r30, r28
    2b0e:	ff 96       	adiw	r30, 0x3f	; 63
    2b10:	60 81       	ld	r22, Z
    2b12:	71 81       	ldd	r23, Z+1	; 0x01
    2b14:	82 81       	ldd	r24, Z+2	; 0x02
    2b16:	93 81       	ldd	r25, Z+3	; 0x03
    2b18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b1c:	dc 01       	movw	r26, r24
    2b1e:	cb 01       	movw	r24, r22
    2b20:	9e af       	std	Y+62, r25	; 0x3e
    2b22:	8d af       	std	Y+61, r24	; 0x3d
    2b24:	8d ad       	ldd	r24, Y+61	; 0x3d
    2b26:	9e ad       	ldd	r25, Y+62	; 0x3e
    2b28:	9a af       	std	Y+58, r25	; 0x3a
    2b2a:	89 af       	std	Y+57, r24	; 0x39
    2b2c:	89 ad       	ldd	r24, Y+57	; 0x39
    2b2e:	9a ad       	ldd	r25, Y+58	; 0x3a
    2b30:	01 97       	sbiw	r24, 0x01	; 1
    2b32:	f1 f7       	brne	.-4      	; 0x2b30 <LCD_sendCommand+0x4a6>
    2b34:	9a af       	std	Y+58, r25	; 0x3a
    2b36:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW);
    2b38:	80 e0       	ldi	r24, 0x00	; 0
    2b3a:	62 e0       	ldi	r22, 0x02	; 2
    2b3c:	40 e0       	ldi	r20, 0x00	; 0
    2b3e:	0e 94 31 20 	call	0x4062	; 0x4062 <GPIO_writePin>
    2b42:	80 e0       	ldi	r24, 0x00	; 0
    2b44:	90 e0       	ldi	r25, 0x00	; 0
    2b46:	a0 e8       	ldi	r26, 0x80	; 128
    2b48:	bf e3       	ldi	r27, 0x3F	; 63
    2b4a:	8d ab       	std	Y+53, r24	; 0x35
    2b4c:	9e ab       	std	Y+54, r25	; 0x36
    2b4e:	af ab       	std	Y+55, r26	; 0x37
    2b50:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b52:	6d a9       	ldd	r22, Y+53	; 0x35
    2b54:	7e a9       	ldd	r23, Y+54	; 0x36
    2b56:	8f a9       	ldd	r24, Y+55	; 0x37
    2b58:	98 ad       	ldd	r25, Y+56	; 0x38
    2b5a:	20 e0       	ldi	r18, 0x00	; 0
    2b5c:	30 e0       	ldi	r19, 0x00	; 0
    2b5e:	4a ef       	ldi	r20, 0xFA	; 250
    2b60:	54 e4       	ldi	r21, 0x44	; 68
    2b62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b66:	dc 01       	movw	r26, r24
    2b68:	cb 01       	movw	r24, r22
    2b6a:	89 ab       	std	Y+49, r24	; 0x31
    2b6c:	9a ab       	std	Y+50, r25	; 0x32
    2b6e:	ab ab       	std	Y+51, r26	; 0x33
    2b70:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2b72:	69 a9       	ldd	r22, Y+49	; 0x31
    2b74:	7a a9       	ldd	r23, Y+50	; 0x32
    2b76:	8b a9       	ldd	r24, Y+51	; 0x33
    2b78:	9c a9       	ldd	r25, Y+52	; 0x34
    2b7a:	20 e0       	ldi	r18, 0x00	; 0
    2b7c:	30 e0       	ldi	r19, 0x00	; 0
    2b7e:	40 e8       	ldi	r20, 0x80	; 128
    2b80:	5f e3       	ldi	r21, 0x3F	; 63
    2b82:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b86:	88 23       	and	r24, r24
    2b88:	2c f4       	brge	.+10     	; 0x2b94 <LCD_sendCommand+0x50a>
		__ticks = 1;
    2b8a:	81 e0       	ldi	r24, 0x01	; 1
    2b8c:	90 e0       	ldi	r25, 0x00	; 0
    2b8e:	98 ab       	std	Y+48, r25	; 0x30
    2b90:	8f a7       	std	Y+47, r24	; 0x2f
    2b92:	3f c0       	rjmp	.+126    	; 0x2c12 <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    2b94:	69 a9       	ldd	r22, Y+49	; 0x31
    2b96:	7a a9       	ldd	r23, Y+50	; 0x32
    2b98:	8b a9       	ldd	r24, Y+51	; 0x33
    2b9a:	9c a9       	ldd	r25, Y+52	; 0x34
    2b9c:	20 e0       	ldi	r18, 0x00	; 0
    2b9e:	3f ef       	ldi	r19, 0xFF	; 255
    2ba0:	4f e7       	ldi	r20, 0x7F	; 127
    2ba2:	57 e4       	ldi	r21, 0x47	; 71
    2ba4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ba8:	18 16       	cp	r1, r24
    2baa:	4c f5       	brge	.+82     	; 0x2bfe <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bac:	6d a9       	ldd	r22, Y+53	; 0x35
    2bae:	7e a9       	ldd	r23, Y+54	; 0x36
    2bb0:	8f a9       	ldd	r24, Y+55	; 0x37
    2bb2:	98 ad       	ldd	r25, Y+56	; 0x38
    2bb4:	20 e0       	ldi	r18, 0x00	; 0
    2bb6:	30 e0       	ldi	r19, 0x00	; 0
    2bb8:	40 e2       	ldi	r20, 0x20	; 32
    2bba:	51 e4       	ldi	r21, 0x41	; 65
    2bbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bc0:	dc 01       	movw	r26, r24
    2bc2:	cb 01       	movw	r24, r22
    2bc4:	bc 01       	movw	r22, r24
    2bc6:	cd 01       	movw	r24, r26
    2bc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bcc:	dc 01       	movw	r26, r24
    2bce:	cb 01       	movw	r24, r22
    2bd0:	98 ab       	std	Y+48, r25	; 0x30
    2bd2:	8f a7       	std	Y+47, r24	; 0x2f
    2bd4:	0f c0       	rjmp	.+30     	; 0x2bf4 <LCD_sendCommand+0x56a>
    2bd6:	88 ec       	ldi	r24, 0xC8	; 200
    2bd8:	90 e0       	ldi	r25, 0x00	; 0
    2bda:	9e a7       	std	Y+46, r25	; 0x2e
    2bdc:	8d a7       	std	Y+45, r24	; 0x2d
    2bde:	8d a5       	ldd	r24, Y+45	; 0x2d
    2be0:	9e a5       	ldd	r25, Y+46	; 0x2e
    2be2:	01 97       	sbiw	r24, 0x01	; 1
    2be4:	f1 f7       	brne	.-4      	; 0x2be2 <LCD_sendCommand+0x558>
    2be6:	9e a7       	std	Y+46, r25	; 0x2e
    2be8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bea:	8f a5       	ldd	r24, Y+47	; 0x2f
    2bec:	98 a9       	ldd	r25, Y+48	; 0x30
    2bee:	01 97       	sbiw	r24, 0x01	; 1
    2bf0:	98 ab       	std	Y+48, r25	; 0x30
    2bf2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bf4:	8f a5       	ldd	r24, Y+47	; 0x2f
    2bf6:	98 a9       	ldd	r25, Y+48	; 0x30
    2bf8:	00 97       	sbiw	r24, 0x00	; 0
    2bfa:	69 f7       	brne	.-38     	; 0x2bd6 <LCD_sendCommand+0x54c>
    2bfc:	14 c0       	rjmp	.+40     	; 0x2c26 <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bfe:	69 a9       	ldd	r22, Y+49	; 0x31
    2c00:	7a a9       	ldd	r23, Y+50	; 0x32
    2c02:	8b a9       	ldd	r24, Y+51	; 0x33
    2c04:	9c a9       	ldd	r25, Y+52	; 0x34
    2c06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c0a:	dc 01       	movw	r26, r24
    2c0c:	cb 01       	movw	r24, r22
    2c0e:	98 ab       	std	Y+48, r25	; 0x30
    2c10:	8f a7       	std	Y+47, r24	; 0x2f
    2c12:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c14:	98 a9       	ldd	r25, Y+48	; 0x30
    2c16:	9c a7       	std	Y+44, r25	; 0x2c
    2c18:	8b a7       	std	Y+43, r24	; 0x2b
    2c1a:	8b a5       	ldd	r24, Y+43	; 0x2b
    2c1c:	9c a5       	ldd	r25, Y+44	; 0x2c
    2c1e:	01 97       	sbiw	r24, 0x01	; 1
    2c20:	f1 f7       	brne	.-4      	; 0x2c1e <LCD_sendCommand+0x594>
    2c22:	9c a7       	std	Y+44, r25	; 0x2c
    2c24:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH);
    2c26:	80 e0       	ldi	r24, 0x00	; 0
    2c28:	62 e0       	ldi	r22, 0x02	; 2
    2c2a:	41 e0       	ldi	r20, 0x01	; 1
    2c2c:	0e 94 31 20 	call	0x4062	; 0x4062 <GPIO_writePin>
    2c30:	80 e0       	ldi	r24, 0x00	; 0
    2c32:	90 e0       	ldi	r25, 0x00	; 0
    2c34:	a0 e8       	ldi	r26, 0x80	; 128
    2c36:	bf e3       	ldi	r27, 0x3F	; 63
    2c38:	8f a3       	std	Y+39, r24	; 0x27
    2c3a:	98 a7       	std	Y+40, r25	; 0x28
    2c3c:	a9 a7       	std	Y+41, r26	; 0x29
    2c3e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c40:	6f a1       	ldd	r22, Y+39	; 0x27
    2c42:	78 a5       	ldd	r23, Y+40	; 0x28
    2c44:	89 a5       	ldd	r24, Y+41	; 0x29
    2c46:	9a a5       	ldd	r25, Y+42	; 0x2a
    2c48:	20 e0       	ldi	r18, 0x00	; 0
    2c4a:	30 e0       	ldi	r19, 0x00	; 0
    2c4c:	4a ef       	ldi	r20, 0xFA	; 250
    2c4e:	54 e4       	ldi	r21, 0x44	; 68
    2c50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c54:	dc 01       	movw	r26, r24
    2c56:	cb 01       	movw	r24, r22
    2c58:	8b a3       	std	Y+35, r24	; 0x23
    2c5a:	9c a3       	std	Y+36, r25	; 0x24
    2c5c:	ad a3       	std	Y+37, r26	; 0x25
    2c5e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2c60:	6b a1       	ldd	r22, Y+35	; 0x23
    2c62:	7c a1       	ldd	r23, Y+36	; 0x24
    2c64:	8d a1       	ldd	r24, Y+37	; 0x25
    2c66:	9e a1       	ldd	r25, Y+38	; 0x26
    2c68:	20 e0       	ldi	r18, 0x00	; 0
    2c6a:	30 e0       	ldi	r19, 0x00	; 0
    2c6c:	40 e8       	ldi	r20, 0x80	; 128
    2c6e:	5f e3       	ldi	r21, 0x3F	; 63
    2c70:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c74:	88 23       	and	r24, r24
    2c76:	2c f4       	brge	.+10     	; 0x2c82 <LCD_sendCommand+0x5f8>
		__ticks = 1;
    2c78:	81 e0       	ldi	r24, 0x01	; 1
    2c7a:	90 e0       	ldi	r25, 0x00	; 0
    2c7c:	9a a3       	std	Y+34, r25	; 0x22
    2c7e:	89 a3       	std	Y+33, r24	; 0x21
    2c80:	3f c0       	rjmp	.+126    	; 0x2d00 <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    2c82:	6b a1       	ldd	r22, Y+35	; 0x23
    2c84:	7c a1       	ldd	r23, Y+36	; 0x24
    2c86:	8d a1       	ldd	r24, Y+37	; 0x25
    2c88:	9e a1       	ldd	r25, Y+38	; 0x26
    2c8a:	20 e0       	ldi	r18, 0x00	; 0
    2c8c:	3f ef       	ldi	r19, 0xFF	; 255
    2c8e:	4f e7       	ldi	r20, 0x7F	; 127
    2c90:	57 e4       	ldi	r21, 0x47	; 71
    2c92:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c96:	18 16       	cp	r1, r24
    2c98:	4c f5       	brge	.+82     	; 0x2cec <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c9a:	6f a1       	ldd	r22, Y+39	; 0x27
    2c9c:	78 a5       	ldd	r23, Y+40	; 0x28
    2c9e:	89 a5       	ldd	r24, Y+41	; 0x29
    2ca0:	9a a5       	ldd	r25, Y+42	; 0x2a
    2ca2:	20 e0       	ldi	r18, 0x00	; 0
    2ca4:	30 e0       	ldi	r19, 0x00	; 0
    2ca6:	40 e2       	ldi	r20, 0x20	; 32
    2ca8:	51 e4       	ldi	r21, 0x41	; 65
    2caa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cae:	dc 01       	movw	r26, r24
    2cb0:	cb 01       	movw	r24, r22
    2cb2:	bc 01       	movw	r22, r24
    2cb4:	cd 01       	movw	r24, r26
    2cb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cba:	dc 01       	movw	r26, r24
    2cbc:	cb 01       	movw	r24, r22
    2cbe:	9a a3       	std	Y+34, r25	; 0x22
    2cc0:	89 a3       	std	Y+33, r24	; 0x21
    2cc2:	0f c0       	rjmp	.+30     	; 0x2ce2 <LCD_sendCommand+0x658>
    2cc4:	88 ec       	ldi	r24, 0xC8	; 200
    2cc6:	90 e0       	ldi	r25, 0x00	; 0
    2cc8:	98 a3       	std	Y+32, r25	; 0x20
    2cca:	8f 8f       	std	Y+31, r24	; 0x1f
    2ccc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2cce:	98 a1       	ldd	r25, Y+32	; 0x20
    2cd0:	01 97       	sbiw	r24, 0x01	; 1
    2cd2:	f1 f7       	brne	.-4      	; 0x2cd0 <LCD_sendCommand+0x646>
    2cd4:	98 a3       	std	Y+32, r25	; 0x20
    2cd6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cd8:	89 a1       	ldd	r24, Y+33	; 0x21
    2cda:	9a a1       	ldd	r25, Y+34	; 0x22
    2cdc:	01 97       	sbiw	r24, 0x01	; 1
    2cde:	9a a3       	std	Y+34, r25	; 0x22
    2ce0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ce2:	89 a1       	ldd	r24, Y+33	; 0x21
    2ce4:	9a a1       	ldd	r25, Y+34	; 0x22
    2ce6:	00 97       	sbiw	r24, 0x00	; 0
    2ce8:	69 f7       	brne	.-38     	; 0x2cc4 <LCD_sendCommand+0x63a>
    2cea:	14 c0       	rjmp	.+40     	; 0x2d14 <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cec:	6b a1       	ldd	r22, Y+35	; 0x23
    2cee:	7c a1       	ldd	r23, Y+36	; 0x24
    2cf0:	8d a1       	ldd	r24, Y+37	; 0x25
    2cf2:	9e a1       	ldd	r25, Y+38	; 0x26
    2cf4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cf8:	dc 01       	movw	r26, r24
    2cfa:	cb 01       	movw	r24, r22
    2cfc:	9a a3       	std	Y+34, r25	; 0x22
    2cfe:	89 a3       	std	Y+33, r24	; 0x21
    2d00:	89 a1       	ldd	r24, Y+33	; 0x21
    2d02:	9a a1       	ldd	r25, Y+34	; 0x22
    2d04:	9e 8f       	std	Y+30, r25	; 0x1e
    2d06:	8d 8f       	std	Y+29, r24	; 0x1d
    2d08:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d0a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2d0c:	01 97       	sbiw	r24, 0x01	; 1
    2d0e:	f1 f7       	brne	.-4      	; 0x2d0c <LCD_sendCommand+0x682>
    2d10:	9e 8f       	std	Y+30, r25	; 0x1e
    2d12:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,0));
    2d14:	fe 01       	movw	r30, r28
    2d16:	ed 59       	subi	r30, 0x9D	; 157
    2d18:	ff 4f       	sbci	r31, 0xFF	; 255
    2d1a:	80 81       	ld	r24, Z
    2d1c:	98 2f       	mov	r25, r24
    2d1e:	91 70       	andi	r25, 0x01	; 1
    2d20:	80 e0       	ldi	r24, 0x00	; 0
    2d22:	63 e0       	ldi	r22, 0x03	; 3
    2d24:	49 2f       	mov	r20, r25
    2d26:	0e 94 31 20 	call	0x4062	; 0x4062 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,1));
    2d2a:	fe 01       	movw	r30, r28
    2d2c:	ed 59       	subi	r30, 0x9D	; 157
    2d2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d30:	80 81       	ld	r24, Z
    2d32:	88 2f       	mov	r24, r24
    2d34:	90 e0       	ldi	r25, 0x00	; 0
    2d36:	82 70       	andi	r24, 0x02	; 2
    2d38:	90 70       	andi	r25, 0x00	; 0
    2d3a:	95 95       	asr	r25
    2d3c:	87 95       	ror	r24
    2d3e:	98 2f       	mov	r25, r24
    2d40:	80 e0       	ldi	r24, 0x00	; 0
    2d42:	64 e0       	ldi	r22, 0x04	; 4
    2d44:	49 2f       	mov	r20, r25
    2d46:	0e 94 31 20 	call	0x4062	; 0x4062 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,2));
    2d4a:	fe 01       	movw	r30, r28
    2d4c:	ed 59       	subi	r30, 0x9D	; 157
    2d4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d50:	80 81       	ld	r24, Z
    2d52:	88 2f       	mov	r24, r24
    2d54:	90 e0       	ldi	r25, 0x00	; 0
    2d56:	84 70       	andi	r24, 0x04	; 4
    2d58:	90 70       	andi	r25, 0x00	; 0
    2d5a:	95 95       	asr	r25
    2d5c:	87 95       	ror	r24
    2d5e:	95 95       	asr	r25
    2d60:	87 95       	ror	r24
    2d62:	98 2f       	mov	r25, r24
    2d64:	80 e0       	ldi	r24, 0x00	; 0
    2d66:	65 e0       	ldi	r22, 0x05	; 5
    2d68:	49 2f       	mov	r20, r25
    2d6a:	0e 94 31 20 	call	0x4062	; 0x4062 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,3));
    2d6e:	fe 01       	movw	r30, r28
    2d70:	ed 59       	subi	r30, 0x9D	; 157
    2d72:	ff 4f       	sbci	r31, 0xFF	; 255
    2d74:	80 81       	ld	r24, Z
    2d76:	88 2f       	mov	r24, r24
    2d78:	90 e0       	ldi	r25, 0x00	; 0
    2d7a:	88 70       	andi	r24, 0x08	; 8
    2d7c:	90 70       	andi	r25, 0x00	; 0
    2d7e:	95 95       	asr	r25
    2d80:	87 95       	ror	r24
    2d82:	95 95       	asr	r25
    2d84:	87 95       	ror	r24
    2d86:	95 95       	asr	r25
    2d88:	87 95       	ror	r24
    2d8a:	98 2f       	mov	r25, r24
    2d8c:	80 e0       	ldi	r24, 0x00	; 0
    2d8e:	66 e0       	ldi	r22, 0x06	; 6
    2d90:	49 2f       	mov	r20, r25
    2d92:	0e 94 31 20 	call	0x4062	; 0x4062 <GPIO_writePin>
    2d96:	80 e0       	ldi	r24, 0x00	; 0
    2d98:	90 e0       	ldi	r25, 0x00	; 0
    2d9a:	a0 e8       	ldi	r26, 0x80	; 128
    2d9c:	bf e3       	ldi	r27, 0x3F	; 63
    2d9e:	89 8f       	std	Y+25, r24	; 0x19
    2da0:	9a 8f       	std	Y+26, r25	; 0x1a
    2da2:	ab 8f       	std	Y+27, r26	; 0x1b
    2da4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2da6:	69 8d       	ldd	r22, Y+25	; 0x19
    2da8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2daa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2dac:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2dae:	20 e0       	ldi	r18, 0x00	; 0
    2db0:	30 e0       	ldi	r19, 0x00	; 0
    2db2:	4a ef       	ldi	r20, 0xFA	; 250
    2db4:	54 e4       	ldi	r21, 0x44	; 68
    2db6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dba:	dc 01       	movw	r26, r24
    2dbc:	cb 01       	movw	r24, r22
    2dbe:	8d 8b       	std	Y+21, r24	; 0x15
    2dc0:	9e 8b       	std	Y+22, r25	; 0x16
    2dc2:	af 8b       	std	Y+23, r26	; 0x17
    2dc4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2dc6:	6d 89       	ldd	r22, Y+21	; 0x15
    2dc8:	7e 89       	ldd	r23, Y+22	; 0x16
    2dca:	8f 89       	ldd	r24, Y+23	; 0x17
    2dcc:	98 8d       	ldd	r25, Y+24	; 0x18
    2dce:	20 e0       	ldi	r18, 0x00	; 0
    2dd0:	30 e0       	ldi	r19, 0x00	; 0
    2dd2:	40 e8       	ldi	r20, 0x80	; 128
    2dd4:	5f e3       	ldi	r21, 0x3F	; 63
    2dd6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2dda:	88 23       	and	r24, r24
    2ddc:	2c f4       	brge	.+10     	; 0x2de8 <LCD_sendCommand+0x75e>
		__ticks = 1;
    2dde:	81 e0       	ldi	r24, 0x01	; 1
    2de0:	90 e0       	ldi	r25, 0x00	; 0
    2de2:	9c 8b       	std	Y+20, r25	; 0x14
    2de4:	8b 8b       	std	Y+19, r24	; 0x13
    2de6:	3f c0       	rjmp	.+126    	; 0x2e66 <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    2de8:	6d 89       	ldd	r22, Y+21	; 0x15
    2dea:	7e 89       	ldd	r23, Y+22	; 0x16
    2dec:	8f 89       	ldd	r24, Y+23	; 0x17
    2dee:	98 8d       	ldd	r25, Y+24	; 0x18
    2df0:	20 e0       	ldi	r18, 0x00	; 0
    2df2:	3f ef       	ldi	r19, 0xFF	; 255
    2df4:	4f e7       	ldi	r20, 0x7F	; 127
    2df6:	57 e4       	ldi	r21, 0x47	; 71
    2df8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2dfc:	18 16       	cp	r1, r24
    2dfe:	4c f5       	brge	.+82     	; 0x2e52 <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e00:	69 8d       	ldd	r22, Y+25	; 0x19
    2e02:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e04:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e06:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e08:	20 e0       	ldi	r18, 0x00	; 0
    2e0a:	30 e0       	ldi	r19, 0x00	; 0
    2e0c:	40 e2       	ldi	r20, 0x20	; 32
    2e0e:	51 e4       	ldi	r21, 0x41	; 65
    2e10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e14:	dc 01       	movw	r26, r24
    2e16:	cb 01       	movw	r24, r22
    2e18:	bc 01       	movw	r22, r24
    2e1a:	cd 01       	movw	r24, r26
    2e1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e20:	dc 01       	movw	r26, r24
    2e22:	cb 01       	movw	r24, r22
    2e24:	9c 8b       	std	Y+20, r25	; 0x14
    2e26:	8b 8b       	std	Y+19, r24	; 0x13
    2e28:	0f c0       	rjmp	.+30     	; 0x2e48 <LCD_sendCommand+0x7be>
    2e2a:	88 ec       	ldi	r24, 0xC8	; 200
    2e2c:	90 e0       	ldi	r25, 0x00	; 0
    2e2e:	9a 8b       	std	Y+18, r25	; 0x12
    2e30:	89 8b       	std	Y+17, r24	; 0x11
    2e32:	89 89       	ldd	r24, Y+17	; 0x11
    2e34:	9a 89       	ldd	r25, Y+18	; 0x12
    2e36:	01 97       	sbiw	r24, 0x01	; 1
    2e38:	f1 f7       	brne	.-4      	; 0x2e36 <LCD_sendCommand+0x7ac>
    2e3a:	9a 8b       	std	Y+18, r25	; 0x12
    2e3c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e3e:	8b 89       	ldd	r24, Y+19	; 0x13
    2e40:	9c 89       	ldd	r25, Y+20	; 0x14
    2e42:	01 97       	sbiw	r24, 0x01	; 1
    2e44:	9c 8b       	std	Y+20, r25	; 0x14
    2e46:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e48:	8b 89       	ldd	r24, Y+19	; 0x13
    2e4a:	9c 89       	ldd	r25, Y+20	; 0x14
    2e4c:	00 97       	sbiw	r24, 0x00	; 0
    2e4e:	69 f7       	brne	.-38     	; 0x2e2a <LCD_sendCommand+0x7a0>
    2e50:	14 c0       	rjmp	.+40     	; 0x2e7a <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e52:	6d 89       	ldd	r22, Y+21	; 0x15
    2e54:	7e 89       	ldd	r23, Y+22	; 0x16
    2e56:	8f 89       	ldd	r24, Y+23	; 0x17
    2e58:	98 8d       	ldd	r25, Y+24	; 0x18
    2e5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e5e:	dc 01       	movw	r26, r24
    2e60:	cb 01       	movw	r24, r22
    2e62:	9c 8b       	std	Y+20, r25	; 0x14
    2e64:	8b 8b       	std	Y+19, r24	; 0x13
    2e66:	8b 89       	ldd	r24, Y+19	; 0x13
    2e68:	9c 89       	ldd	r25, Y+20	; 0x14
    2e6a:	98 8b       	std	Y+16, r25	; 0x10
    2e6c:	8f 87       	std	Y+15, r24	; 0x0f
    2e6e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e70:	98 89       	ldd	r25, Y+16	; 0x10
    2e72:	01 97       	sbiw	r24, 0x01	; 1
    2e74:	f1 f7       	brne	.-4      	; 0x2e72 <LCD_sendCommand+0x7e8>
    2e76:	98 8b       	std	Y+16, r25	; 0x10
    2e78:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW);
    2e7a:	80 e0       	ldi	r24, 0x00	; 0
    2e7c:	62 e0       	ldi	r22, 0x02	; 2
    2e7e:	40 e0       	ldi	r20, 0x00	; 0
    2e80:	0e 94 31 20 	call	0x4062	; 0x4062 <GPIO_writePin>
    2e84:	80 e0       	ldi	r24, 0x00	; 0
    2e86:	90 e0       	ldi	r25, 0x00	; 0
    2e88:	a0 e8       	ldi	r26, 0x80	; 128
    2e8a:	bf e3       	ldi	r27, 0x3F	; 63
    2e8c:	8b 87       	std	Y+11, r24	; 0x0b
    2e8e:	9c 87       	std	Y+12, r25	; 0x0c
    2e90:	ad 87       	std	Y+13, r26	; 0x0d
    2e92:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e94:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e96:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e98:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e9a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e9c:	20 e0       	ldi	r18, 0x00	; 0
    2e9e:	30 e0       	ldi	r19, 0x00	; 0
    2ea0:	4a ef       	ldi	r20, 0xFA	; 250
    2ea2:	54 e4       	ldi	r21, 0x44	; 68
    2ea4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ea8:	dc 01       	movw	r26, r24
    2eaa:	cb 01       	movw	r24, r22
    2eac:	8f 83       	std	Y+7, r24	; 0x07
    2eae:	98 87       	std	Y+8, r25	; 0x08
    2eb0:	a9 87       	std	Y+9, r26	; 0x09
    2eb2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2eb4:	6f 81       	ldd	r22, Y+7	; 0x07
    2eb6:	78 85       	ldd	r23, Y+8	; 0x08
    2eb8:	89 85       	ldd	r24, Y+9	; 0x09
    2eba:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ebc:	20 e0       	ldi	r18, 0x00	; 0
    2ebe:	30 e0       	ldi	r19, 0x00	; 0
    2ec0:	40 e8       	ldi	r20, 0x80	; 128
    2ec2:	5f e3       	ldi	r21, 0x3F	; 63
    2ec4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ec8:	88 23       	and	r24, r24
    2eca:	2c f4       	brge	.+10     	; 0x2ed6 <LCD_sendCommand+0x84c>
		__ticks = 1;
    2ecc:	81 e0       	ldi	r24, 0x01	; 1
    2ece:	90 e0       	ldi	r25, 0x00	; 0
    2ed0:	9e 83       	std	Y+6, r25	; 0x06
    2ed2:	8d 83       	std	Y+5, r24	; 0x05
    2ed4:	3f c0       	rjmp	.+126    	; 0x2f54 <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    2ed6:	6f 81       	ldd	r22, Y+7	; 0x07
    2ed8:	78 85       	ldd	r23, Y+8	; 0x08
    2eda:	89 85       	ldd	r24, Y+9	; 0x09
    2edc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ede:	20 e0       	ldi	r18, 0x00	; 0
    2ee0:	3f ef       	ldi	r19, 0xFF	; 255
    2ee2:	4f e7       	ldi	r20, 0x7F	; 127
    2ee4:	57 e4       	ldi	r21, 0x47	; 71
    2ee6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2eea:	18 16       	cp	r1, r24
    2eec:	4c f5       	brge	.+82     	; 0x2f40 <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2eee:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ef0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ef2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ef4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ef6:	20 e0       	ldi	r18, 0x00	; 0
    2ef8:	30 e0       	ldi	r19, 0x00	; 0
    2efa:	40 e2       	ldi	r20, 0x20	; 32
    2efc:	51 e4       	ldi	r21, 0x41	; 65
    2efe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f02:	dc 01       	movw	r26, r24
    2f04:	cb 01       	movw	r24, r22
    2f06:	bc 01       	movw	r22, r24
    2f08:	cd 01       	movw	r24, r26
    2f0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f0e:	dc 01       	movw	r26, r24
    2f10:	cb 01       	movw	r24, r22
    2f12:	9e 83       	std	Y+6, r25	; 0x06
    2f14:	8d 83       	std	Y+5, r24	; 0x05
    2f16:	0f c0       	rjmp	.+30     	; 0x2f36 <LCD_sendCommand+0x8ac>
    2f18:	88 ec       	ldi	r24, 0xC8	; 200
    2f1a:	90 e0       	ldi	r25, 0x00	; 0
    2f1c:	9c 83       	std	Y+4, r25	; 0x04
    2f1e:	8b 83       	std	Y+3, r24	; 0x03
    2f20:	8b 81       	ldd	r24, Y+3	; 0x03
    2f22:	9c 81       	ldd	r25, Y+4	; 0x04
    2f24:	01 97       	sbiw	r24, 0x01	; 1
    2f26:	f1 f7       	brne	.-4      	; 0x2f24 <LCD_sendCommand+0x89a>
    2f28:	9c 83       	std	Y+4, r25	; 0x04
    2f2a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f2c:	8d 81       	ldd	r24, Y+5	; 0x05
    2f2e:	9e 81       	ldd	r25, Y+6	; 0x06
    2f30:	01 97       	sbiw	r24, 0x01	; 1
    2f32:	9e 83       	std	Y+6, r25	; 0x06
    2f34:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f36:	8d 81       	ldd	r24, Y+5	; 0x05
    2f38:	9e 81       	ldd	r25, Y+6	; 0x06
    2f3a:	00 97       	sbiw	r24, 0x00	; 0
    2f3c:	69 f7       	brne	.-38     	; 0x2f18 <LCD_sendCommand+0x88e>
    2f3e:	14 c0       	rjmp	.+40     	; 0x2f68 <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f40:	6f 81       	ldd	r22, Y+7	; 0x07
    2f42:	78 85       	ldd	r23, Y+8	; 0x08
    2f44:	89 85       	ldd	r24, Y+9	; 0x09
    2f46:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f4c:	dc 01       	movw	r26, r24
    2f4e:	cb 01       	movw	r24, r22
    2f50:	9e 83       	std	Y+6, r25	; 0x06
    2f52:	8d 83       	std	Y+5, r24	; 0x05
    2f54:	8d 81       	ldd	r24, Y+5	; 0x05
    2f56:	9e 81       	ldd	r25, Y+6	; 0x06
    2f58:	9a 83       	std	Y+2, r25	; 0x02
    2f5a:	89 83       	std	Y+1, r24	; 0x01
    2f5c:	89 81       	ldd	r24, Y+1	; 0x01
    2f5e:	9a 81       	ldd	r25, Y+2	; 0x02
    2f60:	01 97       	sbiw	r24, 0x01	; 1
    2f62:	f1 f7       	brne	.-4      	; 0x2f60 <LCD_sendCommand+0x8d6>
    2f64:	9a 83       	std	Y+2, r25	; 0x02
    2f66:	89 83       	std	Y+1, r24	; 0x01

#endif
#endif


}
    2f68:	cd 59       	subi	r28, 0x9D	; 157
    2f6a:	df 4f       	sbci	r29, 0xFF	; 255
    2f6c:	0f b6       	in	r0, 0x3f	; 63
    2f6e:	f8 94       	cli
    2f70:	de bf       	out	0x3e, r29	; 62
    2f72:	0f be       	out	0x3f, r0	; 63
    2f74:	cd bf       	out	0x3d, r28	; 61
    2f76:	cf 91       	pop	r28
    2f78:	df 91       	pop	r29
    2f7a:	1f 91       	pop	r17
    2f7c:	0f 91       	pop	r16
    2f7e:	08 95       	ret

00002f80 <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 data)
{
    2f80:	0f 93       	push	r16
    2f82:	1f 93       	push	r17
    2f84:	df 93       	push	r29
    2f86:	cf 93       	push	r28
    2f88:	cd b7       	in	r28, 0x3d	; 61
    2f8a:	de b7       	in	r29, 0x3e	; 62
    2f8c:	c3 56       	subi	r28, 0x63	; 99
    2f8e:	d0 40       	sbci	r29, 0x00	; 0
    2f90:	0f b6       	in	r0, 0x3f	; 63
    2f92:	f8 94       	cli
    2f94:	de bf       	out	0x3e, r29	; 62
    2f96:	0f be       	out	0x3f, r0	; 63
    2f98:	cd bf       	out	0x3d, r28	; 61
    2f9a:	fe 01       	movw	r30, r28
    2f9c:	ed 59       	subi	r30, 0x9D	; 157
    2f9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2fa0:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH);
    2fa2:	80 e0       	ldi	r24, 0x00	; 0
    2fa4:	61 e0       	ldi	r22, 0x01	; 1
    2fa6:	41 e0       	ldi	r20, 0x01	; 1
    2fa8:	0e 94 31 20 	call	0x4062	; 0x4062 <GPIO_writePin>
    2fac:	fe 01       	movw	r30, r28
    2fae:	e1 5a       	subi	r30, 0xA1	; 161
    2fb0:	ff 4f       	sbci	r31, 0xFF	; 255
    2fb2:	80 e0       	ldi	r24, 0x00	; 0
    2fb4:	90 e0       	ldi	r25, 0x00	; 0
    2fb6:	a0 e8       	ldi	r26, 0x80	; 128
    2fb8:	bf e3       	ldi	r27, 0x3F	; 63
    2fba:	80 83       	st	Z, r24
    2fbc:	91 83       	std	Z+1, r25	; 0x01
    2fbe:	a2 83       	std	Z+2, r26	; 0x02
    2fc0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fc2:	8e 01       	movw	r16, r28
    2fc4:	05 5a       	subi	r16, 0xA5	; 165
    2fc6:	1f 4f       	sbci	r17, 0xFF	; 255
    2fc8:	fe 01       	movw	r30, r28
    2fca:	e1 5a       	subi	r30, 0xA1	; 161
    2fcc:	ff 4f       	sbci	r31, 0xFF	; 255
    2fce:	60 81       	ld	r22, Z
    2fd0:	71 81       	ldd	r23, Z+1	; 0x01
    2fd2:	82 81       	ldd	r24, Z+2	; 0x02
    2fd4:	93 81       	ldd	r25, Z+3	; 0x03
    2fd6:	20 e0       	ldi	r18, 0x00	; 0
    2fd8:	30 e0       	ldi	r19, 0x00	; 0
    2fda:	4a ef       	ldi	r20, 0xFA	; 250
    2fdc:	54 e4       	ldi	r21, 0x44	; 68
    2fde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fe2:	dc 01       	movw	r26, r24
    2fe4:	cb 01       	movw	r24, r22
    2fe6:	f8 01       	movw	r30, r16
    2fe8:	80 83       	st	Z, r24
    2fea:	91 83       	std	Z+1, r25	; 0x01
    2fec:	a2 83       	std	Z+2, r26	; 0x02
    2fee:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2ff0:	fe 01       	movw	r30, r28
    2ff2:	e5 5a       	subi	r30, 0xA5	; 165
    2ff4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ff6:	60 81       	ld	r22, Z
    2ff8:	71 81       	ldd	r23, Z+1	; 0x01
    2ffa:	82 81       	ldd	r24, Z+2	; 0x02
    2ffc:	93 81       	ldd	r25, Z+3	; 0x03
    2ffe:	20 e0       	ldi	r18, 0x00	; 0
    3000:	30 e0       	ldi	r19, 0x00	; 0
    3002:	40 e8       	ldi	r20, 0x80	; 128
    3004:	5f e3       	ldi	r21, 0x3F	; 63
    3006:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    300a:	88 23       	and	r24, r24
    300c:	44 f4       	brge	.+16     	; 0x301e <LCD_displayCharacter+0x9e>
		__ticks = 1;
    300e:	fe 01       	movw	r30, r28
    3010:	e7 5a       	subi	r30, 0xA7	; 167
    3012:	ff 4f       	sbci	r31, 0xFF	; 255
    3014:	81 e0       	ldi	r24, 0x01	; 1
    3016:	90 e0       	ldi	r25, 0x00	; 0
    3018:	91 83       	std	Z+1, r25	; 0x01
    301a:	80 83       	st	Z, r24
    301c:	64 c0       	rjmp	.+200    	; 0x30e6 <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    301e:	fe 01       	movw	r30, r28
    3020:	e5 5a       	subi	r30, 0xA5	; 165
    3022:	ff 4f       	sbci	r31, 0xFF	; 255
    3024:	60 81       	ld	r22, Z
    3026:	71 81       	ldd	r23, Z+1	; 0x01
    3028:	82 81       	ldd	r24, Z+2	; 0x02
    302a:	93 81       	ldd	r25, Z+3	; 0x03
    302c:	20 e0       	ldi	r18, 0x00	; 0
    302e:	3f ef       	ldi	r19, 0xFF	; 255
    3030:	4f e7       	ldi	r20, 0x7F	; 127
    3032:	57 e4       	ldi	r21, 0x47	; 71
    3034:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3038:	18 16       	cp	r1, r24
    303a:	0c f0       	brlt	.+2      	; 0x303e <LCD_displayCharacter+0xbe>
    303c:	43 c0       	rjmp	.+134    	; 0x30c4 <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    303e:	fe 01       	movw	r30, r28
    3040:	e1 5a       	subi	r30, 0xA1	; 161
    3042:	ff 4f       	sbci	r31, 0xFF	; 255
    3044:	60 81       	ld	r22, Z
    3046:	71 81       	ldd	r23, Z+1	; 0x01
    3048:	82 81       	ldd	r24, Z+2	; 0x02
    304a:	93 81       	ldd	r25, Z+3	; 0x03
    304c:	20 e0       	ldi	r18, 0x00	; 0
    304e:	30 e0       	ldi	r19, 0x00	; 0
    3050:	40 e2       	ldi	r20, 0x20	; 32
    3052:	51 e4       	ldi	r21, 0x41	; 65
    3054:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3058:	dc 01       	movw	r26, r24
    305a:	cb 01       	movw	r24, r22
    305c:	8e 01       	movw	r16, r28
    305e:	07 5a       	subi	r16, 0xA7	; 167
    3060:	1f 4f       	sbci	r17, 0xFF	; 255
    3062:	bc 01       	movw	r22, r24
    3064:	cd 01       	movw	r24, r26
    3066:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    306a:	dc 01       	movw	r26, r24
    306c:	cb 01       	movw	r24, r22
    306e:	f8 01       	movw	r30, r16
    3070:	91 83       	std	Z+1, r25	; 0x01
    3072:	80 83       	st	Z, r24
    3074:	1f c0       	rjmp	.+62     	; 0x30b4 <LCD_displayCharacter+0x134>
    3076:	fe 01       	movw	r30, r28
    3078:	e9 5a       	subi	r30, 0xA9	; 169
    307a:	ff 4f       	sbci	r31, 0xFF	; 255
    307c:	88 ec       	ldi	r24, 0xC8	; 200
    307e:	90 e0       	ldi	r25, 0x00	; 0
    3080:	91 83       	std	Z+1, r25	; 0x01
    3082:	80 83       	st	Z, r24
    3084:	fe 01       	movw	r30, r28
    3086:	e9 5a       	subi	r30, 0xA9	; 169
    3088:	ff 4f       	sbci	r31, 0xFF	; 255
    308a:	80 81       	ld	r24, Z
    308c:	91 81       	ldd	r25, Z+1	; 0x01
    308e:	01 97       	sbiw	r24, 0x01	; 1
    3090:	f1 f7       	brne	.-4      	; 0x308e <LCD_displayCharacter+0x10e>
    3092:	fe 01       	movw	r30, r28
    3094:	e9 5a       	subi	r30, 0xA9	; 169
    3096:	ff 4f       	sbci	r31, 0xFF	; 255
    3098:	91 83       	std	Z+1, r25	; 0x01
    309a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    309c:	de 01       	movw	r26, r28
    309e:	a7 5a       	subi	r26, 0xA7	; 167
    30a0:	bf 4f       	sbci	r27, 0xFF	; 255
    30a2:	fe 01       	movw	r30, r28
    30a4:	e7 5a       	subi	r30, 0xA7	; 167
    30a6:	ff 4f       	sbci	r31, 0xFF	; 255
    30a8:	80 81       	ld	r24, Z
    30aa:	91 81       	ldd	r25, Z+1	; 0x01
    30ac:	01 97       	sbiw	r24, 0x01	; 1
    30ae:	11 96       	adiw	r26, 0x01	; 1
    30b0:	9c 93       	st	X, r25
    30b2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30b4:	fe 01       	movw	r30, r28
    30b6:	e7 5a       	subi	r30, 0xA7	; 167
    30b8:	ff 4f       	sbci	r31, 0xFF	; 255
    30ba:	80 81       	ld	r24, Z
    30bc:	91 81       	ldd	r25, Z+1	; 0x01
    30be:	00 97       	sbiw	r24, 0x00	; 0
    30c0:	d1 f6       	brne	.-76     	; 0x3076 <LCD_displayCharacter+0xf6>
    30c2:	27 c0       	rjmp	.+78     	; 0x3112 <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30c4:	8e 01       	movw	r16, r28
    30c6:	07 5a       	subi	r16, 0xA7	; 167
    30c8:	1f 4f       	sbci	r17, 0xFF	; 255
    30ca:	fe 01       	movw	r30, r28
    30cc:	e5 5a       	subi	r30, 0xA5	; 165
    30ce:	ff 4f       	sbci	r31, 0xFF	; 255
    30d0:	60 81       	ld	r22, Z
    30d2:	71 81       	ldd	r23, Z+1	; 0x01
    30d4:	82 81       	ldd	r24, Z+2	; 0x02
    30d6:	93 81       	ldd	r25, Z+3	; 0x03
    30d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30dc:	dc 01       	movw	r26, r24
    30de:	cb 01       	movw	r24, r22
    30e0:	f8 01       	movw	r30, r16
    30e2:	91 83       	std	Z+1, r25	; 0x01
    30e4:	80 83       	st	Z, r24
    30e6:	de 01       	movw	r26, r28
    30e8:	ab 5a       	subi	r26, 0xAB	; 171
    30ea:	bf 4f       	sbci	r27, 0xFF	; 255
    30ec:	fe 01       	movw	r30, r28
    30ee:	e7 5a       	subi	r30, 0xA7	; 167
    30f0:	ff 4f       	sbci	r31, 0xFF	; 255
    30f2:	80 81       	ld	r24, Z
    30f4:	91 81       	ldd	r25, Z+1	; 0x01
    30f6:	8d 93       	st	X+, r24
    30f8:	9c 93       	st	X, r25
    30fa:	fe 01       	movw	r30, r28
    30fc:	eb 5a       	subi	r30, 0xAB	; 171
    30fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3100:	80 81       	ld	r24, Z
    3102:	91 81       	ldd	r25, Z+1	; 0x01
    3104:	01 97       	sbiw	r24, 0x01	; 1
    3106:	f1 f7       	brne	.-4      	; 0x3104 <LCD_displayCharacter+0x184>
    3108:	fe 01       	movw	r30, r28
    310a:	eb 5a       	subi	r30, 0xAB	; 171
    310c:	ff 4f       	sbci	r31, 0xFF	; 255
    310e:	91 83       	std	Z+1, r25	; 0x01
    3110:	80 83       	st	Z, r24
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH);
    3112:	80 e0       	ldi	r24, 0x00	; 0
    3114:	62 e0       	ldi	r22, 0x02	; 2
    3116:	41 e0       	ldi	r20, 0x01	; 1
    3118:	0e 94 31 20 	call	0x4062	; 0x4062 <GPIO_writePin>
    311c:	fe 01       	movw	r30, r28
    311e:	ef 5a       	subi	r30, 0xAF	; 175
    3120:	ff 4f       	sbci	r31, 0xFF	; 255
    3122:	80 e0       	ldi	r24, 0x00	; 0
    3124:	90 e0       	ldi	r25, 0x00	; 0
    3126:	a0 e8       	ldi	r26, 0x80	; 128
    3128:	bf e3       	ldi	r27, 0x3F	; 63
    312a:	80 83       	st	Z, r24
    312c:	91 83       	std	Z+1, r25	; 0x01
    312e:	a2 83       	std	Z+2, r26	; 0x02
    3130:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3132:	8e 01       	movw	r16, r28
    3134:	03 5b       	subi	r16, 0xB3	; 179
    3136:	1f 4f       	sbci	r17, 0xFF	; 255
    3138:	fe 01       	movw	r30, r28
    313a:	ef 5a       	subi	r30, 0xAF	; 175
    313c:	ff 4f       	sbci	r31, 0xFF	; 255
    313e:	60 81       	ld	r22, Z
    3140:	71 81       	ldd	r23, Z+1	; 0x01
    3142:	82 81       	ldd	r24, Z+2	; 0x02
    3144:	93 81       	ldd	r25, Z+3	; 0x03
    3146:	20 e0       	ldi	r18, 0x00	; 0
    3148:	30 e0       	ldi	r19, 0x00	; 0
    314a:	4a ef       	ldi	r20, 0xFA	; 250
    314c:	54 e4       	ldi	r21, 0x44	; 68
    314e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3152:	dc 01       	movw	r26, r24
    3154:	cb 01       	movw	r24, r22
    3156:	f8 01       	movw	r30, r16
    3158:	80 83       	st	Z, r24
    315a:	91 83       	std	Z+1, r25	; 0x01
    315c:	a2 83       	std	Z+2, r26	; 0x02
    315e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3160:	fe 01       	movw	r30, r28
    3162:	e3 5b       	subi	r30, 0xB3	; 179
    3164:	ff 4f       	sbci	r31, 0xFF	; 255
    3166:	60 81       	ld	r22, Z
    3168:	71 81       	ldd	r23, Z+1	; 0x01
    316a:	82 81       	ldd	r24, Z+2	; 0x02
    316c:	93 81       	ldd	r25, Z+3	; 0x03
    316e:	20 e0       	ldi	r18, 0x00	; 0
    3170:	30 e0       	ldi	r19, 0x00	; 0
    3172:	40 e8       	ldi	r20, 0x80	; 128
    3174:	5f e3       	ldi	r21, 0x3F	; 63
    3176:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    317a:	88 23       	and	r24, r24
    317c:	44 f4       	brge	.+16     	; 0x318e <LCD_displayCharacter+0x20e>
		__ticks = 1;
    317e:	fe 01       	movw	r30, r28
    3180:	e5 5b       	subi	r30, 0xB5	; 181
    3182:	ff 4f       	sbci	r31, 0xFF	; 255
    3184:	81 e0       	ldi	r24, 0x01	; 1
    3186:	90 e0       	ldi	r25, 0x00	; 0
    3188:	91 83       	std	Z+1, r25	; 0x01
    318a:	80 83       	st	Z, r24
    318c:	64 c0       	rjmp	.+200    	; 0x3256 <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    318e:	fe 01       	movw	r30, r28
    3190:	e3 5b       	subi	r30, 0xB3	; 179
    3192:	ff 4f       	sbci	r31, 0xFF	; 255
    3194:	60 81       	ld	r22, Z
    3196:	71 81       	ldd	r23, Z+1	; 0x01
    3198:	82 81       	ldd	r24, Z+2	; 0x02
    319a:	93 81       	ldd	r25, Z+3	; 0x03
    319c:	20 e0       	ldi	r18, 0x00	; 0
    319e:	3f ef       	ldi	r19, 0xFF	; 255
    31a0:	4f e7       	ldi	r20, 0x7F	; 127
    31a2:	57 e4       	ldi	r21, 0x47	; 71
    31a4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    31a8:	18 16       	cp	r1, r24
    31aa:	0c f0       	brlt	.+2      	; 0x31ae <LCD_displayCharacter+0x22e>
    31ac:	43 c0       	rjmp	.+134    	; 0x3234 <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31ae:	fe 01       	movw	r30, r28
    31b0:	ef 5a       	subi	r30, 0xAF	; 175
    31b2:	ff 4f       	sbci	r31, 0xFF	; 255
    31b4:	60 81       	ld	r22, Z
    31b6:	71 81       	ldd	r23, Z+1	; 0x01
    31b8:	82 81       	ldd	r24, Z+2	; 0x02
    31ba:	93 81       	ldd	r25, Z+3	; 0x03
    31bc:	20 e0       	ldi	r18, 0x00	; 0
    31be:	30 e0       	ldi	r19, 0x00	; 0
    31c0:	40 e2       	ldi	r20, 0x20	; 32
    31c2:	51 e4       	ldi	r21, 0x41	; 65
    31c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31c8:	dc 01       	movw	r26, r24
    31ca:	cb 01       	movw	r24, r22
    31cc:	8e 01       	movw	r16, r28
    31ce:	05 5b       	subi	r16, 0xB5	; 181
    31d0:	1f 4f       	sbci	r17, 0xFF	; 255
    31d2:	bc 01       	movw	r22, r24
    31d4:	cd 01       	movw	r24, r26
    31d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31da:	dc 01       	movw	r26, r24
    31dc:	cb 01       	movw	r24, r22
    31de:	f8 01       	movw	r30, r16
    31e0:	91 83       	std	Z+1, r25	; 0x01
    31e2:	80 83       	st	Z, r24
    31e4:	1f c0       	rjmp	.+62     	; 0x3224 <LCD_displayCharacter+0x2a4>
    31e6:	fe 01       	movw	r30, r28
    31e8:	e7 5b       	subi	r30, 0xB7	; 183
    31ea:	ff 4f       	sbci	r31, 0xFF	; 255
    31ec:	88 ec       	ldi	r24, 0xC8	; 200
    31ee:	90 e0       	ldi	r25, 0x00	; 0
    31f0:	91 83       	std	Z+1, r25	; 0x01
    31f2:	80 83       	st	Z, r24
    31f4:	fe 01       	movw	r30, r28
    31f6:	e7 5b       	subi	r30, 0xB7	; 183
    31f8:	ff 4f       	sbci	r31, 0xFF	; 255
    31fa:	80 81       	ld	r24, Z
    31fc:	91 81       	ldd	r25, Z+1	; 0x01
    31fe:	01 97       	sbiw	r24, 0x01	; 1
    3200:	f1 f7       	brne	.-4      	; 0x31fe <LCD_displayCharacter+0x27e>
    3202:	fe 01       	movw	r30, r28
    3204:	e7 5b       	subi	r30, 0xB7	; 183
    3206:	ff 4f       	sbci	r31, 0xFF	; 255
    3208:	91 83       	std	Z+1, r25	; 0x01
    320a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    320c:	de 01       	movw	r26, r28
    320e:	a5 5b       	subi	r26, 0xB5	; 181
    3210:	bf 4f       	sbci	r27, 0xFF	; 255
    3212:	fe 01       	movw	r30, r28
    3214:	e5 5b       	subi	r30, 0xB5	; 181
    3216:	ff 4f       	sbci	r31, 0xFF	; 255
    3218:	80 81       	ld	r24, Z
    321a:	91 81       	ldd	r25, Z+1	; 0x01
    321c:	01 97       	sbiw	r24, 0x01	; 1
    321e:	11 96       	adiw	r26, 0x01	; 1
    3220:	9c 93       	st	X, r25
    3222:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3224:	fe 01       	movw	r30, r28
    3226:	e5 5b       	subi	r30, 0xB5	; 181
    3228:	ff 4f       	sbci	r31, 0xFF	; 255
    322a:	80 81       	ld	r24, Z
    322c:	91 81       	ldd	r25, Z+1	; 0x01
    322e:	00 97       	sbiw	r24, 0x00	; 0
    3230:	d1 f6       	brne	.-76     	; 0x31e6 <LCD_displayCharacter+0x266>
    3232:	27 c0       	rjmp	.+78     	; 0x3282 <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3234:	8e 01       	movw	r16, r28
    3236:	05 5b       	subi	r16, 0xB5	; 181
    3238:	1f 4f       	sbci	r17, 0xFF	; 255
    323a:	fe 01       	movw	r30, r28
    323c:	e3 5b       	subi	r30, 0xB3	; 179
    323e:	ff 4f       	sbci	r31, 0xFF	; 255
    3240:	60 81       	ld	r22, Z
    3242:	71 81       	ldd	r23, Z+1	; 0x01
    3244:	82 81       	ldd	r24, Z+2	; 0x02
    3246:	93 81       	ldd	r25, Z+3	; 0x03
    3248:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    324c:	dc 01       	movw	r26, r24
    324e:	cb 01       	movw	r24, r22
    3250:	f8 01       	movw	r30, r16
    3252:	91 83       	std	Z+1, r25	; 0x01
    3254:	80 83       	st	Z, r24
    3256:	de 01       	movw	r26, r28
    3258:	a9 5b       	subi	r26, 0xB9	; 185
    325a:	bf 4f       	sbci	r27, 0xFF	; 255
    325c:	fe 01       	movw	r30, r28
    325e:	e5 5b       	subi	r30, 0xB5	; 181
    3260:	ff 4f       	sbci	r31, 0xFF	; 255
    3262:	80 81       	ld	r24, Z
    3264:	91 81       	ldd	r25, Z+1	; 0x01
    3266:	8d 93       	st	X+, r24
    3268:	9c 93       	st	X, r25
    326a:	fe 01       	movw	r30, r28
    326c:	e9 5b       	subi	r30, 0xB9	; 185
    326e:	ff 4f       	sbci	r31, 0xFF	; 255
    3270:	80 81       	ld	r24, Z
    3272:	91 81       	ldd	r25, Z+1	; 0x01
    3274:	01 97       	sbiw	r24, 0x01	; 1
    3276:	f1 f7       	brne	.-4      	; 0x3274 <LCD_displayCharacter+0x2f4>
    3278:	fe 01       	movw	r30, r28
    327a:	e9 5b       	subi	r30, 0xB9	; 185
    327c:	ff 4f       	sbci	r31, 0xFF	; 255
    327e:	91 83       	std	Z+1, r25	; 0x01
    3280:	80 83       	st	Z, r24
	GPIO_writePort(LCD_DATA_PORT_ID,data);
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW);
	_delay_ms(1);
#elif (LCD_DATA_BITS_MODE==4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,4));
    3282:	fe 01       	movw	r30, r28
    3284:	ed 59       	subi	r30, 0x9D	; 157
    3286:	ff 4f       	sbci	r31, 0xFF	; 255
    3288:	80 81       	ld	r24, Z
    328a:	88 2f       	mov	r24, r24
    328c:	90 e0       	ldi	r25, 0x00	; 0
    328e:	80 71       	andi	r24, 0x10	; 16
    3290:	90 70       	andi	r25, 0x00	; 0
    3292:	95 95       	asr	r25
    3294:	87 95       	ror	r24
    3296:	95 95       	asr	r25
    3298:	87 95       	ror	r24
    329a:	95 95       	asr	r25
    329c:	87 95       	ror	r24
    329e:	95 95       	asr	r25
    32a0:	87 95       	ror	r24
    32a2:	98 2f       	mov	r25, r24
    32a4:	80 e0       	ldi	r24, 0x00	; 0
    32a6:	63 e0       	ldi	r22, 0x03	; 3
    32a8:	49 2f       	mov	r20, r25
    32aa:	0e 94 31 20 	call	0x4062	; 0x4062 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,5));
    32ae:	fe 01       	movw	r30, r28
    32b0:	ed 59       	subi	r30, 0x9D	; 157
    32b2:	ff 4f       	sbci	r31, 0xFF	; 255
    32b4:	80 81       	ld	r24, Z
    32b6:	88 2f       	mov	r24, r24
    32b8:	90 e0       	ldi	r25, 0x00	; 0
    32ba:	80 72       	andi	r24, 0x20	; 32
    32bc:	90 70       	andi	r25, 0x00	; 0
    32be:	95 95       	asr	r25
    32c0:	87 95       	ror	r24
    32c2:	95 95       	asr	r25
    32c4:	87 95       	ror	r24
    32c6:	95 95       	asr	r25
    32c8:	87 95       	ror	r24
    32ca:	95 95       	asr	r25
    32cc:	87 95       	ror	r24
    32ce:	95 95       	asr	r25
    32d0:	87 95       	ror	r24
    32d2:	98 2f       	mov	r25, r24
    32d4:	80 e0       	ldi	r24, 0x00	; 0
    32d6:	64 e0       	ldi	r22, 0x04	; 4
    32d8:	49 2f       	mov	r20, r25
    32da:	0e 94 31 20 	call	0x4062	; 0x4062 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,6));
    32de:	fe 01       	movw	r30, r28
    32e0:	ed 59       	subi	r30, 0x9D	; 157
    32e2:	ff 4f       	sbci	r31, 0xFF	; 255
    32e4:	80 81       	ld	r24, Z
    32e6:	88 2f       	mov	r24, r24
    32e8:	90 e0       	ldi	r25, 0x00	; 0
    32ea:	80 74       	andi	r24, 0x40	; 64
    32ec:	90 70       	andi	r25, 0x00	; 0
    32ee:	08 2e       	mov	r0, r24
    32f0:	89 2f       	mov	r24, r25
    32f2:	00 0c       	add	r0, r0
    32f4:	88 1f       	adc	r24, r24
    32f6:	99 0b       	sbc	r25, r25
    32f8:	00 0c       	add	r0, r0
    32fa:	88 1f       	adc	r24, r24
    32fc:	99 1f       	adc	r25, r25
    32fe:	98 2f       	mov	r25, r24
    3300:	80 e0       	ldi	r24, 0x00	; 0
    3302:	65 e0       	ldi	r22, 0x05	; 5
    3304:	49 2f       	mov	r20, r25
    3306:	0e 94 31 20 	call	0x4062	; 0x4062 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,7));
    330a:	fe 01       	movw	r30, r28
    330c:	ed 59       	subi	r30, 0x9D	; 157
    330e:	ff 4f       	sbci	r31, 0xFF	; 255
    3310:	80 81       	ld	r24, Z
    3312:	98 2f       	mov	r25, r24
    3314:	99 1f       	adc	r25, r25
    3316:	99 27       	eor	r25, r25
    3318:	99 1f       	adc	r25, r25
    331a:	80 e0       	ldi	r24, 0x00	; 0
    331c:	66 e0       	ldi	r22, 0x06	; 6
    331e:	49 2f       	mov	r20, r25
    3320:	0e 94 31 20 	call	0x4062	; 0x4062 <GPIO_writePin>
    3324:	fe 01       	movw	r30, r28
    3326:	ed 5b       	subi	r30, 0xBD	; 189
    3328:	ff 4f       	sbci	r31, 0xFF	; 255
    332a:	80 e0       	ldi	r24, 0x00	; 0
    332c:	90 e0       	ldi	r25, 0x00	; 0
    332e:	a0 e8       	ldi	r26, 0x80	; 128
    3330:	bf e3       	ldi	r27, 0x3F	; 63
    3332:	80 83       	st	Z, r24
    3334:	91 83       	std	Z+1, r25	; 0x01
    3336:	a2 83       	std	Z+2, r26	; 0x02
    3338:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    333a:	8e 01       	movw	r16, r28
    333c:	01 5c       	subi	r16, 0xC1	; 193
    333e:	1f 4f       	sbci	r17, 0xFF	; 255
    3340:	fe 01       	movw	r30, r28
    3342:	ed 5b       	subi	r30, 0xBD	; 189
    3344:	ff 4f       	sbci	r31, 0xFF	; 255
    3346:	60 81       	ld	r22, Z
    3348:	71 81       	ldd	r23, Z+1	; 0x01
    334a:	82 81       	ldd	r24, Z+2	; 0x02
    334c:	93 81       	ldd	r25, Z+3	; 0x03
    334e:	20 e0       	ldi	r18, 0x00	; 0
    3350:	30 e0       	ldi	r19, 0x00	; 0
    3352:	4a ef       	ldi	r20, 0xFA	; 250
    3354:	54 e4       	ldi	r21, 0x44	; 68
    3356:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    335a:	dc 01       	movw	r26, r24
    335c:	cb 01       	movw	r24, r22
    335e:	f8 01       	movw	r30, r16
    3360:	80 83       	st	Z, r24
    3362:	91 83       	std	Z+1, r25	; 0x01
    3364:	a2 83       	std	Z+2, r26	; 0x02
    3366:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3368:	fe 01       	movw	r30, r28
    336a:	ff 96       	adiw	r30, 0x3f	; 63
    336c:	60 81       	ld	r22, Z
    336e:	71 81       	ldd	r23, Z+1	; 0x01
    3370:	82 81       	ldd	r24, Z+2	; 0x02
    3372:	93 81       	ldd	r25, Z+3	; 0x03
    3374:	20 e0       	ldi	r18, 0x00	; 0
    3376:	30 e0       	ldi	r19, 0x00	; 0
    3378:	40 e8       	ldi	r20, 0x80	; 128
    337a:	5f e3       	ldi	r21, 0x3F	; 63
    337c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3380:	88 23       	and	r24, r24
    3382:	2c f4       	brge	.+10     	; 0x338e <LCD_displayCharacter+0x40e>
		__ticks = 1;
    3384:	81 e0       	ldi	r24, 0x01	; 1
    3386:	90 e0       	ldi	r25, 0x00	; 0
    3388:	9e af       	std	Y+62, r25	; 0x3e
    338a:	8d af       	std	Y+61, r24	; 0x3d
    338c:	46 c0       	rjmp	.+140    	; 0x341a <LCD_displayCharacter+0x49a>
	else if (__tmp > 65535)
    338e:	fe 01       	movw	r30, r28
    3390:	ff 96       	adiw	r30, 0x3f	; 63
    3392:	60 81       	ld	r22, Z
    3394:	71 81       	ldd	r23, Z+1	; 0x01
    3396:	82 81       	ldd	r24, Z+2	; 0x02
    3398:	93 81       	ldd	r25, Z+3	; 0x03
    339a:	20 e0       	ldi	r18, 0x00	; 0
    339c:	3f ef       	ldi	r19, 0xFF	; 255
    339e:	4f e7       	ldi	r20, 0x7F	; 127
    33a0:	57 e4       	ldi	r21, 0x47	; 71
    33a2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    33a6:	18 16       	cp	r1, r24
    33a8:	64 f5       	brge	.+88     	; 0x3402 <LCD_displayCharacter+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33aa:	fe 01       	movw	r30, r28
    33ac:	ed 5b       	subi	r30, 0xBD	; 189
    33ae:	ff 4f       	sbci	r31, 0xFF	; 255
    33b0:	60 81       	ld	r22, Z
    33b2:	71 81       	ldd	r23, Z+1	; 0x01
    33b4:	82 81       	ldd	r24, Z+2	; 0x02
    33b6:	93 81       	ldd	r25, Z+3	; 0x03
    33b8:	20 e0       	ldi	r18, 0x00	; 0
    33ba:	30 e0       	ldi	r19, 0x00	; 0
    33bc:	40 e2       	ldi	r20, 0x20	; 32
    33be:	51 e4       	ldi	r21, 0x41	; 65
    33c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33c4:	dc 01       	movw	r26, r24
    33c6:	cb 01       	movw	r24, r22
    33c8:	bc 01       	movw	r22, r24
    33ca:	cd 01       	movw	r24, r26
    33cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33d0:	dc 01       	movw	r26, r24
    33d2:	cb 01       	movw	r24, r22
    33d4:	9e af       	std	Y+62, r25	; 0x3e
    33d6:	8d af       	std	Y+61, r24	; 0x3d
    33d8:	0f c0       	rjmp	.+30     	; 0x33f8 <LCD_displayCharacter+0x478>
    33da:	88 ec       	ldi	r24, 0xC8	; 200
    33dc:	90 e0       	ldi	r25, 0x00	; 0
    33de:	9c af       	std	Y+60, r25	; 0x3c
    33e0:	8b af       	std	Y+59, r24	; 0x3b
    33e2:	8b ad       	ldd	r24, Y+59	; 0x3b
    33e4:	9c ad       	ldd	r25, Y+60	; 0x3c
    33e6:	01 97       	sbiw	r24, 0x01	; 1
    33e8:	f1 f7       	brne	.-4      	; 0x33e6 <LCD_displayCharacter+0x466>
    33ea:	9c af       	std	Y+60, r25	; 0x3c
    33ec:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33ee:	8d ad       	ldd	r24, Y+61	; 0x3d
    33f0:	9e ad       	ldd	r25, Y+62	; 0x3e
    33f2:	01 97       	sbiw	r24, 0x01	; 1
    33f4:	9e af       	std	Y+62, r25	; 0x3e
    33f6:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33f8:	8d ad       	ldd	r24, Y+61	; 0x3d
    33fa:	9e ad       	ldd	r25, Y+62	; 0x3e
    33fc:	00 97       	sbiw	r24, 0x00	; 0
    33fe:	69 f7       	brne	.-38     	; 0x33da <LCD_displayCharacter+0x45a>
    3400:	16 c0       	rjmp	.+44     	; 0x342e <LCD_displayCharacter+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3402:	fe 01       	movw	r30, r28
    3404:	ff 96       	adiw	r30, 0x3f	; 63
    3406:	60 81       	ld	r22, Z
    3408:	71 81       	ldd	r23, Z+1	; 0x01
    340a:	82 81       	ldd	r24, Z+2	; 0x02
    340c:	93 81       	ldd	r25, Z+3	; 0x03
    340e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3412:	dc 01       	movw	r26, r24
    3414:	cb 01       	movw	r24, r22
    3416:	9e af       	std	Y+62, r25	; 0x3e
    3418:	8d af       	std	Y+61, r24	; 0x3d
    341a:	8d ad       	ldd	r24, Y+61	; 0x3d
    341c:	9e ad       	ldd	r25, Y+62	; 0x3e
    341e:	9a af       	std	Y+58, r25	; 0x3a
    3420:	89 af       	std	Y+57, r24	; 0x39
    3422:	89 ad       	ldd	r24, Y+57	; 0x39
    3424:	9a ad       	ldd	r25, Y+58	; 0x3a
    3426:	01 97       	sbiw	r24, 0x01	; 1
    3428:	f1 f7       	brne	.-4      	; 0x3426 <LCD_displayCharacter+0x4a6>
    342a:	9a af       	std	Y+58, r25	; 0x3a
    342c:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW);
    342e:	80 e0       	ldi	r24, 0x00	; 0
    3430:	62 e0       	ldi	r22, 0x02	; 2
    3432:	40 e0       	ldi	r20, 0x00	; 0
    3434:	0e 94 31 20 	call	0x4062	; 0x4062 <GPIO_writePin>
    3438:	80 e0       	ldi	r24, 0x00	; 0
    343a:	90 e0       	ldi	r25, 0x00	; 0
    343c:	a0 e8       	ldi	r26, 0x80	; 128
    343e:	bf e3       	ldi	r27, 0x3F	; 63
    3440:	8d ab       	std	Y+53, r24	; 0x35
    3442:	9e ab       	std	Y+54, r25	; 0x36
    3444:	af ab       	std	Y+55, r26	; 0x37
    3446:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3448:	6d a9       	ldd	r22, Y+53	; 0x35
    344a:	7e a9       	ldd	r23, Y+54	; 0x36
    344c:	8f a9       	ldd	r24, Y+55	; 0x37
    344e:	98 ad       	ldd	r25, Y+56	; 0x38
    3450:	20 e0       	ldi	r18, 0x00	; 0
    3452:	30 e0       	ldi	r19, 0x00	; 0
    3454:	4a ef       	ldi	r20, 0xFA	; 250
    3456:	54 e4       	ldi	r21, 0x44	; 68
    3458:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    345c:	dc 01       	movw	r26, r24
    345e:	cb 01       	movw	r24, r22
    3460:	89 ab       	std	Y+49, r24	; 0x31
    3462:	9a ab       	std	Y+50, r25	; 0x32
    3464:	ab ab       	std	Y+51, r26	; 0x33
    3466:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3468:	69 a9       	ldd	r22, Y+49	; 0x31
    346a:	7a a9       	ldd	r23, Y+50	; 0x32
    346c:	8b a9       	ldd	r24, Y+51	; 0x33
    346e:	9c a9       	ldd	r25, Y+52	; 0x34
    3470:	20 e0       	ldi	r18, 0x00	; 0
    3472:	30 e0       	ldi	r19, 0x00	; 0
    3474:	40 e8       	ldi	r20, 0x80	; 128
    3476:	5f e3       	ldi	r21, 0x3F	; 63
    3478:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    347c:	88 23       	and	r24, r24
    347e:	2c f4       	brge	.+10     	; 0x348a <LCD_displayCharacter+0x50a>
		__ticks = 1;
    3480:	81 e0       	ldi	r24, 0x01	; 1
    3482:	90 e0       	ldi	r25, 0x00	; 0
    3484:	98 ab       	std	Y+48, r25	; 0x30
    3486:	8f a7       	std	Y+47, r24	; 0x2f
    3488:	3f c0       	rjmp	.+126    	; 0x3508 <LCD_displayCharacter+0x588>
	else if (__tmp > 65535)
    348a:	69 a9       	ldd	r22, Y+49	; 0x31
    348c:	7a a9       	ldd	r23, Y+50	; 0x32
    348e:	8b a9       	ldd	r24, Y+51	; 0x33
    3490:	9c a9       	ldd	r25, Y+52	; 0x34
    3492:	20 e0       	ldi	r18, 0x00	; 0
    3494:	3f ef       	ldi	r19, 0xFF	; 255
    3496:	4f e7       	ldi	r20, 0x7F	; 127
    3498:	57 e4       	ldi	r21, 0x47	; 71
    349a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    349e:	18 16       	cp	r1, r24
    34a0:	4c f5       	brge	.+82     	; 0x34f4 <LCD_displayCharacter+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34a2:	6d a9       	ldd	r22, Y+53	; 0x35
    34a4:	7e a9       	ldd	r23, Y+54	; 0x36
    34a6:	8f a9       	ldd	r24, Y+55	; 0x37
    34a8:	98 ad       	ldd	r25, Y+56	; 0x38
    34aa:	20 e0       	ldi	r18, 0x00	; 0
    34ac:	30 e0       	ldi	r19, 0x00	; 0
    34ae:	40 e2       	ldi	r20, 0x20	; 32
    34b0:	51 e4       	ldi	r21, 0x41	; 65
    34b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34b6:	dc 01       	movw	r26, r24
    34b8:	cb 01       	movw	r24, r22
    34ba:	bc 01       	movw	r22, r24
    34bc:	cd 01       	movw	r24, r26
    34be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34c2:	dc 01       	movw	r26, r24
    34c4:	cb 01       	movw	r24, r22
    34c6:	98 ab       	std	Y+48, r25	; 0x30
    34c8:	8f a7       	std	Y+47, r24	; 0x2f
    34ca:	0f c0       	rjmp	.+30     	; 0x34ea <LCD_displayCharacter+0x56a>
    34cc:	88 ec       	ldi	r24, 0xC8	; 200
    34ce:	90 e0       	ldi	r25, 0x00	; 0
    34d0:	9e a7       	std	Y+46, r25	; 0x2e
    34d2:	8d a7       	std	Y+45, r24	; 0x2d
    34d4:	8d a5       	ldd	r24, Y+45	; 0x2d
    34d6:	9e a5       	ldd	r25, Y+46	; 0x2e
    34d8:	01 97       	sbiw	r24, 0x01	; 1
    34da:	f1 f7       	brne	.-4      	; 0x34d8 <LCD_displayCharacter+0x558>
    34dc:	9e a7       	std	Y+46, r25	; 0x2e
    34de:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34e0:	8f a5       	ldd	r24, Y+47	; 0x2f
    34e2:	98 a9       	ldd	r25, Y+48	; 0x30
    34e4:	01 97       	sbiw	r24, 0x01	; 1
    34e6:	98 ab       	std	Y+48, r25	; 0x30
    34e8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34ea:	8f a5       	ldd	r24, Y+47	; 0x2f
    34ec:	98 a9       	ldd	r25, Y+48	; 0x30
    34ee:	00 97       	sbiw	r24, 0x00	; 0
    34f0:	69 f7       	brne	.-38     	; 0x34cc <LCD_displayCharacter+0x54c>
    34f2:	14 c0       	rjmp	.+40     	; 0x351c <LCD_displayCharacter+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34f4:	69 a9       	ldd	r22, Y+49	; 0x31
    34f6:	7a a9       	ldd	r23, Y+50	; 0x32
    34f8:	8b a9       	ldd	r24, Y+51	; 0x33
    34fa:	9c a9       	ldd	r25, Y+52	; 0x34
    34fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3500:	dc 01       	movw	r26, r24
    3502:	cb 01       	movw	r24, r22
    3504:	98 ab       	std	Y+48, r25	; 0x30
    3506:	8f a7       	std	Y+47, r24	; 0x2f
    3508:	8f a5       	ldd	r24, Y+47	; 0x2f
    350a:	98 a9       	ldd	r25, Y+48	; 0x30
    350c:	9c a7       	std	Y+44, r25	; 0x2c
    350e:	8b a7       	std	Y+43, r24	; 0x2b
    3510:	8b a5       	ldd	r24, Y+43	; 0x2b
    3512:	9c a5       	ldd	r25, Y+44	; 0x2c
    3514:	01 97       	sbiw	r24, 0x01	; 1
    3516:	f1 f7       	brne	.-4      	; 0x3514 <LCD_displayCharacter+0x594>
    3518:	9c a7       	std	Y+44, r25	; 0x2c
    351a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH);
    351c:	80 e0       	ldi	r24, 0x00	; 0
    351e:	62 e0       	ldi	r22, 0x02	; 2
    3520:	41 e0       	ldi	r20, 0x01	; 1
    3522:	0e 94 31 20 	call	0x4062	; 0x4062 <GPIO_writePin>
    3526:	80 e0       	ldi	r24, 0x00	; 0
    3528:	90 e0       	ldi	r25, 0x00	; 0
    352a:	a0 e8       	ldi	r26, 0x80	; 128
    352c:	bf e3       	ldi	r27, 0x3F	; 63
    352e:	8f a3       	std	Y+39, r24	; 0x27
    3530:	98 a7       	std	Y+40, r25	; 0x28
    3532:	a9 a7       	std	Y+41, r26	; 0x29
    3534:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3536:	6f a1       	ldd	r22, Y+39	; 0x27
    3538:	78 a5       	ldd	r23, Y+40	; 0x28
    353a:	89 a5       	ldd	r24, Y+41	; 0x29
    353c:	9a a5       	ldd	r25, Y+42	; 0x2a
    353e:	20 e0       	ldi	r18, 0x00	; 0
    3540:	30 e0       	ldi	r19, 0x00	; 0
    3542:	4a ef       	ldi	r20, 0xFA	; 250
    3544:	54 e4       	ldi	r21, 0x44	; 68
    3546:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    354a:	dc 01       	movw	r26, r24
    354c:	cb 01       	movw	r24, r22
    354e:	8b a3       	std	Y+35, r24	; 0x23
    3550:	9c a3       	std	Y+36, r25	; 0x24
    3552:	ad a3       	std	Y+37, r26	; 0x25
    3554:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3556:	6b a1       	ldd	r22, Y+35	; 0x23
    3558:	7c a1       	ldd	r23, Y+36	; 0x24
    355a:	8d a1       	ldd	r24, Y+37	; 0x25
    355c:	9e a1       	ldd	r25, Y+38	; 0x26
    355e:	20 e0       	ldi	r18, 0x00	; 0
    3560:	30 e0       	ldi	r19, 0x00	; 0
    3562:	40 e8       	ldi	r20, 0x80	; 128
    3564:	5f e3       	ldi	r21, 0x3F	; 63
    3566:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    356a:	88 23       	and	r24, r24
    356c:	2c f4       	brge	.+10     	; 0x3578 <LCD_displayCharacter+0x5f8>
		__ticks = 1;
    356e:	81 e0       	ldi	r24, 0x01	; 1
    3570:	90 e0       	ldi	r25, 0x00	; 0
    3572:	9a a3       	std	Y+34, r25	; 0x22
    3574:	89 a3       	std	Y+33, r24	; 0x21
    3576:	3f c0       	rjmp	.+126    	; 0x35f6 <LCD_displayCharacter+0x676>
	else if (__tmp > 65535)
    3578:	6b a1       	ldd	r22, Y+35	; 0x23
    357a:	7c a1       	ldd	r23, Y+36	; 0x24
    357c:	8d a1       	ldd	r24, Y+37	; 0x25
    357e:	9e a1       	ldd	r25, Y+38	; 0x26
    3580:	20 e0       	ldi	r18, 0x00	; 0
    3582:	3f ef       	ldi	r19, 0xFF	; 255
    3584:	4f e7       	ldi	r20, 0x7F	; 127
    3586:	57 e4       	ldi	r21, 0x47	; 71
    3588:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    358c:	18 16       	cp	r1, r24
    358e:	4c f5       	brge	.+82     	; 0x35e2 <LCD_displayCharacter+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3590:	6f a1       	ldd	r22, Y+39	; 0x27
    3592:	78 a5       	ldd	r23, Y+40	; 0x28
    3594:	89 a5       	ldd	r24, Y+41	; 0x29
    3596:	9a a5       	ldd	r25, Y+42	; 0x2a
    3598:	20 e0       	ldi	r18, 0x00	; 0
    359a:	30 e0       	ldi	r19, 0x00	; 0
    359c:	40 e2       	ldi	r20, 0x20	; 32
    359e:	51 e4       	ldi	r21, 0x41	; 65
    35a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35a4:	dc 01       	movw	r26, r24
    35a6:	cb 01       	movw	r24, r22
    35a8:	bc 01       	movw	r22, r24
    35aa:	cd 01       	movw	r24, r26
    35ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35b0:	dc 01       	movw	r26, r24
    35b2:	cb 01       	movw	r24, r22
    35b4:	9a a3       	std	Y+34, r25	; 0x22
    35b6:	89 a3       	std	Y+33, r24	; 0x21
    35b8:	0f c0       	rjmp	.+30     	; 0x35d8 <LCD_displayCharacter+0x658>
    35ba:	88 ec       	ldi	r24, 0xC8	; 200
    35bc:	90 e0       	ldi	r25, 0x00	; 0
    35be:	98 a3       	std	Y+32, r25	; 0x20
    35c0:	8f 8f       	std	Y+31, r24	; 0x1f
    35c2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    35c4:	98 a1       	ldd	r25, Y+32	; 0x20
    35c6:	01 97       	sbiw	r24, 0x01	; 1
    35c8:	f1 f7       	brne	.-4      	; 0x35c6 <LCD_displayCharacter+0x646>
    35ca:	98 a3       	std	Y+32, r25	; 0x20
    35cc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35ce:	89 a1       	ldd	r24, Y+33	; 0x21
    35d0:	9a a1       	ldd	r25, Y+34	; 0x22
    35d2:	01 97       	sbiw	r24, 0x01	; 1
    35d4:	9a a3       	std	Y+34, r25	; 0x22
    35d6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35d8:	89 a1       	ldd	r24, Y+33	; 0x21
    35da:	9a a1       	ldd	r25, Y+34	; 0x22
    35dc:	00 97       	sbiw	r24, 0x00	; 0
    35de:	69 f7       	brne	.-38     	; 0x35ba <LCD_displayCharacter+0x63a>
    35e0:	14 c0       	rjmp	.+40     	; 0x360a <LCD_displayCharacter+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35e2:	6b a1       	ldd	r22, Y+35	; 0x23
    35e4:	7c a1       	ldd	r23, Y+36	; 0x24
    35e6:	8d a1       	ldd	r24, Y+37	; 0x25
    35e8:	9e a1       	ldd	r25, Y+38	; 0x26
    35ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35ee:	dc 01       	movw	r26, r24
    35f0:	cb 01       	movw	r24, r22
    35f2:	9a a3       	std	Y+34, r25	; 0x22
    35f4:	89 a3       	std	Y+33, r24	; 0x21
    35f6:	89 a1       	ldd	r24, Y+33	; 0x21
    35f8:	9a a1       	ldd	r25, Y+34	; 0x22
    35fa:	9e 8f       	std	Y+30, r25	; 0x1e
    35fc:	8d 8f       	std	Y+29, r24	; 0x1d
    35fe:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3600:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3602:	01 97       	sbiw	r24, 0x01	; 1
    3604:	f1 f7       	brne	.-4      	; 0x3602 <LCD_displayCharacter+0x682>
    3606:	9e 8f       	std	Y+30, r25	; 0x1e
    3608:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,0));
    360a:	fe 01       	movw	r30, r28
    360c:	ed 59       	subi	r30, 0x9D	; 157
    360e:	ff 4f       	sbci	r31, 0xFF	; 255
    3610:	80 81       	ld	r24, Z
    3612:	98 2f       	mov	r25, r24
    3614:	91 70       	andi	r25, 0x01	; 1
    3616:	80 e0       	ldi	r24, 0x00	; 0
    3618:	63 e0       	ldi	r22, 0x03	; 3
    361a:	49 2f       	mov	r20, r25
    361c:	0e 94 31 20 	call	0x4062	; 0x4062 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,1));
    3620:	fe 01       	movw	r30, r28
    3622:	ed 59       	subi	r30, 0x9D	; 157
    3624:	ff 4f       	sbci	r31, 0xFF	; 255
    3626:	80 81       	ld	r24, Z
    3628:	88 2f       	mov	r24, r24
    362a:	90 e0       	ldi	r25, 0x00	; 0
    362c:	82 70       	andi	r24, 0x02	; 2
    362e:	90 70       	andi	r25, 0x00	; 0
    3630:	95 95       	asr	r25
    3632:	87 95       	ror	r24
    3634:	98 2f       	mov	r25, r24
    3636:	80 e0       	ldi	r24, 0x00	; 0
    3638:	64 e0       	ldi	r22, 0x04	; 4
    363a:	49 2f       	mov	r20, r25
    363c:	0e 94 31 20 	call	0x4062	; 0x4062 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,2));
    3640:	fe 01       	movw	r30, r28
    3642:	ed 59       	subi	r30, 0x9D	; 157
    3644:	ff 4f       	sbci	r31, 0xFF	; 255
    3646:	80 81       	ld	r24, Z
    3648:	88 2f       	mov	r24, r24
    364a:	90 e0       	ldi	r25, 0x00	; 0
    364c:	84 70       	andi	r24, 0x04	; 4
    364e:	90 70       	andi	r25, 0x00	; 0
    3650:	95 95       	asr	r25
    3652:	87 95       	ror	r24
    3654:	95 95       	asr	r25
    3656:	87 95       	ror	r24
    3658:	98 2f       	mov	r25, r24
    365a:	80 e0       	ldi	r24, 0x00	; 0
    365c:	65 e0       	ldi	r22, 0x05	; 5
    365e:	49 2f       	mov	r20, r25
    3660:	0e 94 31 20 	call	0x4062	; 0x4062 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,3));
    3664:	fe 01       	movw	r30, r28
    3666:	ed 59       	subi	r30, 0x9D	; 157
    3668:	ff 4f       	sbci	r31, 0xFF	; 255
    366a:	80 81       	ld	r24, Z
    366c:	88 2f       	mov	r24, r24
    366e:	90 e0       	ldi	r25, 0x00	; 0
    3670:	88 70       	andi	r24, 0x08	; 8
    3672:	90 70       	andi	r25, 0x00	; 0
    3674:	95 95       	asr	r25
    3676:	87 95       	ror	r24
    3678:	95 95       	asr	r25
    367a:	87 95       	ror	r24
    367c:	95 95       	asr	r25
    367e:	87 95       	ror	r24
    3680:	98 2f       	mov	r25, r24
    3682:	80 e0       	ldi	r24, 0x00	; 0
    3684:	66 e0       	ldi	r22, 0x06	; 6
    3686:	49 2f       	mov	r20, r25
    3688:	0e 94 31 20 	call	0x4062	; 0x4062 <GPIO_writePin>
    368c:	80 e0       	ldi	r24, 0x00	; 0
    368e:	90 e0       	ldi	r25, 0x00	; 0
    3690:	a0 e8       	ldi	r26, 0x80	; 128
    3692:	bf e3       	ldi	r27, 0x3F	; 63
    3694:	89 8f       	std	Y+25, r24	; 0x19
    3696:	9a 8f       	std	Y+26, r25	; 0x1a
    3698:	ab 8f       	std	Y+27, r26	; 0x1b
    369a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    369c:	69 8d       	ldd	r22, Y+25	; 0x19
    369e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    36a0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    36a2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    36a4:	20 e0       	ldi	r18, 0x00	; 0
    36a6:	30 e0       	ldi	r19, 0x00	; 0
    36a8:	4a ef       	ldi	r20, 0xFA	; 250
    36aa:	54 e4       	ldi	r21, 0x44	; 68
    36ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36b0:	dc 01       	movw	r26, r24
    36b2:	cb 01       	movw	r24, r22
    36b4:	8d 8b       	std	Y+21, r24	; 0x15
    36b6:	9e 8b       	std	Y+22, r25	; 0x16
    36b8:	af 8b       	std	Y+23, r26	; 0x17
    36ba:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    36bc:	6d 89       	ldd	r22, Y+21	; 0x15
    36be:	7e 89       	ldd	r23, Y+22	; 0x16
    36c0:	8f 89       	ldd	r24, Y+23	; 0x17
    36c2:	98 8d       	ldd	r25, Y+24	; 0x18
    36c4:	20 e0       	ldi	r18, 0x00	; 0
    36c6:	30 e0       	ldi	r19, 0x00	; 0
    36c8:	40 e8       	ldi	r20, 0x80	; 128
    36ca:	5f e3       	ldi	r21, 0x3F	; 63
    36cc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    36d0:	88 23       	and	r24, r24
    36d2:	2c f4       	brge	.+10     	; 0x36de <LCD_displayCharacter+0x75e>
		__ticks = 1;
    36d4:	81 e0       	ldi	r24, 0x01	; 1
    36d6:	90 e0       	ldi	r25, 0x00	; 0
    36d8:	9c 8b       	std	Y+20, r25	; 0x14
    36da:	8b 8b       	std	Y+19, r24	; 0x13
    36dc:	3f c0       	rjmp	.+126    	; 0x375c <LCD_displayCharacter+0x7dc>
	else if (__tmp > 65535)
    36de:	6d 89       	ldd	r22, Y+21	; 0x15
    36e0:	7e 89       	ldd	r23, Y+22	; 0x16
    36e2:	8f 89       	ldd	r24, Y+23	; 0x17
    36e4:	98 8d       	ldd	r25, Y+24	; 0x18
    36e6:	20 e0       	ldi	r18, 0x00	; 0
    36e8:	3f ef       	ldi	r19, 0xFF	; 255
    36ea:	4f e7       	ldi	r20, 0x7F	; 127
    36ec:	57 e4       	ldi	r21, 0x47	; 71
    36ee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    36f2:	18 16       	cp	r1, r24
    36f4:	4c f5       	brge	.+82     	; 0x3748 <LCD_displayCharacter+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36f6:	69 8d       	ldd	r22, Y+25	; 0x19
    36f8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    36fa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    36fc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    36fe:	20 e0       	ldi	r18, 0x00	; 0
    3700:	30 e0       	ldi	r19, 0x00	; 0
    3702:	40 e2       	ldi	r20, 0x20	; 32
    3704:	51 e4       	ldi	r21, 0x41	; 65
    3706:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    370a:	dc 01       	movw	r26, r24
    370c:	cb 01       	movw	r24, r22
    370e:	bc 01       	movw	r22, r24
    3710:	cd 01       	movw	r24, r26
    3712:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3716:	dc 01       	movw	r26, r24
    3718:	cb 01       	movw	r24, r22
    371a:	9c 8b       	std	Y+20, r25	; 0x14
    371c:	8b 8b       	std	Y+19, r24	; 0x13
    371e:	0f c0       	rjmp	.+30     	; 0x373e <LCD_displayCharacter+0x7be>
    3720:	88 ec       	ldi	r24, 0xC8	; 200
    3722:	90 e0       	ldi	r25, 0x00	; 0
    3724:	9a 8b       	std	Y+18, r25	; 0x12
    3726:	89 8b       	std	Y+17, r24	; 0x11
    3728:	89 89       	ldd	r24, Y+17	; 0x11
    372a:	9a 89       	ldd	r25, Y+18	; 0x12
    372c:	01 97       	sbiw	r24, 0x01	; 1
    372e:	f1 f7       	brne	.-4      	; 0x372c <LCD_displayCharacter+0x7ac>
    3730:	9a 8b       	std	Y+18, r25	; 0x12
    3732:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3734:	8b 89       	ldd	r24, Y+19	; 0x13
    3736:	9c 89       	ldd	r25, Y+20	; 0x14
    3738:	01 97       	sbiw	r24, 0x01	; 1
    373a:	9c 8b       	std	Y+20, r25	; 0x14
    373c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    373e:	8b 89       	ldd	r24, Y+19	; 0x13
    3740:	9c 89       	ldd	r25, Y+20	; 0x14
    3742:	00 97       	sbiw	r24, 0x00	; 0
    3744:	69 f7       	brne	.-38     	; 0x3720 <LCD_displayCharacter+0x7a0>
    3746:	14 c0       	rjmp	.+40     	; 0x3770 <LCD_displayCharacter+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3748:	6d 89       	ldd	r22, Y+21	; 0x15
    374a:	7e 89       	ldd	r23, Y+22	; 0x16
    374c:	8f 89       	ldd	r24, Y+23	; 0x17
    374e:	98 8d       	ldd	r25, Y+24	; 0x18
    3750:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3754:	dc 01       	movw	r26, r24
    3756:	cb 01       	movw	r24, r22
    3758:	9c 8b       	std	Y+20, r25	; 0x14
    375a:	8b 8b       	std	Y+19, r24	; 0x13
    375c:	8b 89       	ldd	r24, Y+19	; 0x13
    375e:	9c 89       	ldd	r25, Y+20	; 0x14
    3760:	98 8b       	std	Y+16, r25	; 0x10
    3762:	8f 87       	std	Y+15, r24	; 0x0f
    3764:	8f 85       	ldd	r24, Y+15	; 0x0f
    3766:	98 89       	ldd	r25, Y+16	; 0x10
    3768:	01 97       	sbiw	r24, 0x01	; 1
    376a:	f1 f7       	brne	.-4      	; 0x3768 <LCD_displayCharacter+0x7e8>
    376c:	98 8b       	std	Y+16, r25	; 0x10
    376e:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW);
    3770:	80 e0       	ldi	r24, 0x00	; 0
    3772:	62 e0       	ldi	r22, 0x02	; 2
    3774:	40 e0       	ldi	r20, 0x00	; 0
    3776:	0e 94 31 20 	call	0x4062	; 0x4062 <GPIO_writePin>
    377a:	80 e0       	ldi	r24, 0x00	; 0
    377c:	90 e0       	ldi	r25, 0x00	; 0
    377e:	a0 e8       	ldi	r26, 0x80	; 128
    3780:	bf e3       	ldi	r27, 0x3F	; 63
    3782:	8b 87       	std	Y+11, r24	; 0x0b
    3784:	9c 87       	std	Y+12, r25	; 0x0c
    3786:	ad 87       	std	Y+13, r26	; 0x0d
    3788:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    378a:	6b 85       	ldd	r22, Y+11	; 0x0b
    378c:	7c 85       	ldd	r23, Y+12	; 0x0c
    378e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3790:	9e 85       	ldd	r25, Y+14	; 0x0e
    3792:	20 e0       	ldi	r18, 0x00	; 0
    3794:	30 e0       	ldi	r19, 0x00	; 0
    3796:	4a ef       	ldi	r20, 0xFA	; 250
    3798:	54 e4       	ldi	r21, 0x44	; 68
    379a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    379e:	dc 01       	movw	r26, r24
    37a0:	cb 01       	movw	r24, r22
    37a2:	8f 83       	std	Y+7, r24	; 0x07
    37a4:	98 87       	std	Y+8, r25	; 0x08
    37a6:	a9 87       	std	Y+9, r26	; 0x09
    37a8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    37aa:	6f 81       	ldd	r22, Y+7	; 0x07
    37ac:	78 85       	ldd	r23, Y+8	; 0x08
    37ae:	89 85       	ldd	r24, Y+9	; 0x09
    37b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    37b2:	20 e0       	ldi	r18, 0x00	; 0
    37b4:	30 e0       	ldi	r19, 0x00	; 0
    37b6:	40 e8       	ldi	r20, 0x80	; 128
    37b8:	5f e3       	ldi	r21, 0x3F	; 63
    37ba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    37be:	88 23       	and	r24, r24
    37c0:	2c f4       	brge	.+10     	; 0x37cc <LCD_displayCharacter+0x84c>
		__ticks = 1;
    37c2:	81 e0       	ldi	r24, 0x01	; 1
    37c4:	90 e0       	ldi	r25, 0x00	; 0
    37c6:	9e 83       	std	Y+6, r25	; 0x06
    37c8:	8d 83       	std	Y+5, r24	; 0x05
    37ca:	3f c0       	rjmp	.+126    	; 0x384a <LCD_displayCharacter+0x8ca>
	else if (__tmp > 65535)
    37cc:	6f 81       	ldd	r22, Y+7	; 0x07
    37ce:	78 85       	ldd	r23, Y+8	; 0x08
    37d0:	89 85       	ldd	r24, Y+9	; 0x09
    37d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    37d4:	20 e0       	ldi	r18, 0x00	; 0
    37d6:	3f ef       	ldi	r19, 0xFF	; 255
    37d8:	4f e7       	ldi	r20, 0x7F	; 127
    37da:	57 e4       	ldi	r21, 0x47	; 71
    37dc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    37e0:	18 16       	cp	r1, r24
    37e2:	4c f5       	brge	.+82     	; 0x3836 <LCD_displayCharacter+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    37e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    37e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    37ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    37ec:	20 e0       	ldi	r18, 0x00	; 0
    37ee:	30 e0       	ldi	r19, 0x00	; 0
    37f0:	40 e2       	ldi	r20, 0x20	; 32
    37f2:	51 e4       	ldi	r21, 0x41	; 65
    37f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37f8:	dc 01       	movw	r26, r24
    37fa:	cb 01       	movw	r24, r22
    37fc:	bc 01       	movw	r22, r24
    37fe:	cd 01       	movw	r24, r26
    3800:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3804:	dc 01       	movw	r26, r24
    3806:	cb 01       	movw	r24, r22
    3808:	9e 83       	std	Y+6, r25	; 0x06
    380a:	8d 83       	std	Y+5, r24	; 0x05
    380c:	0f c0       	rjmp	.+30     	; 0x382c <LCD_displayCharacter+0x8ac>
    380e:	88 ec       	ldi	r24, 0xC8	; 200
    3810:	90 e0       	ldi	r25, 0x00	; 0
    3812:	9c 83       	std	Y+4, r25	; 0x04
    3814:	8b 83       	std	Y+3, r24	; 0x03
    3816:	8b 81       	ldd	r24, Y+3	; 0x03
    3818:	9c 81       	ldd	r25, Y+4	; 0x04
    381a:	01 97       	sbiw	r24, 0x01	; 1
    381c:	f1 f7       	brne	.-4      	; 0x381a <LCD_displayCharacter+0x89a>
    381e:	9c 83       	std	Y+4, r25	; 0x04
    3820:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3822:	8d 81       	ldd	r24, Y+5	; 0x05
    3824:	9e 81       	ldd	r25, Y+6	; 0x06
    3826:	01 97       	sbiw	r24, 0x01	; 1
    3828:	9e 83       	std	Y+6, r25	; 0x06
    382a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    382c:	8d 81       	ldd	r24, Y+5	; 0x05
    382e:	9e 81       	ldd	r25, Y+6	; 0x06
    3830:	00 97       	sbiw	r24, 0x00	; 0
    3832:	69 f7       	brne	.-38     	; 0x380e <LCD_displayCharacter+0x88e>
    3834:	14 c0       	rjmp	.+40     	; 0x385e <LCD_displayCharacter+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3836:	6f 81       	ldd	r22, Y+7	; 0x07
    3838:	78 85       	ldd	r23, Y+8	; 0x08
    383a:	89 85       	ldd	r24, Y+9	; 0x09
    383c:	9a 85       	ldd	r25, Y+10	; 0x0a
    383e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3842:	dc 01       	movw	r26, r24
    3844:	cb 01       	movw	r24, r22
    3846:	9e 83       	std	Y+6, r25	; 0x06
    3848:	8d 83       	std	Y+5, r24	; 0x05
    384a:	8d 81       	ldd	r24, Y+5	; 0x05
    384c:	9e 81       	ldd	r25, Y+6	; 0x06
    384e:	9a 83       	std	Y+2, r25	; 0x02
    3850:	89 83       	std	Y+1, r24	; 0x01
    3852:	89 81       	ldd	r24, Y+1	; 0x01
    3854:	9a 81       	ldd	r25, Y+2	; 0x02
    3856:	01 97       	sbiw	r24, 0x01	; 1
    3858:	f1 f7       	brne	.-4      	; 0x3856 <LCD_displayCharacter+0x8d6>
    385a:	9a 83       	std	Y+2, r25	; 0x02
    385c:	89 83       	std	Y+1, r24	; 0x01
#endif
#endif



}
    385e:	cd 59       	subi	r28, 0x9D	; 157
    3860:	df 4f       	sbci	r29, 0xFF	; 255
    3862:	0f b6       	in	r0, 0x3f	; 63
    3864:	f8 94       	cli
    3866:	de bf       	out	0x3e, r29	; 62
    3868:	0f be       	out	0x3f, r0	; 63
    386a:	cd bf       	out	0x3d, r28	; 61
    386c:	cf 91       	pop	r28
    386e:	df 91       	pop	r29
    3870:	1f 91       	pop	r17
    3872:	0f 91       	pop	r16
    3874:	08 95       	ret

00003876 <LCD_displayString>:

void LCD_displayString(const char * string) /* Pointer size is equal to access size */
{
    3876:	df 93       	push	r29
    3878:	cf 93       	push	r28
    387a:	00 d0       	rcall	.+0      	; 0x387c <LCD_displayString+0x6>
    387c:	0f 92       	push	r0
    387e:	cd b7       	in	r28, 0x3d	; 61
    3880:	de b7       	in	r29, 0x3e	; 62
    3882:	9b 83       	std	Y+3, r25	; 0x03
    3884:	8a 83       	std	Y+2, r24	; 0x02
	uint8 s_stringLooping;

	for(s_stringLooping=0 ; string[s_stringLooping]!='\0' ; s_stringLooping++)
    3886:	19 82       	std	Y+1, r1	; 0x01
    3888:	11 c0       	rjmp	.+34     	; 0x38ac <LCD_displayString+0x36>
	{
		LCD_displayCharacter(string[s_stringLooping]);
    388a:	89 81       	ldd	r24, Y+1	; 0x01
    388c:	28 2f       	mov	r18, r24
    388e:	30 e0       	ldi	r19, 0x00	; 0
    3890:	8a 81       	ldd	r24, Y+2	; 0x02
    3892:	9b 81       	ldd	r25, Y+3	; 0x03
    3894:	fc 01       	movw	r30, r24
    3896:	e2 0f       	add	r30, r18
    3898:	f3 1f       	adc	r31, r19
    389a:	80 81       	ld	r24, Z
    389c:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <LCD_displayCharacter>

		/*Switch to move cursor on mapped LCD memory only */
		LCD_sendCommand(LCD_MOVE_CURSOR_RIGHT);
    38a0:	86 e0       	ldi	r24, 0x06	; 6
    38a2:	0e 94 45 13 	call	0x268a	; 0x268a <LCD_sendCommand>

void LCD_displayString(const char * string) /* Pointer size is equal to access size */
{
	uint8 s_stringLooping;

	for(s_stringLooping=0 ; string[s_stringLooping]!='\0' ; s_stringLooping++)
    38a6:	89 81       	ldd	r24, Y+1	; 0x01
    38a8:	8f 5f       	subi	r24, 0xFF	; 255
    38aa:	89 83       	std	Y+1, r24	; 0x01
    38ac:	89 81       	ldd	r24, Y+1	; 0x01
    38ae:	28 2f       	mov	r18, r24
    38b0:	30 e0       	ldi	r19, 0x00	; 0
    38b2:	8a 81       	ldd	r24, Y+2	; 0x02
    38b4:	9b 81       	ldd	r25, Y+3	; 0x03
    38b6:	fc 01       	movw	r30, r24
    38b8:	e2 0f       	add	r30, r18
    38ba:	f3 1f       	adc	r31, r19
    38bc:	80 81       	ld	r24, Z
    38be:	88 23       	and	r24, r24
    38c0:	21 f7       	brne	.-56     	; 0x388a <LCD_displayString+0x14>

		/*Switch to move cursor on mapped LCD memory only */
		LCD_sendCommand(LCD_MOVE_CURSOR_RIGHT);
	}

}
    38c2:	0f 90       	pop	r0
    38c4:	0f 90       	pop	r0
    38c6:	0f 90       	pop	r0
    38c8:	cf 91       	pop	r28
    38ca:	df 91       	pop	r29
    38cc:	08 95       	ret

000038ce <LCD_moveCursor>:

void LCD_moveCursor(uint8 row,uint8 col)
{
    38ce:	df 93       	push	r29
    38d0:	cf 93       	push	r28
    38d2:	00 d0       	rcall	.+0      	; 0x38d4 <LCD_moveCursor+0x6>
    38d4:	00 d0       	rcall	.+0      	; 0x38d6 <LCD_moveCursor+0x8>
    38d6:	0f 92       	push	r0
    38d8:	cd b7       	in	r28, 0x3d	; 61
    38da:	de b7       	in	r29, 0x3e	; 62
    38dc:	8a 83       	std	Y+2, r24	; 0x02
    38de:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address ;

	switch(row)
    38e0:	8a 81       	ldd	r24, Y+2	; 0x02
    38e2:	28 2f       	mov	r18, r24
    38e4:	30 e0       	ldi	r19, 0x00	; 0
    38e6:	3d 83       	std	Y+5, r19	; 0x05
    38e8:	2c 83       	std	Y+4, r18	; 0x04
    38ea:	8c 81       	ldd	r24, Y+4	; 0x04
    38ec:	9d 81       	ldd	r25, Y+5	; 0x05
    38ee:	81 30       	cpi	r24, 0x01	; 1
    38f0:	91 05       	cpc	r25, r1
    38f2:	c1 f0       	breq	.+48     	; 0x3924 <LCD_moveCursor+0x56>
    38f4:	2c 81       	ldd	r18, Y+4	; 0x04
    38f6:	3d 81       	ldd	r19, Y+5	; 0x05
    38f8:	22 30       	cpi	r18, 0x02	; 2
    38fa:	31 05       	cpc	r19, r1
    38fc:	2c f4       	brge	.+10     	; 0x3908 <LCD_moveCursor+0x3a>
    38fe:	8c 81       	ldd	r24, Y+4	; 0x04
    3900:	9d 81       	ldd	r25, Y+5	; 0x05
    3902:	00 97       	sbiw	r24, 0x00	; 0
    3904:	61 f0       	breq	.+24     	; 0x391e <LCD_moveCursor+0x50>
    3906:	19 c0       	rjmp	.+50     	; 0x393a <LCD_moveCursor+0x6c>
    3908:	2c 81       	ldd	r18, Y+4	; 0x04
    390a:	3d 81       	ldd	r19, Y+5	; 0x05
    390c:	22 30       	cpi	r18, 0x02	; 2
    390e:	31 05       	cpc	r19, r1
    3910:	69 f0       	breq	.+26     	; 0x392c <LCD_moveCursor+0x5e>
    3912:	8c 81       	ldd	r24, Y+4	; 0x04
    3914:	9d 81       	ldd	r25, Y+5	; 0x05
    3916:	83 30       	cpi	r24, 0x03	; 3
    3918:	91 05       	cpc	r25, r1
    391a:	61 f0       	breq	.+24     	; 0x3934 <LCD_moveCursor+0x66>
    391c:	0e c0       	rjmp	.+28     	; 0x393a <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address = col;
    391e:	8b 81       	ldd	r24, Y+3	; 0x03
    3920:	89 83       	std	Y+1, r24	; 0x01
    3922:	0b c0       	rjmp	.+22     	; 0x393a <LCD_moveCursor+0x6c>
			break;
		case 1:
			lcd_memory_address = col+0x40;
    3924:	8b 81       	ldd	r24, Y+3	; 0x03
    3926:	80 5c       	subi	r24, 0xC0	; 192
    3928:	89 83       	std	Y+1, r24	; 0x01
    392a:	07 c0       	rjmp	.+14     	; 0x393a <LCD_moveCursor+0x6c>
			break;
		case 2:
			lcd_memory_address = col+0x10;
    392c:	8b 81       	ldd	r24, Y+3	; 0x03
    392e:	80 5f       	subi	r24, 0xF0	; 240
    3930:	89 83       	std	Y+1, r24	; 0x01
    3932:	03 c0       	rjmp	.+6      	; 0x393a <LCD_moveCursor+0x6c>
			break;
		case 3:
			lcd_memory_address = col+0x50;
    3934:	8b 81       	ldd	r24, Y+3	; 0x03
    3936:	80 5b       	subi	r24, 0xB0	; 176
    3938:	89 83       	std	Y+1, r24	; 0x01
	/*Line description :
	 * We found out the max. memory location has a binary of 0101 1111
	 * which means that the last bit will always be ZERO , hence it is set to ONE
	 * when we want to the change the cursor location followed by the required
	 * location of cursor to be set  */
	LCD_sendCommand(LCD_SET_CURSOR_LOCATION |lcd_memory_address);
    393a:	89 81       	ldd	r24, Y+1	; 0x01
    393c:	80 68       	ori	r24, 0x80	; 128
    393e:	0e 94 45 13 	call	0x268a	; 0x268a <LCD_sendCommand>
}
    3942:	0f 90       	pop	r0
    3944:	0f 90       	pop	r0
    3946:	0f 90       	pop	r0
    3948:	0f 90       	pop	r0
    394a:	0f 90       	pop	r0
    394c:	cf 91       	pop	r28
    394e:	df 91       	pop	r29
    3950:	08 95       	ret

00003952 <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row , uint8 col,const char * string)
{
    3952:	df 93       	push	r29
    3954:	cf 93       	push	r28
    3956:	00 d0       	rcall	.+0      	; 0x3958 <LCD_displayStringRowColumn+0x6>
    3958:	00 d0       	rcall	.+0      	; 0x395a <LCD_displayStringRowColumn+0x8>
    395a:	cd b7       	in	r28, 0x3d	; 61
    395c:	de b7       	in	r29, 0x3e	; 62
    395e:	89 83       	std	Y+1, r24	; 0x01
    3960:	6a 83       	std	Y+2, r22	; 0x02
    3962:	5c 83       	std	Y+4, r21	; 0x04
    3964:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col);
    3966:	89 81       	ldd	r24, Y+1	; 0x01
    3968:	6a 81       	ldd	r22, Y+2	; 0x02
    396a:	0e 94 67 1c 	call	0x38ce	; 0x38ce <LCD_moveCursor>
	LCD_displayString(string);
    396e:	8b 81       	ldd	r24, Y+3	; 0x03
    3970:	9c 81       	ldd	r25, Y+4	; 0x04
    3972:	0e 94 3b 1c 	call	0x3876	; 0x3876 <LCD_displayString>
}
    3976:	0f 90       	pop	r0
    3978:	0f 90       	pop	r0
    397a:	0f 90       	pop	r0
    397c:	0f 90       	pop	r0
    397e:	cf 91       	pop	r28
    3980:	df 91       	pop	r29
    3982:	08 95       	ret

00003984 <LCD_cleanScreen>:

void LCD_cleanScreen(void)
{
    3984:	df 93       	push	r29
    3986:	cf 93       	push	r28
    3988:	cd b7       	in	r28, 0x3d	; 61
    398a:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    398c:	81 e0       	ldi	r24, 0x01	; 1
    398e:	0e 94 45 13 	call	0x268a	; 0x268a <LCD_sendCommand>
}
    3992:	cf 91       	pop	r28
    3994:	df 91       	pop	r29
    3996:	08 95       	ret

00003998 <LCD_intgerToString>:

void LCD_intgerToString(int data)
{
    3998:	df 93       	push	r29
    399a:	cf 93       	push	r28
    399c:	cd b7       	in	r28, 0x3d	; 61
    399e:	de b7       	in	r29, 0x3e	; 62
    39a0:	62 97       	sbiw	r28, 0x12	; 18
    39a2:	0f b6       	in	r0, 0x3f	; 63
    39a4:	f8 94       	cli
    39a6:	de bf       	out	0x3e, r29	; 62
    39a8:	0f be       	out	0x3f, r0	; 63
    39aa:	cd bf       	out	0x3d, r28	; 61
    39ac:	9a 8b       	std	Y+18, r25	; 0x12
    39ae:	89 8b       	std	Y+17, r24	; 0x11
	char buffer[16];

	/*Integer to ASCII conversion into an array ,
	 * input : input (integer) , array (string) , base of numbers (10)
	 * then is send to string display */
	itoa(data,buffer,10);
    39b0:	89 89       	ldd	r24, Y+17	; 0x11
    39b2:	9a 89       	ldd	r25, Y+18	; 0x12
    39b4:	9e 01       	movw	r18, r28
    39b6:	2f 5f       	subi	r18, 0xFF	; 255
    39b8:	3f 4f       	sbci	r19, 0xFF	; 255
    39ba:	b9 01       	movw	r22, r18
    39bc:	4a e0       	ldi	r20, 0x0A	; 10
    39be:	50 e0       	ldi	r21, 0x00	; 0
    39c0:	0e 94 7e 24 	call	0x48fc	; 0x48fc <itoa>
	LCD_displayString(buffer);
    39c4:	ce 01       	movw	r24, r28
    39c6:	01 96       	adiw	r24, 0x01	; 1
    39c8:	0e 94 3b 1c 	call	0x3876	; 0x3876 <LCD_displayString>
}
    39cc:	62 96       	adiw	r28, 0x12	; 18
    39ce:	0f b6       	in	r0, 0x3f	; 63
    39d0:	f8 94       	cli
    39d2:	de bf       	out	0x3e, r29	; 62
    39d4:	0f be       	out	0x3f, r0	; 63
    39d6:	cd bf       	out	0x3d, r28	; 61
    39d8:	cf 91       	pop	r28
    39da:	df 91       	pop	r29
    39dc:	08 95       	ret

000039de <Timer1_init>:
 *******************************************************************************/

/* Description :
 * Initialize TIMER1 with required configuration from Config_Ptr*/
void Timer1_init(const Timer1_ConfigType * Config_Ptr)
{
    39de:	df 93       	push	r29
    39e0:	cf 93       	push	r28
    39e2:	00 d0       	rcall	.+0      	; 0x39e4 <Timer1_init+0x6>
    39e4:	00 d0       	rcall	.+0      	; 0x39e6 <Timer1_init+0x8>
    39e6:	cd b7       	in	r28, 0x3d	; 61
    39e8:	de b7       	in	r29, 0x3e	; 62
    39ea:	9a 83       	std	Y+2, r25	; 0x02
    39ec:	89 83       	std	Y+1, r24	; 0x01
	/*Set Initial counting value inside TCNT1*/
	TCNT1 = Config_Ptr->initial_value;
    39ee:	ac e4       	ldi	r26, 0x4C	; 76
    39f0:	b0 e0       	ldi	r27, 0x00	; 0
    39f2:	e9 81       	ldd	r30, Y+1	; 0x01
    39f4:	fa 81       	ldd	r31, Y+2	; 0x02
    39f6:	80 81       	ld	r24, Z
    39f8:	91 81       	ldd	r25, Z+1	; 0x01
    39fa:	11 96       	adiw	r26, 0x01	; 1
    39fc:	9c 93       	st	X, r25
    39fe:	8e 93       	st	-X, r24
	*  COM1B1:0 = 0 Disable Compare Output Mode for Compare unit B
	*  FOC1A  	= 1 Force Output Compare for Compare unit A
	*  FOC1B 	= 1 Force Output Compare for Compare unit B
	*  WGM11:0  = 0 Waveform Generation Mode (ZERO for both Normal & CTC)
	*************************************************/
	TCCR1A = (1<<FOC1A) | (1<<FOC1B) ;
    3a00:	ef e4       	ldi	r30, 0x4F	; 79
    3a02:	f0 e0       	ldi	r31, 0x00	; 0
    3a04:	8c e0       	ldi	r24, 0x0C	; 12
    3a06:	80 83       	st	Z, r24
	*  WGM13:2 = Config_PTR  Waveform Generation Mode ( Set in next Switch statement )
	*  CS12:0  = Config_PTR  Clock Select (Pre-scalar)
	*
	*  BIT # 5 must be written to zero when writing in TCCR1B
	*************************************************/
	TCCR1B = (TCCR1B & ~(0x07)) | ( 0x07 & (Config_Ptr->prescaler) );
    3a08:	ae e4       	ldi	r26, 0x4E	; 78
    3a0a:	b0 e0       	ldi	r27, 0x00	; 0
    3a0c:	ee e4       	ldi	r30, 0x4E	; 78
    3a0e:	f0 e0       	ldi	r31, 0x00	; 0
    3a10:	80 81       	ld	r24, Z
    3a12:	98 2f       	mov	r25, r24
    3a14:	98 7f       	andi	r25, 0xF8	; 248
    3a16:	e9 81       	ldd	r30, Y+1	; 0x01
    3a18:	fa 81       	ldd	r31, Y+2	; 0x02
    3a1a:	84 81       	ldd	r24, Z+4	; 0x04
    3a1c:	87 70       	andi	r24, 0x07	; 7
    3a1e:	89 2b       	or	r24, r25
    3a20:	8c 93       	st	X, r24
	*  TICIE1 = 0  			Input Capture Interrupt Enable
	*  OCIE1A = Config_PTR  Output Compare A Match Interrupt Enable
	*  OCIE1B = 0			Output Compare B Match Interrupt Enable
	*  TOIE1  = Config_PTR  Overflow Interrupt Enable
	*************************************************/
	switch(Config_Ptr->mode)
    3a22:	e9 81       	ldd	r30, Y+1	; 0x01
    3a24:	fa 81       	ldd	r31, Y+2	; 0x02
    3a26:	85 81       	ldd	r24, Z+5	; 0x05
    3a28:	28 2f       	mov	r18, r24
    3a2a:	30 e0       	ldi	r19, 0x00	; 0
    3a2c:	3c 83       	std	Y+4, r19	; 0x04
    3a2e:	2b 83       	std	Y+3, r18	; 0x03
    3a30:	8b 81       	ldd	r24, Y+3	; 0x03
    3a32:	9c 81       	ldd	r25, Y+4	; 0x04
    3a34:	00 97       	sbiw	r24, 0x00	; 0
    3a36:	31 f0       	breq	.+12     	; 0x3a44 <Timer1_init+0x66>
    3a38:	2b 81       	ldd	r18, Y+3	; 0x03
    3a3a:	3c 81       	ldd	r19, Y+4	; 0x04
    3a3c:	21 30       	cpi	r18, 0x01	; 1
    3a3e:	31 05       	cpc	r19, r1
    3a40:	49 f0       	breq	.+18     	; 0x3a54 <Timer1_init+0x76>
    3a42:	1f c0       	rjmp	.+62     	; 0x3a82 <Timer1_init+0xa4>
	{
	case Normal:

		SET_BIT(TIMSK,TOIE1); /*Enable Input Capture Interrupt */
    3a44:	a9 e5       	ldi	r26, 0x59	; 89
    3a46:	b0 e0       	ldi	r27, 0x00	; 0
    3a48:	e9 e5       	ldi	r30, 0x59	; 89
    3a4a:	f0 e0       	ldi	r31, 0x00	; 0
    3a4c:	80 81       	ld	r24, Z
    3a4e:	84 60       	ori	r24, 0x04	; 4
    3a50:	8c 93       	st	X, r24
    3a52:	17 c0       	rjmp	.+46     	; 0x3a82 <Timer1_init+0xa4>

		break;

	case Compare :

		SET_BIT(TIMSK,OCIE1A); /*Enable Output Compare A Match Interrupt*/
    3a54:	a9 e5       	ldi	r26, 0x59	; 89
    3a56:	b0 e0       	ldi	r27, 0x00	; 0
    3a58:	e9 e5       	ldi	r30, 0x59	; 89
    3a5a:	f0 e0       	ldi	r31, 0x00	; 0
    3a5c:	80 81       	ld	r24, Z
    3a5e:	80 61       	ori	r24, 0x10	; 16
    3a60:	8c 93       	st	X, r24

		OCR1A = Config_Ptr->compare_value;
    3a62:	aa e4       	ldi	r26, 0x4A	; 74
    3a64:	b0 e0       	ldi	r27, 0x00	; 0
    3a66:	e9 81       	ldd	r30, Y+1	; 0x01
    3a68:	fa 81       	ldd	r31, Y+2	; 0x02
    3a6a:	82 81       	ldd	r24, Z+2	; 0x02
    3a6c:	93 81       	ldd	r25, Z+3	; 0x03
    3a6e:	11 96       	adiw	r26, 0x01	; 1
    3a70:	9c 93       	st	X, r25
    3a72:	8e 93       	st	-X, r24

		TCCR1B |= (1<<WGM12); /*Set wave generation mode to CTC*/
    3a74:	ae e4       	ldi	r26, 0x4E	; 78
    3a76:	b0 e0       	ldi	r27, 0x00	; 0
    3a78:	ee e4       	ldi	r30, 0x4E	; 78
    3a7a:	f0 e0       	ldi	r31, 0x00	; 0
    3a7c:	80 81       	ld	r24, Z
    3a7e:	88 60       	ori	r24, 0x08	; 8
    3a80:	8c 93       	st	X, r24

		break;
	}

	SET_BIT(SREG,7);
    3a82:	af e5       	ldi	r26, 0x5F	; 95
    3a84:	b0 e0       	ldi	r27, 0x00	; 0
    3a86:	ef e5       	ldi	r30, 0x5F	; 95
    3a88:	f0 e0       	ldi	r31, 0x00	; 0
    3a8a:	80 81       	ld	r24, Z
    3a8c:	80 68       	ori	r24, 0x80	; 128
    3a8e:	8c 93       	st	X, r24
}
    3a90:	0f 90       	pop	r0
    3a92:	0f 90       	pop	r0
    3a94:	0f 90       	pop	r0
    3a96:	0f 90       	pop	r0
    3a98:	cf 91       	pop	r28
    3a9a:	df 91       	pop	r29
    3a9c:	08 95       	ret

00003a9e <Timer1_deInit>:

/* Description :
 * Uninitialize /TurnOff TIMER1 and reset its counter/settings registers */
void Timer1_deInit(void)
{
    3a9e:	df 93       	push	r29
    3aa0:	cf 93       	push	r28
    3aa2:	cd b7       	in	r28, 0x3d	; 61
    3aa4:	de b7       	in	r29, 0x3e	; 62
	/*Reset all the previously set Registers back to default state */

	CLEAR_BIT(SREG,7);
    3aa6:	af e5       	ldi	r26, 0x5F	; 95
    3aa8:	b0 e0       	ldi	r27, 0x00	; 0
    3aaa:	ef e5       	ldi	r30, 0x5F	; 95
    3aac:	f0 e0       	ldi	r31, 0x00	; 0
    3aae:	80 81       	ld	r24, Z
    3ab0:	8f 77       	andi	r24, 0x7F	; 127
    3ab2:	8c 93       	st	X, r24

	TCNT1 = 0;
    3ab4:	ec e4       	ldi	r30, 0x4C	; 76
    3ab6:	f0 e0       	ldi	r31, 0x00	; 0
    3ab8:	11 82       	std	Z+1, r1	; 0x01
    3aba:	10 82       	st	Z, r1
	OCR1A = 0;
    3abc:	ea e4       	ldi	r30, 0x4A	; 74
    3abe:	f0 e0       	ldi	r31, 0x00	; 0
    3ac0:	11 82       	std	Z+1, r1	; 0x01
    3ac2:	10 82       	st	Z, r1
	TCCR1A = 0 ;
    3ac4:	ef e4       	ldi	r30, 0x4F	; 79
    3ac6:	f0 e0       	ldi	r31, 0x00	; 0
    3ac8:	10 82       	st	Z, r1
	TCCR1B = 0 ;
    3aca:	ee e4       	ldi	r30, 0x4E	; 78
    3acc:	f0 e0       	ldi	r31, 0x00	; 0
    3ace:	10 82       	st	Z, r1

	/* 0b11000011*/
	TIMSK &= 0xC3 ;
    3ad0:	a9 e5       	ldi	r26, 0x59	; 89
    3ad2:	b0 e0       	ldi	r27, 0x00	; 0
    3ad4:	e9 e5       	ldi	r30, 0x59	; 89
    3ad6:	f0 e0       	ldi	r31, 0x00	; 0
    3ad8:	80 81       	ld	r24, Z
    3ada:	83 7c       	andi	r24, 0xC3	; 195
    3adc:	8c 93       	st	X, r24

	/*Set the callback pointer back to NULL */
	g_callBackPtr = NULL_PTR;
    3ade:	10 92 6f 01 	sts	0x016F, r1
    3ae2:	10 92 6e 01 	sts	0x016E, r1
}
    3ae6:	cf 91       	pop	r28
    3ae8:	df 91       	pop	r29
    3aea:	08 95       	ret

00003aec <Timer1_setCallBack>:

/* Description :
 * Sent the address of the required function to be called at ISR toggle
 * from higher/different abstraction level */
void Timer1_setCallBack(void(*a_ptr)(void)){
    3aec:	df 93       	push	r29
    3aee:	cf 93       	push	r28
    3af0:	00 d0       	rcall	.+0      	; 0x3af2 <Timer1_setCallBack+0x6>
    3af2:	cd b7       	in	r28, 0x3d	; 61
    3af4:	de b7       	in	r29, 0x3e	; 62
    3af6:	9a 83       	std	Y+2, r25	; 0x02
    3af8:	89 83       	std	Y+1, r24	; 0x01

	g_callBackPtr = a_ptr;
    3afa:	89 81       	ldd	r24, Y+1	; 0x01
    3afc:	9a 81       	ldd	r25, Y+2	; 0x02
    3afe:	90 93 6f 01 	sts	0x016F, r25
    3b02:	80 93 6e 01 	sts	0x016E, r24
}
    3b06:	0f 90       	pop	r0
    3b08:	0f 90       	pop	r0
    3b0a:	cf 91       	pop	r28
    3b0c:	df 91       	pop	r29
    3b0e:	08 95       	ret

00003b10 <__vector_7>:
/*******************************************************************************
 *                                ISR Definitions 	                           *
 *******************************************************************************/

ISR(TIMER1_COMPA_vect)
{
    3b10:	1f 92       	push	r1
    3b12:	0f 92       	push	r0
    3b14:	0f b6       	in	r0, 0x3f	; 63
    3b16:	0f 92       	push	r0
    3b18:	11 24       	eor	r1, r1
    3b1a:	2f 93       	push	r18
    3b1c:	3f 93       	push	r19
    3b1e:	4f 93       	push	r20
    3b20:	5f 93       	push	r21
    3b22:	6f 93       	push	r22
    3b24:	7f 93       	push	r23
    3b26:	8f 93       	push	r24
    3b28:	9f 93       	push	r25
    3b2a:	af 93       	push	r26
    3b2c:	bf 93       	push	r27
    3b2e:	ef 93       	push	r30
    3b30:	ff 93       	push	r31
    3b32:	df 93       	push	r29
    3b34:	cf 93       	push	r28
    3b36:	cd b7       	in	r28, 0x3d	; 61
    3b38:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    3b3a:	80 91 6e 01 	lds	r24, 0x016E
    3b3e:	90 91 6f 01 	lds	r25, 0x016F
    3b42:	00 97       	sbiw	r24, 0x00	; 0
    3b44:	29 f0       	breq	.+10     	; 0x3b50 <__vector_7+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		g_callBackPtr();
    3b46:	e0 91 6e 01 	lds	r30, 0x016E
    3b4a:	f0 91 6f 01 	lds	r31, 0x016F
    3b4e:	09 95       	icall
		//(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
	}
}
    3b50:	cf 91       	pop	r28
    3b52:	df 91       	pop	r29
    3b54:	ff 91       	pop	r31
    3b56:	ef 91       	pop	r30
    3b58:	bf 91       	pop	r27
    3b5a:	af 91       	pop	r26
    3b5c:	9f 91       	pop	r25
    3b5e:	8f 91       	pop	r24
    3b60:	7f 91       	pop	r23
    3b62:	6f 91       	pop	r22
    3b64:	5f 91       	pop	r21
    3b66:	4f 91       	pop	r20
    3b68:	3f 91       	pop	r19
    3b6a:	2f 91       	pop	r18
    3b6c:	0f 90       	pop	r0
    3b6e:	0f be       	out	0x3f, r0	; 63
    3b70:	0f 90       	pop	r0
    3b72:	1f 90       	pop	r1
    3b74:	18 95       	reti

00003b76 <__vector_9>:

ISR(TIMER1_OVF_vect)
{
    3b76:	1f 92       	push	r1
    3b78:	0f 92       	push	r0
    3b7a:	0f b6       	in	r0, 0x3f	; 63
    3b7c:	0f 92       	push	r0
    3b7e:	11 24       	eor	r1, r1
    3b80:	2f 93       	push	r18
    3b82:	3f 93       	push	r19
    3b84:	4f 93       	push	r20
    3b86:	5f 93       	push	r21
    3b88:	6f 93       	push	r22
    3b8a:	7f 93       	push	r23
    3b8c:	8f 93       	push	r24
    3b8e:	9f 93       	push	r25
    3b90:	af 93       	push	r26
    3b92:	bf 93       	push	r27
    3b94:	ef 93       	push	r30
    3b96:	ff 93       	push	r31
    3b98:	df 93       	push	r29
    3b9a:	cf 93       	push	r28
    3b9c:	cd b7       	in	r28, 0x3d	; 61
    3b9e:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    3ba0:	80 91 6e 01 	lds	r24, 0x016E
    3ba4:	90 91 6f 01 	lds	r25, 0x016F
    3ba8:	00 97       	sbiw	r24, 0x00	; 0
    3baa:	29 f0       	breq	.+10     	; 0x3bb6 <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */

		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    3bac:	e0 91 6e 01 	lds	r30, 0x016E
    3bb0:	f0 91 6f 01 	lds	r31, 0x016F
    3bb4:	09 95       	icall
	}
}
    3bb6:	cf 91       	pop	r28
    3bb8:	df 91       	pop	r29
    3bba:	ff 91       	pop	r31
    3bbc:	ef 91       	pop	r30
    3bbe:	bf 91       	pop	r27
    3bc0:	af 91       	pop	r26
    3bc2:	9f 91       	pop	r25
    3bc4:	8f 91       	pop	r24
    3bc6:	7f 91       	pop	r23
    3bc8:	6f 91       	pop	r22
    3bca:	5f 91       	pop	r21
    3bcc:	4f 91       	pop	r20
    3bce:	3f 91       	pop	r19
    3bd0:	2f 91       	pop	r18
    3bd2:	0f 90       	pop	r0
    3bd4:	0f be       	out	0x3f, r0	; 63
    3bd6:	0f 90       	pop	r0
    3bd8:	1f 90       	pop	r1
    3bda:	18 95       	reti

00003bdc <UART_init>:
 * 3. Selecting number of stop bits ( One_Bit , Two_Bits )
 * 4. Selecting Baud rate
 * 5. Setting data frame bits ( 5 , 6 ,  7 , 8 )
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    3bdc:	df 93       	push	r29
    3bde:	cf 93       	push	r28
    3be0:	00 d0       	rcall	.+0      	; 0x3be2 <UART_init+0x6>
    3be2:	00 d0       	rcall	.+0      	; 0x3be4 <UART_init+0x8>
    3be4:	cd b7       	in	r28, 0x3d	; 61
    3be6:	de b7       	in	r29, 0x3e	; 62
    3be8:	9c 83       	std	Y+4, r25	; 0x04
    3bea:	8b 83       	std	Y+3, r24	; 0x03
	uint16 Baud_rate = 0 ; /*Variable that holds the result of the Baud calculations */
    3bec:	1a 82       	std	Y+2, r1	; 0x02
    3bee:	19 82       	std	Y+1, r1	; 0x01

	UCSRA = (1<<U2X); /*For double transmission speed*/
    3bf0:	eb e2       	ldi	r30, 0x2B	; 43
    3bf2:	f0 e0       	ldi	r31, 0x00	; 0
    3bf4:	82 e0       	ldi	r24, 0x02	; 2
    3bf6:	80 83       	st	Z, r24
	*  UCSZ2 = 0 Character size
	*  RXB8  = 0 Receiver data bit 8
	*  TXB8  = 0 Transmitter data bit 8
	*************************************************/

	UCSRB = (1<<TXEN) | (1<<RXEN);
    3bf8:	ea e2       	ldi	r30, 0x2A	; 42
    3bfa:	f0 e0       	ldi	r31, 0x00	; 0
    3bfc:	88 e1       	ldi	r24, 0x18	; 24
    3bfe:	80 83       	st	Z, r24
	*  UMSEL 	= 0 		  Asynchronous Operation
	*  UCSZ2:0  = Config_Ptr  Select Number of data bits
	*  UPM1:0   = Config_Ptr  Select Parity check
	*  USBS  	= Config_Ptr  Select number of stop bits
	*************************************************/
	SET_BIT(UCSRC,URSEL);
    3c00:	a0 e4       	ldi	r26, 0x40	; 64
    3c02:	b0 e0       	ldi	r27, 0x00	; 0
    3c04:	e0 e4       	ldi	r30, 0x40	; 64
    3c06:	f0 e0       	ldi	r31, 0x00	; 0
    3c08:	80 81       	ld	r24, Z
    3c0a:	80 68       	ori	r24, 0x80	; 128
    3c0c:	8c 93       	st	X, r24

	UCSRC = (UCSRC & ~(0x06)) | (((Config_Ptr->bit_data)<<UCSZ0) & 0x06) ;
    3c0e:	a0 e4       	ldi	r26, 0x40	; 64
    3c10:	b0 e0       	ldi	r27, 0x00	; 0
    3c12:	e0 e4       	ldi	r30, 0x40	; 64
    3c14:	f0 e0       	ldi	r31, 0x00	; 0
    3c16:	80 81       	ld	r24, Z
    3c18:	28 2f       	mov	r18, r24
    3c1a:	29 7f       	andi	r18, 0xF9	; 249
    3c1c:	eb 81       	ldd	r30, Y+3	; 0x03
    3c1e:	fc 81       	ldd	r31, Y+4	; 0x04
    3c20:	80 81       	ld	r24, Z
    3c22:	88 2f       	mov	r24, r24
    3c24:	90 e0       	ldi	r25, 0x00	; 0
    3c26:	88 0f       	add	r24, r24
    3c28:	99 1f       	adc	r25, r25
    3c2a:	86 70       	andi	r24, 0x06	; 6
    3c2c:	82 2b       	or	r24, r18
    3c2e:	8c 93       	st	X, r24

	UCSRC = (UCSRC & ~(0x30)) | (((Config_Ptr->parity)<<UPM0)    & 0x30) ;
    3c30:	a0 e4       	ldi	r26, 0x40	; 64
    3c32:	b0 e0       	ldi	r27, 0x00	; 0
    3c34:	e0 e4       	ldi	r30, 0x40	; 64
    3c36:	f0 e0       	ldi	r31, 0x00	; 0
    3c38:	80 81       	ld	r24, Z
    3c3a:	28 2f       	mov	r18, r24
    3c3c:	2f 7c       	andi	r18, 0xCF	; 207
    3c3e:	eb 81       	ldd	r30, Y+3	; 0x03
    3c40:	fc 81       	ldd	r31, Y+4	; 0x04
    3c42:	81 81       	ldd	r24, Z+1	; 0x01
    3c44:	88 2f       	mov	r24, r24
    3c46:	90 e0       	ldi	r25, 0x00	; 0
    3c48:	82 95       	swap	r24
    3c4a:	92 95       	swap	r25
    3c4c:	90 7f       	andi	r25, 0xF0	; 240
    3c4e:	98 27       	eor	r25, r24
    3c50:	80 7f       	andi	r24, 0xF0	; 240
    3c52:	98 27       	eor	r25, r24
    3c54:	80 73       	andi	r24, 0x30	; 48
    3c56:	82 2b       	or	r24, r18
    3c58:	8c 93       	st	X, r24

	UCSRC = (UCSRC & ~(0x08)) | (((Config_Ptr->stop_bit)<<USBS)  & 0x08) ;
    3c5a:	a0 e4       	ldi	r26, 0x40	; 64
    3c5c:	b0 e0       	ldi	r27, 0x00	; 0
    3c5e:	e0 e4       	ldi	r30, 0x40	; 64
    3c60:	f0 e0       	ldi	r31, 0x00	; 0
    3c62:	80 81       	ld	r24, Z
    3c64:	28 2f       	mov	r18, r24
    3c66:	27 7f       	andi	r18, 0xF7	; 247
    3c68:	eb 81       	ldd	r30, Y+3	; 0x03
    3c6a:	fc 81       	ldd	r31, Y+4	; 0x04
    3c6c:	82 81       	ldd	r24, Z+2	; 0x02
    3c6e:	88 2f       	mov	r24, r24
    3c70:	90 e0       	ldi	r25, 0x00	; 0
    3c72:	88 0f       	add	r24, r24
    3c74:	99 1f       	adc	r25, r25
    3c76:	88 0f       	add	r24, r24
    3c78:	99 1f       	adc	r25, r25
    3c7a:	88 0f       	add	r24, r24
    3c7c:	99 1f       	adc	r25, r25
    3c7e:	88 70       	andi	r24, 0x08	; 8
    3c80:	82 2b       	or	r24, r18
    3c82:	8c 93       	st	X, r24

	CLEAR_BIT(UCSRC,UMSEL);
    3c84:	a0 e4       	ldi	r26, 0x40	; 64
    3c86:	b0 e0       	ldi	r27, 0x00	; 0
    3c88:	e0 e4       	ldi	r30, 0x40	; 64
    3c8a:	f0 e0       	ldi	r31, 0x00	; 0
    3c8c:	80 81       	ld	r24, Z
    3c8e:	8f 7b       	andi	r24, 0xBF	; 191
    3c90:	8c 93       	st	X, r24

	/*************************************************
	***************** UBRRL Settings ****************
	*	UBRR formula = ( ( F_CPU / (8*BAUD_rate) ) -1 )
	*************************************************/
	Baud_rate = (uint16) (  (F_CPU / (Config_Ptr->baud_rate *8UL) )  - 1);
    3c92:	eb 81       	ldd	r30, Y+3	; 0x03
    3c94:	fc 81       	ldd	r31, Y+4	; 0x04
    3c96:	83 81       	ldd	r24, Z+3	; 0x03
    3c98:	94 81       	ldd	r25, Z+4	; 0x04
    3c9a:	a5 81       	ldd	r26, Z+5	; 0x05
    3c9c:	b6 81       	ldd	r27, Z+6	; 0x06
    3c9e:	88 0f       	add	r24, r24
    3ca0:	99 1f       	adc	r25, r25
    3ca2:	aa 1f       	adc	r26, r26
    3ca4:	bb 1f       	adc	r27, r27
    3ca6:	88 0f       	add	r24, r24
    3ca8:	99 1f       	adc	r25, r25
    3caa:	aa 1f       	adc	r26, r26
    3cac:	bb 1f       	adc	r27, r27
    3cae:	88 0f       	add	r24, r24
    3cb0:	99 1f       	adc	r25, r25
    3cb2:	aa 1f       	adc	r26, r26
    3cb4:	bb 1f       	adc	r27, r27
    3cb6:	9c 01       	movw	r18, r24
    3cb8:	ad 01       	movw	r20, r26
    3cba:	80 e0       	ldi	r24, 0x00	; 0
    3cbc:	92 e1       	ldi	r25, 0x12	; 18
    3cbe:	aa e7       	ldi	r26, 0x7A	; 122
    3cc0:	b0 e0       	ldi	r27, 0x00	; 0
    3cc2:	bc 01       	movw	r22, r24
    3cc4:	cd 01       	movw	r24, r26
    3cc6:	0e 94 25 24 	call	0x484a	; 0x484a <__udivmodsi4>
    3cca:	da 01       	movw	r26, r20
    3ccc:	c9 01       	movw	r24, r18
    3cce:	01 97       	sbiw	r24, 0x01	; 1
    3cd0:	9a 83       	std	Y+2, r25	; 0x02
    3cd2:	89 83       	std	Y+1, r24	; 0x01

	/* Sets the the Last 8-bits of the Baud_rate IF available
	 * by shifting right with 8 into UBRRH , then sets the First
	 * 8-bits into UBRRL */
	UBRRH =  Baud_rate >> 8  ;
    3cd4:	e0 e4       	ldi	r30, 0x40	; 64
    3cd6:	f0 e0       	ldi	r31, 0x00	; 0
    3cd8:	89 81       	ldd	r24, Y+1	; 0x01
    3cda:	9a 81       	ldd	r25, Y+2	; 0x02
    3cdc:	89 2f       	mov	r24, r25
    3cde:	99 27       	eor	r25, r25
    3ce0:	80 83       	st	Z, r24
	UBRRL =  Baud_rate ;
    3ce2:	e9 e2       	ldi	r30, 0x29	; 41
    3ce4:	f0 e0       	ldi	r31, 0x00	; 0
    3ce6:	89 81       	ldd	r24, Y+1	; 0x01
    3ce8:	80 83       	st	Z, r24
}
    3cea:	0f 90       	pop	r0
    3cec:	0f 90       	pop	r0
    3cee:	0f 90       	pop	r0
    3cf0:	0f 90       	pop	r0
    3cf2:	cf 91       	pop	r28
    3cf4:	df 91       	pop	r29
    3cf6:	08 95       	ret

00003cf8 <UART_recieveByte>:

/* Description
 * return the value of the received byte through UART frame
 */
uint8 UART_recieveByte(void)
{
    3cf8:	df 93       	push	r29
    3cfa:	cf 93       	push	r28
    3cfc:	cd b7       	in	r28, 0x3d	; 61
    3cfe:	de b7       	in	r29, 0x3e	; 62
	/*Pooling Technique
	 * checks the USART receive bit flag
	 * if it's ZERO , the receive buffer is still empty OR
	 * has no unread data */
	while(BIT_IS_CLEAR(UCSRA,RXC));
    3d00:	eb e2       	ldi	r30, 0x2B	; 43
    3d02:	f0 e0       	ldi	r31, 0x00	; 0
    3d04:	80 81       	ld	r24, Z
    3d06:	88 23       	and	r24, r24
    3d08:	dc f7       	brge	.-10     	; 0x3d00 <UART_recieveByte+0x8>

	/*When flag is set to ONE , the receive buffer has data that is unread
	 * & return the Data register */
	return UDR;
    3d0a:	ec e2       	ldi	r30, 0x2C	; 44
    3d0c:	f0 e0       	ldi	r31, 0x00	; 0
    3d0e:	80 81       	ld	r24, Z
}
    3d10:	cf 91       	pop	r28
    3d12:	df 91       	pop	r29
    3d14:	08 95       	ret

00003d16 <UART_sendByte>:
/* Description
 * Send 8-bit data through UART frame
 * uses the UDRE flag check in order to send data without overwriting of prev. unsent data
 */
void UART_sendByte(uint8 data) /*UDRE flag pooling method*/
{
    3d16:	df 93       	push	r29
    3d18:	cf 93       	push	r28
    3d1a:	0f 92       	push	r0
    3d1c:	cd b7       	in	r28, 0x3d	; 61
    3d1e:	de b7       	in	r29, 0x3e	; 62
    3d20:	89 83       	std	Y+1, r24	; 0x01
	/*The loop checks on the empty data register flag (UDRE)
	 * while the flag is ZERO , the data buffer is still contains data
	 * that is to be sent and not ready to receive new one*/
	while(BIT_IS_CLEAR(UCSRA,UDRE));
    3d22:	eb e2       	ldi	r30, 0x2B	; 43
    3d24:	f0 e0       	ldi	r31, 0x00	; 0
    3d26:	80 81       	ld	r24, Z
    3d28:	88 2f       	mov	r24, r24
    3d2a:	90 e0       	ldi	r25, 0x00	; 0
    3d2c:	80 72       	andi	r24, 0x20	; 32
    3d2e:	90 70       	andi	r25, 0x00	; 0
    3d30:	00 97       	sbiw	r24, 0x00	; 0
    3d32:	b9 f3       	breq	.-18     	; 0x3d22 <UART_sendByte+0xc>

	/*Once the flag is set to ONE , the loop exits and sends the data byte
	 * to the buffer for transmitting */
	UDR = data ;
    3d34:	ec e2       	ldi	r30, 0x2C	; 44
    3d36:	f0 e0       	ldi	r31, 0x00	; 0
    3d38:	89 81       	ldd	r24, Y+1	; 0x01
    3d3a:	80 83       	st	Z, r24

	* set the bit of TXC in order to clear the flag
	SET_BIT(UCSRA,TXC);*/


}
    3d3c:	0f 90       	pop	r0
    3d3e:	cf 91       	pop	r28
    3d40:	df 91       	pop	r29
    3d42:	08 95       	ret

00003d44 <UART_recieveString>:
 * into an string ( pointer to global string )
 * & replace the '#' that indicates the end of the string
 * with '\0' to set the string Null
 */
void UART_recieveString(uint8 *Str)
{
    3d44:	df 93       	push	r29
    3d46:	cf 93       	push	r28
    3d48:	00 d0       	rcall	.+0      	; 0x3d4a <UART_recieveString+0x6>
    3d4a:	0f 92       	push	r0
    3d4c:	cd b7       	in	r28, 0x3d	; 61
    3d4e:	de b7       	in	r29, 0x3e	; 62
    3d50:	9b 83       	std	Y+3, r25	; 0x03
    3d52:	8a 83       	std	Y+2, r24	; 0x02
	/*Variable to loop on the string*/
	uint8 bufferBit = 0 ;
    3d54:	19 82       	std	Y+1, r1	; 0x01

	/*Do-While loop , takes the first byte of the array and then
	 * loop till the string receives the '#' character*/
	do
	{
		Str[bufferBit] = UART_recieveByte;
    3d56:	89 81       	ldd	r24, Y+1	; 0x01
    3d58:	28 2f       	mov	r18, r24
    3d5a:	30 e0       	ldi	r19, 0x00	; 0
    3d5c:	8a 81       	ldd	r24, Y+2	; 0x02
    3d5e:	9b 81       	ldd	r25, Y+3	; 0x03
    3d60:	fc 01       	movw	r30, r24
    3d62:	e2 0f       	add	r30, r18
    3d64:	f3 1f       	adc	r31, r19
    3d66:	8c e7       	ldi	r24, 0x7C	; 124
    3d68:	9e e1       	ldi	r25, 0x1E	; 30
    3d6a:	80 83       	st	Z, r24
		bufferBit++;
    3d6c:	89 81       	ldd	r24, Y+1	; 0x01
    3d6e:	8f 5f       	subi	r24, 0xFF	; 255
    3d70:	89 83       	std	Y+1, r24	; 0x01

	}while(UART_recieveByte != '#');
    3d72:	8c e7       	ldi	r24, 0x7C	; 124
    3d74:	9e e1       	ldi	r25, 0x1E	; 30
    3d76:	83 32       	cpi	r24, 0x23	; 35
    3d78:	91 05       	cpc	r25, r1
    3d7a:	69 f7       	brne	.-38     	; 0x3d56 <UART_recieveString+0x12>

	/*Return back to the '#' character and replaces it with null '\0' */
	bufferBit--;
    3d7c:	89 81       	ldd	r24, Y+1	; 0x01
    3d7e:	81 50       	subi	r24, 0x01	; 1
    3d80:	89 83       	std	Y+1, r24	; 0x01
	Str[bufferBit] = '\0';
    3d82:	89 81       	ldd	r24, Y+1	; 0x01
    3d84:	28 2f       	mov	r18, r24
    3d86:	30 e0       	ldi	r19, 0x00	; 0
    3d88:	8a 81       	ldd	r24, Y+2	; 0x02
    3d8a:	9b 81       	ldd	r25, Y+3	; 0x03
    3d8c:	fc 01       	movw	r30, r24
    3d8e:	e2 0f       	add	r30, r18
    3d90:	f3 1f       	adc	r31, r19
    3d92:	10 82       	st	Z, r1

}
    3d94:	0f 90       	pop	r0
    3d96:	0f 90       	pop	r0
    3d98:	0f 90       	pop	r0
    3d9a:	cf 91       	pop	r28
    3d9c:	df 91       	pop	r29
    3d9e:	08 95       	ret

00003da0 <UART_sendString>:
/* Description
 * Send array of string through UART frame
 * until the '#' character is detected
 */
void UART_sendString(const char *Str)
{
    3da0:	df 93       	push	r29
    3da2:	cf 93       	push	r28
    3da4:	00 d0       	rcall	.+0      	; 0x3da6 <UART_sendString+0x6>
    3da6:	0f 92       	push	r0
    3da8:	cd b7       	in	r28, 0x3d	; 61
    3daa:	de b7       	in	r29, 0x3e	; 62
    3dac:	9b 83       	std	Y+3, r25	; 0x03
    3dae:	8a 83       	std	Y+2, r24	; 0x02
	/*Variable to loop on the string*/
	uint8 bufferBit = 0 ;
    3db0:	19 82       	std	Y+1, r1	; 0x01
    3db2:	0e c0       	rjmp	.+28     	; 0x3dd0 <UART_sendString+0x30>

	/*Loop on the string and send Byte by Byte*/
	while(Str[bufferBit] != '\0')
	{
		UART_sendByte(Str[bufferBit]);
    3db4:	89 81       	ldd	r24, Y+1	; 0x01
    3db6:	28 2f       	mov	r18, r24
    3db8:	30 e0       	ldi	r19, 0x00	; 0
    3dba:	8a 81       	ldd	r24, Y+2	; 0x02
    3dbc:	9b 81       	ldd	r25, Y+3	; 0x03
    3dbe:	fc 01       	movw	r30, r24
    3dc0:	e2 0f       	add	r30, r18
    3dc2:	f3 1f       	adc	r31, r19
    3dc4:	80 81       	ld	r24, Z
    3dc6:	0e 94 8b 1e 	call	0x3d16	; 0x3d16 <UART_sendByte>
		bufferBit++;
    3dca:	89 81       	ldd	r24, Y+1	; 0x01
    3dcc:	8f 5f       	subi	r24, 0xFF	; 255
    3dce:	89 83       	std	Y+1, r24	; 0x01
{
	/*Variable to loop on the string*/
	uint8 bufferBit = 0 ;

	/*Loop on the string and send Byte by Byte*/
	while(Str[bufferBit] != '\0')
    3dd0:	89 81       	ldd	r24, Y+1	; 0x01
    3dd2:	28 2f       	mov	r18, r24
    3dd4:	30 e0       	ldi	r19, 0x00	; 0
    3dd6:	8a 81       	ldd	r24, Y+2	; 0x02
    3dd8:	9b 81       	ldd	r25, Y+3	; 0x03
    3dda:	fc 01       	movw	r30, r24
    3ddc:	e2 0f       	add	r30, r18
    3dde:	f3 1f       	adc	r31, r19
    3de0:	80 81       	ld	r24, Z
    3de2:	88 23       	and	r24, r24
    3de4:	39 f7       	brne	.-50     	; 0x3db4 <UART_sendString+0x14>
	{
		UART_sendByte(Str[bufferBit]);
		bufferBit++;
	}

}
    3de6:	0f 90       	pop	r0
    3de8:	0f 90       	pop	r0
    3dea:	0f 90       	pop	r0
    3dec:	cf 91       	pop	r28
    3dee:	df 91       	pop	r29
    3df0:	08 95       	ret

00003df2 <UART_sendData>:
/* Description :
 * Sends array of data through UART frame
 * until size of array is reached
 */
void UART_sendData(const uint8 * Data, uint8 dataSize)
{
    3df2:	df 93       	push	r29
    3df4:	cf 93       	push	r28
    3df6:	00 d0       	rcall	.+0      	; 0x3df8 <UART_sendData+0x6>
    3df8:	00 d0       	rcall	.+0      	; 0x3dfa <UART_sendData+0x8>
    3dfa:	cd b7       	in	r28, 0x3d	; 61
    3dfc:	de b7       	in	r29, 0x3e	; 62
    3dfe:	9b 83       	std	Y+3, r25	; 0x03
    3e00:	8a 83       	std	Y+2, r24	; 0x02
    3e02:	6c 83       	std	Y+4, r22	; 0x04
	/*Variable to loop on the data array*/
	uint8 bufferBit ;

	/*Loop on the array and send Byte by Byte*/
	for(bufferBit = 0 ; bufferBit < dataSize ; bufferBit++ )
    3e04:	19 82       	std	Y+1, r1	; 0x01
    3e06:	0e c0       	rjmp	.+28     	; 0x3e24 <UART_sendData+0x32>
	{
		UART_sendByte(Data[bufferBit]);
    3e08:	89 81       	ldd	r24, Y+1	; 0x01
    3e0a:	28 2f       	mov	r18, r24
    3e0c:	30 e0       	ldi	r19, 0x00	; 0
    3e0e:	8a 81       	ldd	r24, Y+2	; 0x02
    3e10:	9b 81       	ldd	r25, Y+3	; 0x03
    3e12:	fc 01       	movw	r30, r24
    3e14:	e2 0f       	add	r30, r18
    3e16:	f3 1f       	adc	r31, r19
    3e18:	80 81       	ld	r24, Z
    3e1a:	0e 94 8b 1e 	call	0x3d16	; 0x3d16 <UART_sendByte>
{
	/*Variable to loop on the data array*/
	uint8 bufferBit ;

	/*Loop on the array and send Byte by Byte*/
	for(bufferBit = 0 ; bufferBit < dataSize ; bufferBit++ )
    3e1e:	89 81       	ldd	r24, Y+1	; 0x01
    3e20:	8f 5f       	subi	r24, 0xFF	; 255
    3e22:	89 83       	std	Y+1, r24	; 0x01
    3e24:	99 81       	ldd	r25, Y+1	; 0x01
    3e26:	8c 81       	ldd	r24, Y+4	; 0x04
    3e28:	98 17       	cp	r25, r24
    3e2a:	70 f3       	brcs	.-36     	; 0x3e08 <UART_sendData+0x16>
	{
		UART_sendByte(Data[bufferBit]);
	}
}
    3e2c:	0f 90       	pop	r0
    3e2e:	0f 90       	pop	r0
    3e30:	0f 90       	pop	r0
    3e32:	0f 90       	pop	r0
    3e34:	cf 91       	pop	r28
    3e36:	df 91       	pop	r29
    3e38:	08 95       	ret

00003e3a <UART_recieveData>:
 * return the value of the received array through UART frame
 * into an array ( pointer to global array )
 * until size of array is reached
 */
void UART_recieveData(uint8 * Data , uint8 dataSize)
{
    3e3a:	0f 93       	push	r16
    3e3c:	1f 93       	push	r17
    3e3e:	df 93       	push	r29
    3e40:	cf 93       	push	r28
    3e42:	00 d0       	rcall	.+0      	; 0x3e44 <UART_recieveData+0xa>
    3e44:	00 d0       	rcall	.+0      	; 0x3e46 <UART_recieveData+0xc>
    3e46:	cd b7       	in	r28, 0x3d	; 61
    3e48:	de b7       	in	r29, 0x3e	; 62
    3e4a:	9b 83       	std	Y+3, r25	; 0x03
    3e4c:	8a 83       	std	Y+2, r24	; 0x02
    3e4e:	6c 83       	std	Y+4, r22	; 0x04
	/*Variable to loop on the data array*/
	uint8 bufferBit ;

	/*Loop on the array and send Byte by Byte*/
	for(bufferBit = 0 ; bufferBit < dataSize ; bufferBit++ )
    3e50:	19 82       	std	Y+1, r1	; 0x01
    3e52:	0f c0       	rjmp	.+30     	; 0x3e72 <UART_recieveData+0x38>
	{
		Data[bufferBit] = UART_recieveByte();
    3e54:	89 81       	ldd	r24, Y+1	; 0x01
    3e56:	28 2f       	mov	r18, r24
    3e58:	30 e0       	ldi	r19, 0x00	; 0
    3e5a:	8a 81       	ldd	r24, Y+2	; 0x02
    3e5c:	9b 81       	ldd	r25, Y+3	; 0x03
    3e5e:	8c 01       	movw	r16, r24
    3e60:	02 0f       	add	r16, r18
    3e62:	13 1f       	adc	r17, r19
    3e64:	0e 94 7c 1e 	call	0x3cf8	; 0x3cf8 <UART_recieveByte>
    3e68:	f8 01       	movw	r30, r16
    3e6a:	80 83       	st	Z, r24
{
	/*Variable to loop on the data array*/
	uint8 bufferBit ;

	/*Loop on the array and send Byte by Byte*/
	for(bufferBit = 0 ; bufferBit < dataSize ; bufferBit++ )
    3e6c:	89 81       	ldd	r24, Y+1	; 0x01
    3e6e:	8f 5f       	subi	r24, 0xFF	; 255
    3e70:	89 83       	std	Y+1, r24	; 0x01
    3e72:	99 81       	ldd	r25, Y+1	; 0x01
    3e74:	8c 81       	ldd	r24, Y+4	; 0x04
    3e76:	98 17       	cp	r25, r24
    3e78:	68 f3       	brcs	.-38     	; 0x3e54 <UART_recieveData+0x1a>
	{
		Data[bufferBit] = UART_recieveByte();
	}
}
    3e7a:	0f 90       	pop	r0
    3e7c:	0f 90       	pop	r0
    3e7e:	0f 90       	pop	r0
    3e80:	0f 90       	pop	r0
    3e82:	cf 91       	pop	r28
    3e84:	df 91       	pop	r29
    3e86:	1f 91       	pop	r17
    3e88:	0f 91       	pop	r16
    3e8a:	08 95       	ret

00003e8c <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    3e8c:	df 93       	push	r29
    3e8e:	cf 93       	push	r28
    3e90:	00 d0       	rcall	.+0      	; 0x3e92 <GPIO_setupPinDirection+0x6>
    3e92:	00 d0       	rcall	.+0      	; 0x3e94 <GPIO_setupPinDirection+0x8>
    3e94:	0f 92       	push	r0
    3e96:	cd b7       	in	r28, 0x3d	; 61
    3e98:	de b7       	in	r29, 0x3e	; 62
    3e9a:	89 83       	std	Y+1, r24	; 0x01
    3e9c:	6a 83       	std	Y+2, r22	; 0x02
    3e9e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    3ea0:	8a 81       	ldd	r24, Y+2	; 0x02
    3ea2:	88 30       	cpi	r24, 0x08	; 8
    3ea4:	08 f0       	brcs	.+2      	; 0x3ea8 <GPIO_setupPinDirection+0x1c>
    3ea6:	d5 c0       	rjmp	.+426    	; 0x4052 <GPIO_setupPinDirection+0x1c6>
    3ea8:	89 81       	ldd	r24, Y+1	; 0x01
    3eaa:	84 30       	cpi	r24, 0x04	; 4
    3eac:	08 f0       	brcs	.+2      	; 0x3eb0 <GPIO_setupPinDirection+0x24>
    3eae:	d1 c0       	rjmp	.+418    	; 0x4052 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    3eb0:	89 81       	ldd	r24, Y+1	; 0x01
    3eb2:	28 2f       	mov	r18, r24
    3eb4:	30 e0       	ldi	r19, 0x00	; 0
    3eb6:	3d 83       	std	Y+5, r19	; 0x05
    3eb8:	2c 83       	std	Y+4, r18	; 0x04
    3eba:	8c 81       	ldd	r24, Y+4	; 0x04
    3ebc:	9d 81       	ldd	r25, Y+5	; 0x05
    3ebe:	81 30       	cpi	r24, 0x01	; 1
    3ec0:	91 05       	cpc	r25, r1
    3ec2:	09 f4       	brne	.+2      	; 0x3ec6 <GPIO_setupPinDirection+0x3a>
    3ec4:	43 c0       	rjmp	.+134    	; 0x3f4c <GPIO_setupPinDirection+0xc0>
    3ec6:	2c 81       	ldd	r18, Y+4	; 0x04
    3ec8:	3d 81       	ldd	r19, Y+5	; 0x05
    3eca:	22 30       	cpi	r18, 0x02	; 2
    3ecc:	31 05       	cpc	r19, r1
    3ece:	2c f4       	brge	.+10     	; 0x3eda <GPIO_setupPinDirection+0x4e>
    3ed0:	8c 81       	ldd	r24, Y+4	; 0x04
    3ed2:	9d 81       	ldd	r25, Y+5	; 0x05
    3ed4:	00 97       	sbiw	r24, 0x00	; 0
    3ed6:	71 f0       	breq	.+28     	; 0x3ef4 <GPIO_setupPinDirection+0x68>
    3ed8:	bc c0       	rjmp	.+376    	; 0x4052 <GPIO_setupPinDirection+0x1c6>
    3eda:	2c 81       	ldd	r18, Y+4	; 0x04
    3edc:	3d 81       	ldd	r19, Y+5	; 0x05
    3ede:	22 30       	cpi	r18, 0x02	; 2
    3ee0:	31 05       	cpc	r19, r1
    3ee2:	09 f4       	brne	.+2      	; 0x3ee6 <GPIO_setupPinDirection+0x5a>
    3ee4:	5f c0       	rjmp	.+190    	; 0x3fa4 <GPIO_setupPinDirection+0x118>
    3ee6:	8c 81       	ldd	r24, Y+4	; 0x04
    3ee8:	9d 81       	ldd	r25, Y+5	; 0x05
    3eea:	83 30       	cpi	r24, 0x03	; 3
    3eec:	91 05       	cpc	r25, r1
    3eee:	09 f4       	brne	.+2      	; 0x3ef2 <GPIO_setupPinDirection+0x66>
    3ef0:	85 c0       	rjmp	.+266    	; 0x3ffc <GPIO_setupPinDirection+0x170>
    3ef2:	af c0       	rjmp	.+350    	; 0x4052 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    3ef4:	8b 81       	ldd	r24, Y+3	; 0x03
    3ef6:	81 30       	cpi	r24, 0x01	; 1
    3ef8:	a1 f4       	brne	.+40     	; 0x3f22 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    3efa:	aa e3       	ldi	r26, 0x3A	; 58
    3efc:	b0 e0       	ldi	r27, 0x00	; 0
    3efe:	ea e3       	ldi	r30, 0x3A	; 58
    3f00:	f0 e0       	ldi	r31, 0x00	; 0
    3f02:	80 81       	ld	r24, Z
    3f04:	48 2f       	mov	r20, r24
    3f06:	8a 81       	ldd	r24, Y+2	; 0x02
    3f08:	28 2f       	mov	r18, r24
    3f0a:	30 e0       	ldi	r19, 0x00	; 0
    3f0c:	81 e0       	ldi	r24, 0x01	; 1
    3f0e:	90 e0       	ldi	r25, 0x00	; 0
    3f10:	02 2e       	mov	r0, r18
    3f12:	02 c0       	rjmp	.+4      	; 0x3f18 <GPIO_setupPinDirection+0x8c>
    3f14:	88 0f       	add	r24, r24
    3f16:	99 1f       	adc	r25, r25
    3f18:	0a 94       	dec	r0
    3f1a:	e2 f7       	brpl	.-8      	; 0x3f14 <GPIO_setupPinDirection+0x88>
    3f1c:	84 2b       	or	r24, r20
    3f1e:	8c 93       	st	X, r24
    3f20:	98 c0       	rjmp	.+304    	; 0x4052 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    3f22:	aa e3       	ldi	r26, 0x3A	; 58
    3f24:	b0 e0       	ldi	r27, 0x00	; 0
    3f26:	ea e3       	ldi	r30, 0x3A	; 58
    3f28:	f0 e0       	ldi	r31, 0x00	; 0
    3f2a:	80 81       	ld	r24, Z
    3f2c:	48 2f       	mov	r20, r24
    3f2e:	8a 81       	ldd	r24, Y+2	; 0x02
    3f30:	28 2f       	mov	r18, r24
    3f32:	30 e0       	ldi	r19, 0x00	; 0
    3f34:	81 e0       	ldi	r24, 0x01	; 1
    3f36:	90 e0       	ldi	r25, 0x00	; 0
    3f38:	02 2e       	mov	r0, r18
    3f3a:	02 c0       	rjmp	.+4      	; 0x3f40 <GPIO_setupPinDirection+0xb4>
    3f3c:	88 0f       	add	r24, r24
    3f3e:	99 1f       	adc	r25, r25
    3f40:	0a 94       	dec	r0
    3f42:	e2 f7       	brpl	.-8      	; 0x3f3c <GPIO_setupPinDirection+0xb0>
    3f44:	80 95       	com	r24
    3f46:	84 23       	and	r24, r20
    3f48:	8c 93       	st	X, r24
    3f4a:	83 c0       	rjmp	.+262    	; 0x4052 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    3f4c:	8b 81       	ldd	r24, Y+3	; 0x03
    3f4e:	81 30       	cpi	r24, 0x01	; 1
    3f50:	a1 f4       	brne	.+40     	; 0x3f7a <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    3f52:	a7 e3       	ldi	r26, 0x37	; 55
    3f54:	b0 e0       	ldi	r27, 0x00	; 0
    3f56:	e7 e3       	ldi	r30, 0x37	; 55
    3f58:	f0 e0       	ldi	r31, 0x00	; 0
    3f5a:	80 81       	ld	r24, Z
    3f5c:	48 2f       	mov	r20, r24
    3f5e:	8a 81       	ldd	r24, Y+2	; 0x02
    3f60:	28 2f       	mov	r18, r24
    3f62:	30 e0       	ldi	r19, 0x00	; 0
    3f64:	81 e0       	ldi	r24, 0x01	; 1
    3f66:	90 e0       	ldi	r25, 0x00	; 0
    3f68:	02 2e       	mov	r0, r18
    3f6a:	02 c0       	rjmp	.+4      	; 0x3f70 <GPIO_setupPinDirection+0xe4>
    3f6c:	88 0f       	add	r24, r24
    3f6e:	99 1f       	adc	r25, r25
    3f70:	0a 94       	dec	r0
    3f72:	e2 f7       	brpl	.-8      	; 0x3f6c <GPIO_setupPinDirection+0xe0>
    3f74:	84 2b       	or	r24, r20
    3f76:	8c 93       	st	X, r24
    3f78:	6c c0       	rjmp	.+216    	; 0x4052 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    3f7a:	a7 e3       	ldi	r26, 0x37	; 55
    3f7c:	b0 e0       	ldi	r27, 0x00	; 0
    3f7e:	e7 e3       	ldi	r30, 0x37	; 55
    3f80:	f0 e0       	ldi	r31, 0x00	; 0
    3f82:	80 81       	ld	r24, Z
    3f84:	48 2f       	mov	r20, r24
    3f86:	8a 81       	ldd	r24, Y+2	; 0x02
    3f88:	28 2f       	mov	r18, r24
    3f8a:	30 e0       	ldi	r19, 0x00	; 0
    3f8c:	81 e0       	ldi	r24, 0x01	; 1
    3f8e:	90 e0       	ldi	r25, 0x00	; 0
    3f90:	02 2e       	mov	r0, r18
    3f92:	02 c0       	rjmp	.+4      	; 0x3f98 <GPIO_setupPinDirection+0x10c>
    3f94:	88 0f       	add	r24, r24
    3f96:	99 1f       	adc	r25, r25
    3f98:	0a 94       	dec	r0
    3f9a:	e2 f7       	brpl	.-8      	; 0x3f94 <GPIO_setupPinDirection+0x108>
    3f9c:	80 95       	com	r24
    3f9e:	84 23       	and	r24, r20
    3fa0:	8c 93       	st	X, r24
    3fa2:	57 c0       	rjmp	.+174    	; 0x4052 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    3fa4:	8b 81       	ldd	r24, Y+3	; 0x03
    3fa6:	81 30       	cpi	r24, 0x01	; 1
    3fa8:	a1 f4       	brne	.+40     	; 0x3fd2 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    3faa:	a4 e3       	ldi	r26, 0x34	; 52
    3fac:	b0 e0       	ldi	r27, 0x00	; 0
    3fae:	e4 e3       	ldi	r30, 0x34	; 52
    3fb0:	f0 e0       	ldi	r31, 0x00	; 0
    3fb2:	80 81       	ld	r24, Z
    3fb4:	48 2f       	mov	r20, r24
    3fb6:	8a 81       	ldd	r24, Y+2	; 0x02
    3fb8:	28 2f       	mov	r18, r24
    3fba:	30 e0       	ldi	r19, 0x00	; 0
    3fbc:	81 e0       	ldi	r24, 0x01	; 1
    3fbe:	90 e0       	ldi	r25, 0x00	; 0
    3fc0:	02 2e       	mov	r0, r18
    3fc2:	02 c0       	rjmp	.+4      	; 0x3fc8 <GPIO_setupPinDirection+0x13c>
    3fc4:	88 0f       	add	r24, r24
    3fc6:	99 1f       	adc	r25, r25
    3fc8:	0a 94       	dec	r0
    3fca:	e2 f7       	brpl	.-8      	; 0x3fc4 <GPIO_setupPinDirection+0x138>
    3fcc:	84 2b       	or	r24, r20
    3fce:	8c 93       	st	X, r24
    3fd0:	40 c0       	rjmp	.+128    	; 0x4052 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    3fd2:	a4 e3       	ldi	r26, 0x34	; 52
    3fd4:	b0 e0       	ldi	r27, 0x00	; 0
    3fd6:	e4 e3       	ldi	r30, 0x34	; 52
    3fd8:	f0 e0       	ldi	r31, 0x00	; 0
    3fda:	80 81       	ld	r24, Z
    3fdc:	48 2f       	mov	r20, r24
    3fde:	8a 81       	ldd	r24, Y+2	; 0x02
    3fe0:	28 2f       	mov	r18, r24
    3fe2:	30 e0       	ldi	r19, 0x00	; 0
    3fe4:	81 e0       	ldi	r24, 0x01	; 1
    3fe6:	90 e0       	ldi	r25, 0x00	; 0
    3fe8:	02 2e       	mov	r0, r18
    3fea:	02 c0       	rjmp	.+4      	; 0x3ff0 <GPIO_setupPinDirection+0x164>
    3fec:	88 0f       	add	r24, r24
    3fee:	99 1f       	adc	r25, r25
    3ff0:	0a 94       	dec	r0
    3ff2:	e2 f7       	brpl	.-8      	; 0x3fec <GPIO_setupPinDirection+0x160>
    3ff4:	80 95       	com	r24
    3ff6:	84 23       	and	r24, r20
    3ff8:	8c 93       	st	X, r24
    3ffa:	2b c0       	rjmp	.+86     	; 0x4052 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    3ffc:	8b 81       	ldd	r24, Y+3	; 0x03
    3ffe:	81 30       	cpi	r24, 0x01	; 1
    4000:	a1 f4       	brne	.+40     	; 0x402a <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    4002:	a1 e3       	ldi	r26, 0x31	; 49
    4004:	b0 e0       	ldi	r27, 0x00	; 0
    4006:	e1 e3       	ldi	r30, 0x31	; 49
    4008:	f0 e0       	ldi	r31, 0x00	; 0
    400a:	80 81       	ld	r24, Z
    400c:	48 2f       	mov	r20, r24
    400e:	8a 81       	ldd	r24, Y+2	; 0x02
    4010:	28 2f       	mov	r18, r24
    4012:	30 e0       	ldi	r19, 0x00	; 0
    4014:	81 e0       	ldi	r24, 0x01	; 1
    4016:	90 e0       	ldi	r25, 0x00	; 0
    4018:	02 2e       	mov	r0, r18
    401a:	02 c0       	rjmp	.+4      	; 0x4020 <GPIO_setupPinDirection+0x194>
    401c:	88 0f       	add	r24, r24
    401e:	99 1f       	adc	r25, r25
    4020:	0a 94       	dec	r0
    4022:	e2 f7       	brpl	.-8      	; 0x401c <GPIO_setupPinDirection+0x190>
    4024:	84 2b       	or	r24, r20
    4026:	8c 93       	st	X, r24
    4028:	14 c0       	rjmp	.+40     	; 0x4052 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    402a:	a1 e3       	ldi	r26, 0x31	; 49
    402c:	b0 e0       	ldi	r27, 0x00	; 0
    402e:	e1 e3       	ldi	r30, 0x31	; 49
    4030:	f0 e0       	ldi	r31, 0x00	; 0
    4032:	80 81       	ld	r24, Z
    4034:	48 2f       	mov	r20, r24
    4036:	8a 81       	ldd	r24, Y+2	; 0x02
    4038:	28 2f       	mov	r18, r24
    403a:	30 e0       	ldi	r19, 0x00	; 0
    403c:	81 e0       	ldi	r24, 0x01	; 1
    403e:	90 e0       	ldi	r25, 0x00	; 0
    4040:	02 2e       	mov	r0, r18
    4042:	02 c0       	rjmp	.+4      	; 0x4048 <GPIO_setupPinDirection+0x1bc>
    4044:	88 0f       	add	r24, r24
    4046:	99 1f       	adc	r25, r25
    4048:	0a 94       	dec	r0
    404a:	e2 f7       	brpl	.-8      	; 0x4044 <GPIO_setupPinDirection+0x1b8>
    404c:	80 95       	com	r24
    404e:	84 23       	and	r24, r20
    4050:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    4052:	0f 90       	pop	r0
    4054:	0f 90       	pop	r0
    4056:	0f 90       	pop	r0
    4058:	0f 90       	pop	r0
    405a:	0f 90       	pop	r0
    405c:	cf 91       	pop	r28
    405e:	df 91       	pop	r29
    4060:	08 95       	ret

00004062 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    4062:	df 93       	push	r29
    4064:	cf 93       	push	r28
    4066:	00 d0       	rcall	.+0      	; 0x4068 <GPIO_writePin+0x6>
    4068:	00 d0       	rcall	.+0      	; 0x406a <GPIO_writePin+0x8>
    406a:	0f 92       	push	r0
    406c:	cd b7       	in	r28, 0x3d	; 61
    406e:	de b7       	in	r29, 0x3e	; 62
    4070:	89 83       	std	Y+1, r24	; 0x01
    4072:	6a 83       	std	Y+2, r22	; 0x02
    4074:	4b 83       	std	Y+3, r20	; 0x03
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    4076:	8a 81       	ldd	r24, Y+2	; 0x02
    4078:	88 30       	cpi	r24, 0x08	; 8
    407a:	08 f0       	brcs	.+2      	; 0x407e <GPIO_writePin+0x1c>
    407c:	d5 c0       	rjmp	.+426    	; 0x4228 <GPIO_writePin+0x1c6>
    407e:	89 81       	ldd	r24, Y+1	; 0x01
    4080:	84 30       	cpi	r24, 0x04	; 4
    4082:	08 f0       	brcs	.+2      	; 0x4086 <GPIO_writePin+0x24>
    4084:	d1 c0       	rjmp	.+418    	; 0x4228 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    4086:	89 81       	ldd	r24, Y+1	; 0x01
    4088:	28 2f       	mov	r18, r24
    408a:	30 e0       	ldi	r19, 0x00	; 0
    408c:	3d 83       	std	Y+5, r19	; 0x05
    408e:	2c 83       	std	Y+4, r18	; 0x04
    4090:	8c 81       	ldd	r24, Y+4	; 0x04
    4092:	9d 81       	ldd	r25, Y+5	; 0x05
    4094:	81 30       	cpi	r24, 0x01	; 1
    4096:	91 05       	cpc	r25, r1
    4098:	09 f4       	brne	.+2      	; 0x409c <GPIO_writePin+0x3a>
    409a:	43 c0       	rjmp	.+134    	; 0x4122 <GPIO_writePin+0xc0>
    409c:	2c 81       	ldd	r18, Y+4	; 0x04
    409e:	3d 81       	ldd	r19, Y+5	; 0x05
    40a0:	22 30       	cpi	r18, 0x02	; 2
    40a2:	31 05       	cpc	r19, r1
    40a4:	2c f4       	brge	.+10     	; 0x40b0 <GPIO_writePin+0x4e>
    40a6:	8c 81       	ldd	r24, Y+4	; 0x04
    40a8:	9d 81       	ldd	r25, Y+5	; 0x05
    40aa:	00 97       	sbiw	r24, 0x00	; 0
    40ac:	71 f0       	breq	.+28     	; 0x40ca <GPIO_writePin+0x68>
    40ae:	bc c0       	rjmp	.+376    	; 0x4228 <GPIO_writePin+0x1c6>
    40b0:	2c 81       	ldd	r18, Y+4	; 0x04
    40b2:	3d 81       	ldd	r19, Y+5	; 0x05
    40b4:	22 30       	cpi	r18, 0x02	; 2
    40b6:	31 05       	cpc	r19, r1
    40b8:	09 f4       	brne	.+2      	; 0x40bc <GPIO_writePin+0x5a>
    40ba:	5f c0       	rjmp	.+190    	; 0x417a <GPIO_writePin+0x118>
    40bc:	8c 81       	ldd	r24, Y+4	; 0x04
    40be:	9d 81       	ldd	r25, Y+5	; 0x05
    40c0:	83 30       	cpi	r24, 0x03	; 3
    40c2:	91 05       	cpc	r25, r1
    40c4:	09 f4       	brne	.+2      	; 0x40c8 <GPIO_writePin+0x66>
    40c6:	85 c0       	rjmp	.+266    	; 0x41d2 <GPIO_writePin+0x170>
    40c8:	af c0       	rjmp	.+350    	; 0x4228 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    40ca:	8b 81       	ldd	r24, Y+3	; 0x03
    40cc:	81 30       	cpi	r24, 0x01	; 1
    40ce:	a1 f4       	brne	.+40     	; 0x40f8 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    40d0:	ab e3       	ldi	r26, 0x3B	; 59
    40d2:	b0 e0       	ldi	r27, 0x00	; 0
    40d4:	eb e3       	ldi	r30, 0x3B	; 59
    40d6:	f0 e0       	ldi	r31, 0x00	; 0
    40d8:	80 81       	ld	r24, Z
    40da:	48 2f       	mov	r20, r24
    40dc:	8a 81       	ldd	r24, Y+2	; 0x02
    40de:	28 2f       	mov	r18, r24
    40e0:	30 e0       	ldi	r19, 0x00	; 0
    40e2:	81 e0       	ldi	r24, 0x01	; 1
    40e4:	90 e0       	ldi	r25, 0x00	; 0
    40e6:	02 2e       	mov	r0, r18
    40e8:	02 c0       	rjmp	.+4      	; 0x40ee <GPIO_writePin+0x8c>
    40ea:	88 0f       	add	r24, r24
    40ec:	99 1f       	adc	r25, r25
    40ee:	0a 94       	dec	r0
    40f0:	e2 f7       	brpl	.-8      	; 0x40ea <GPIO_writePin+0x88>
    40f2:	84 2b       	or	r24, r20
    40f4:	8c 93       	st	X, r24
    40f6:	98 c0       	rjmp	.+304    	; 0x4228 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    40f8:	ab e3       	ldi	r26, 0x3B	; 59
    40fa:	b0 e0       	ldi	r27, 0x00	; 0
    40fc:	eb e3       	ldi	r30, 0x3B	; 59
    40fe:	f0 e0       	ldi	r31, 0x00	; 0
    4100:	80 81       	ld	r24, Z
    4102:	48 2f       	mov	r20, r24
    4104:	8a 81       	ldd	r24, Y+2	; 0x02
    4106:	28 2f       	mov	r18, r24
    4108:	30 e0       	ldi	r19, 0x00	; 0
    410a:	81 e0       	ldi	r24, 0x01	; 1
    410c:	90 e0       	ldi	r25, 0x00	; 0
    410e:	02 2e       	mov	r0, r18
    4110:	02 c0       	rjmp	.+4      	; 0x4116 <GPIO_writePin+0xb4>
    4112:	88 0f       	add	r24, r24
    4114:	99 1f       	adc	r25, r25
    4116:	0a 94       	dec	r0
    4118:	e2 f7       	brpl	.-8      	; 0x4112 <GPIO_writePin+0xb0>
    411a:	80 95       	com	r24
    411c:	84 23       	and	r24, r20
    411e:	8c 93       	st	X, r24
    4120:	83 c0       	rjmp	.+262    	; 0x4228 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    4122:	8b 81       	ldd	r24, Y+3	; 0x03
    4124:	81 30       	cpi	r24, 0x01	; 1
    4126:	a1 f4       	brne	.+40     	; 0x4150 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    4128:	a8 e3       	ldi	r26, 0x38	; 56
    412a:	b0 e0       	ldi	r27, 0x00	; 0
    412c:	e8 e3       	ldi	r30, 0x38	; 56
    412e:	f0 e0       	ldi	r31, 0x00	; 0
    4130:	80 81       	ld	r24, Z
    4132:	48 2f       	mov	r20, r24
    4134:	8a 81       	ldd	r24, Y+2	; 0x02
    4136:	28 2f       	mov	r18, r24
    4138:	30 e0       	ldi	r19, 0x00	; 0
    413a:	81 e0       	ldi	r24, 0x01	; 1
    413c:	90 e0       	ldi	r25, 0x00	; 0
    413e:	02 2e       	mov	r0, r18
    4140:	02 c0       	rjmp	.+4      	; 0x4146 <GPIO_writePin+0xe4>
    4142:	88 0f       	add	r24, r24
    4144:	99 1f       	adc	r25, r25
    4146:	0a 94       	dec	r0
    4148:	e2 f7       	brpl	.-8      	; 0x4142 <GPIO_writePin+0xe0>
    414a:	84 2b       	or	r24, r20
    414c:	8c 93       	st	X, r24
    414e:	6c c0       	rjmp	.+216    	; 0x4228 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    4150:	a8 e3       	ldi	r26, 0x38	; 56
    4152:	b0 e0       	ldi	r27, 0x00	; 0
    4154:	e8 e3       	ldi	r30, 0x38	; 56
    4156:	f0 e0       	ldi	r31, 0x00	; 0
    4158:	80 81       	ld	r24, Z
    415a:	48 2f       	mov	r20, r24
    415c:	8a 81       	ldd	r24, Y+2	; 0x02
    415e:	28 2f       	mov	r18, r24
    4160:	30 e0       	ldi	r19, 0x00	; 0
    4162:	81 e0       	ldi	r24, 0x01	; 1
    4164:	90 e0       	ldi	r25, 0x00	; 0
    4166:	02 2e       	mov	r0, r18
    4168:	02 c0       	rjmp	.+4      	; 0x416e <GPIO_writePin+0x10c>
    416a:	88 0f       	add	r24, r24
    416c:	99 1f       	adc	r25, r25
    416e:	0a 94       	dec	r0
    4170:	e2 f7       	brpl	.-8      	; 0x416a <GPIO_writePin+0x108>
    4172:	80 95       	com	r24
    4174:	84 23       	and	r24, r20
    4176:	8c 93       	st	X, r24
    4178:	57 c0       	rjmp	.+174    	; 0x4228 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    417a:	8b 81       	ldd	r24, Y+3	; 0x03
    417c:	81 30       	cpi	r24, 0x01	; 1
    417e:	a1 f4       	brne	.+40     	; 0x41a8 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    4180:	a5 e3       	ldi	r26, 0x35	; 53
    4182:	b0 e0       	ldi	r27, 0x00	; 0
    4184:	e5 e3       	ldi	r30, 0x35	; 53
    4186:	f0 e0       	ldi	r31, 0x00	; 0
    4188:	80 81       	ld	r24, Z
    418a:	48 2f       	mov	r20, r24
    418c:	8a 81       	ldd	r24, Y+2	; 0x02
    418e:	28 2f       	mov	r18, r24
    4190:	30 e0       	ldi	r19, 0x00	; 0
    4192:	81 e0       	ldi	r24, 0x01	; 1
    4194:	90 e0       	ldi	r25, 0x00	; 0
    4196:	02 2e       	mov	r0, r18
    4198:	02 c0       	rjmp	.+4      	; 0x419e <GPIO_writePin+0x13c>
    419a:	88 0f       	add	r24, r24
    419c:	99 1f       	adc	r25, r25
    419e:	0a 94       	dec	r0
    41a0:	e2 f7       	brpl	.-8      	; 0x419a <GPIO_writePin+0x138>
    41a2:	84 2b       	or	r24, r20
    41a4:	8c 93       	st	X, r24
    41a6:	40 c0       	rjmp	.+128    	; 0x4228 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    41a8:	a5 e3       	ldi	r26, 0x35	; 53
    41aa:	b0 e0       	ldi	r27, 0x00	; 0
    41ac:	e5 e3       	ldi	r30, 0x35	; 53
    41ae:	f0 e0       	ldi	r31, 0x00	; 0
    41b0:	80 81       	ld	r24, Z
    41b2:	48 2f       	mov	r20, r24
    41b4:	8a 81       	ldd	r24, Y+2	; 0x02
    41b6:	28 2f       	mov	r18, r24
    41b8:	30 e0       	ldi	r19, 0x00	; 0
    41ba:	81 e0       	ldi	r24, 0x01	; 1
    41bc:	90 e0       	ldi	r25, 0x00	; 0
    41be:	02 2e       	mov	r0, r18
    41c0:	02 c0       	rjmp	.+4      	; 0x41c6 <GPIO_writePin+0x164>
    41c2:	88 0f       	add	r24, r24
    41c4:	99 1f       	adc	r25, r25
    41c6:	0a 94       	dec	r0
    41c8:	e2 f7       	brpl	.-8      	; 0x41c2 <GPIO_writePin+0x160>
    41ca:	80 95       	com	r24
    41cc:	84 23       	and	r24, r20
    41ce:	8c 93       	st	X, r24
    41d0:	2b c0       	rjmp	.+86     	; 0x4228 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    41d2:	8b 81       	ldd	r24, Y+3	; 0x03
    41d4:	81 30       	cpi	r24, 0x01	; 1
    41d6:	a1 f4       	brne	.+40     	; 0x4200 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    41d8:	a2 e3       	ldi	r26, 0x32	; 50
    41da:	b0 e0       	ldi	r27, 0x00	; 0
    41dc:	e2 e3       	ldi	r30, 0x32	; 50
    41de:	f0 e0       	ldi	r31, 0x00	; 0
    41e0:	80 81       	ld	r24, Z
    41e2:	48 2f       	mov	r20, r24
    41e4:	8a 81       	ldd	r24, Y+2	; 0x02
    41e6:	28 2f       	mov	r18, r24
    41e8:	30 e0       	ldi	r19, 0x00	; 0
    41ea:	81 e0       	ldi	r24, 0x01	; 1
    41ec:	90 e0       	ldi	r25, 0x00	; 0
    41ee:	02 2e       	mov	r0, r18
    41f0:	02 c0       	rjmp	.+4      	; 0x41f6 <GPIO_writePin+0x194>
    41f2:	88 0f       	add	r24, r24
    41f4:	99 1f       	adc	r25, r25
    41f6:	0a 94       	dec	r0
    41f8:	e2 f7       	brpl	.-8      	; 0x41f2 <GPIO_writePin+0x190>
    41fa:	84 2b       	or	r24, r20
    41fc:	8c 93       	st	X, r24
    41fe:	14 c0       	rjmp	.+40     	; 0x4228 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    4200:	a2 e3       	ldi	r26, 0x32	; 50
    4202:	b0 e0       	ldi	r27, 0x00	; 0
    4204:	e2 e3       	ldi	r30, 0x32	; 50
    4206:	f0 e0       	ldi	r31, 0x00	; 0
    4208:	80 81       	ld	r24, Z
    420a:	48 2f       	mov	r20, r24
    420c:	8a 81       	ldd	r24, Y+2	; 0x02
    420e:	28 2f       	mov	r18, r24
    4210:	30 e0       	ldi	r19, 0x00	; 0
    4212:	81 e0       	ldi	r24, 0x01	; 1
    4214:	90 e0       	ldi	r25, 0x00	; 0
    4216:	02 2e       	mov	r0, r18
    4218:	02 c0       	rjmp	.+4      	; 0x421e <GPIO_writePin+0x1bc>
    421a:	88 0f       	add	r24, r24
    421c:	99 1f       	adc	r25, r25
    421e:	0a 94       	dec	r0
    4220:	e2 f7       	brpl	.-8      	; 0x421a <GPIO_writePin+0x1b8>
    4222:	80 95       	com	r24
    4224:	84 23       	and	r24, r20
    4226:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    4228:	0f 90       	pop	r0
    422a:	0f 90       	pop	r0
    422c:	0f 90       	pop	r0
    422e:	0f 90       	pop	r0
    4230:	0f 90       	pop	r0
    4232:	cf 91       	pop	r28
    4234:	df 91       	pop	r29
    4236:	08 95       	ret

00004238 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    4238:	df 93       	push	r29
    423a:	cf 93       	push	r28
    423c:	00 d0       	rcall	.+0      	; 0x423e <GPIO_readPin+0x6>
    423e:	00 d0       	rcall	.+0      	; 0x4240 <GPIO_readPin+0x8>
    4240:	00 d0       	rcall	.+0      	; 0x4242 <GPIO_readPin+0xa>
    4242:	cd b7       	in	r28, 0x3d	; 61
    4244:	de b7       	in	r29, 0x3e	; 62
    4246:	89 83       	std	Y+1, r24	; 0x01
    4248:	6a 83       	std	Y+2, r22	; 0x02
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    424a:	8a 81       	ldd	r24, Y+2	; 0x02
    424c:	88 30       	cpi	r24, 0x08	; 8
    424e:	08 f0       	brcs	.+2      	; 0x4252 <GPIO_readPin+0x1a>
    4250:	87 c0       	rjmp	.+270    	; 0x4360 <GPIO_readPin+0x128>
    4252:	89 81       	ldd	r24, Y+1	; 0x01
    4254:	84 30       	cpi	r24, 0x04	; 4
    4256:	08 f0       	brcs	.+2      	; 0x425a <GPIO_readPin+0x22>
    4258:	83 c0       	rjmp	.+262    	; 0x4360 <GPIO_readPin+0x128>
			/* Do Nothing */
		}
		else
		{
			/* Setup the pin direction as required */
			switch(port_num)
    425a:	89 81       	ldd	r24, Y+1	; 0x01
    425c:	28 2f       	mov	r18, r24
    425e:	30 e0       	ldi	r19, 0x00	; 0
    4260:	3d 83       	std	Y+5, r19	; 0x05
    4262:	2c 83       	std	Y+4, r18	; 0x04
    4264:	4c 81       	ldd	r20, Y+4	; 0x04
    4266:	5d 81       	ldd	r21, Y+5	; 0x05
    4268:	41 30       	cpi	r20, 0x01	; 1
    426a:	51 05       	cpc	r21, r1
    426c:	79 f1       	breq	.+94     	; 0x42cc <GPIO_readPin+0x94>
    426e:	8c 81       	ldd	r24, Y+4	; 0x04
    4270:	9d 81       	ldd	r25, Y+5	; 0x05
    4272:	82 30       	cpi	r24, 0x02	; 2
    4274:	91 05       	cpc	r25, r1
    4276:	34 f4       	brge	.+12     	; 0x4284 <GPIO_readPin+0x4c>
    4278:	2c 81       	ldd	r18, Y+4	; 0x04
    427a:	3d 81       	ldd	r19, Y+5	; 0x05
    427c:	21 15       	cp	r18, r1
    427e:	31 05       	cpc	r19, r1
    4280:	69 f0       	breq	.+26     	; 0x429c <GPIO_readPin+0x64>
    4282:	6c c0       	rjmp	.+216    	; 0x435c <GPIO_readPin+0x124>
    4284:	4c 81       	ldd	r20, Y+4	; 0x04
    4286:	5d 81       	ldd	r21, Y+5	; 0x05
    4288:	42 30       	cpi	r20, 0x02	; 2
    428a:	51 05       	cpc	r21, r1
    428c:	b9 f1       	breq	.+110    	; 0x42fc <GPIO_readPin+0xc4>
    428e:	8c 81       	ldd	r24, Y+4	; 0x04
    4290:	9d 81       	ldd	r25, Y+5	; 0x05
    4292:	83 30       	cpi	r24, 0x03	; 3
    4294:	91 05       	cpc	r25, r1
    4296:	09 f4       	brne	.+2      	; 0x429a <GPIO_readPin+0x62>
    4298:	49 c0       	rjmp	.+146    	; 0x432c <GPIO_readPin+0xf4>
    429a:	60 c0       	rjmp	.+192    	; 0x435c <GPIO_readPin+0x124>
			{
			case PORTA_ID:
				if(BIT_IS_SET(PINA,pin_num))
    429c:	e9 e3       	ldi	r30, 0x39	; 57
    429e:	f0 e0       	ldi	r31, 0x00	; 0
    42a0:	80 81       	ld	r24, Z
    42a2:	28 2f       	mov	r18, r24
    42a4:	30 e0       	ldi	r19, 0x00	; 0
    42a6:	8a 81       	ldd	r24, Y+2	; 0x02
    42a8:	88 2f       	mov	r24, r24
    42aa:	90 e0       	ldi	r25, 0x00	; 0
    42ac:	a9 01       	movw	r20, r18
    42ae:	02 c0       	rjmp	.+4      	; 0x42b4 <GPIO_readPin+0x7c>
    42b0:	55 95       	asr	r21
    42b2:	47 95       	ror	r20
    42b4:	8a 95       	dec	r24
    42b6:	e2 f7       	brpl	.-8      	; 0x42b0 <GPIO_readPin+0x78>
    42b8:	ca 01       	movw	r24, r20
    42ba:	81 70       	andi	r24, 0x01	; 1
    42bc:	90 70       	andi	r25, 0x00	; 0
    42be:	88 23       	and	r24, r24
    42c0:	19 f0       	breq	.+6      	; 0x42c8 <GPIO_readPin+0x90>
				{
					return LOGIC_HIGH;  /*pint_value = LOGIC_HIGH*/
    42c2:	51 e0       	ldi	r21, 0x01	; 1
    42c4:	5b 83       	std	Y+3, r21	; 0x03
    42c6:	4d c0       	rjmp	.+154    	; 0x4362 <GPIO_readPin+0x12a>
				}
				else
					return LOGIC_LOW;
    42c8:	1b 82       	std	Y+3, r1	; 0x03
    42ca:	4b c0       	rjmp	.+150    	; 0x4362 <GPIO_readPin+0x12a>
				break;
			case PORTB_ID:
				if(BIT_IS_SET(PINB,pin_num))
    42cc:	e6 e3       	ldi	r30, 0x36	; 54
    42ce:	f0 e0       	ldi	r31, 0x00	; 0
    42d0:	80 81       	ld	r24, Z
    42d2:	28 2f       	mov	r18, r24
    42d4:	30 e0       	ldi	r19, 0x00	; 0
    42d6:	8a 81       	ldd	r24, Y+2	; 0x02
    42d8:	88 2f       	mov	r24, r24
    42da:	90 e0       	ldi	r25, 0x00	; 0
    42dc:	a9 01       	movw	r20, r18
    42de:	02 c0       	rjmp	.+4      	; 0x42e4 <GPIO_readPin+0xac>
    42e0:	55 95       	asr	r21
    42e2:	47 95       	ror	r20
    42e4:	8a 95       	dec	r24
    42e6:	e2 f7       	brpl	.-8      	; 0x42e0 <GPIO_readPin+0xa8>
    42e8:	ca 01       	movw	r24, r20
    42ea:	81 70       	andi	r24, 0x01	; 1
    42ec:	90 70       	andi	r25, 0x00	; 0
    42ee:	88 23       	and	r24, r24
    42f0:	19 f0       	breq	.+6      	; 0x42f8 <GPIO_readPin+0xc0>
						{
					return LOGIC_HIGH;
    42f2:	51 e0       	ldi	r21, 0x01	; 1
    42f4:	5b 83       	std	Y+3, r21	; 0x03
    42f6:	35 c0       	rjmp	.+106    	; 0x4362 <GPIO_readPin+0x12a>
						}
				else
				return LOGIC_LOW;
    42f8:	1b 82       	std	Y+3, r1	; 0x03
    42fa:	33 c0       	rjmp	.+102    	; 0x4362 <GPIO_readPin+0x12a>
				break;
			case PORTC_ID:
				if(BIT_IS_SET(PINC,pin_num))
    42fc:	e3 e3       	ldi	r30, 0x33	; 51
    42fe:	f0 e0       	ldi	r31, 0x00	; 0
    4300:	80 81       	ld	r24, Z
    4302:	28 2f       	mov	r18, r24
    4304:	30 e0       	ldi	r19, 0x00	; 0
    4306:	8a 81       	ldd	r24, Y+2	; 0x02
    4308:	88 2f       	mov	r24, r24
    430a:	90 e0       	ldi	r25, 0x00	; 0
    430c:	a9 01       	movw	r20, r18
    430e:	02 c0       	rjmp	.+4      	; 0x4314 <GPIO_readPin+0xdc>
    4310:	55 95       	asr	r21
    4312:	47 95       	ror	r20
    4314:	8a 95       	dec	r24
    4316:	e2 f7       	brpl	.-8      	; 0x4310 <GPIO_readPin+0xd8>
    4318:	ca 01       	movw	r24, r20
    431a:	81 70       	andi	r24, 0x01	; 1
    431c:	90 70       	andi	r25, 0x00	; 0
    431e:	88 23       	and	r24, r24
    4320:	19 f0       	breq	.+6      	; 0x4328 <GPIO_readPin+0xf0>
					{
					return LOGIC_HIGH ;
    4322:	51 e0       	ldi	r21, 0x01	; 1
    4324:	5b 83       	std	Y+3, r21	; 0x03
    4326:	1d c0       	rjmp	.+58     	; 0x4362 <GPIO_readPin+0x12a>
					}
				else
					return LOGIC_LOW;
    4328:	1b 82       	std	Y+3, r1	; 0x03
    432a:	1b c0       	rjmp	.+54     	; 0x4362 <GPIO_readPin+0x12a>
				break;
			case PORTD_ID:
				if(BIT_IS_SET(PIND,pin_num))
    432c:	e0 e3       	ldi	r30, 0x30	; 48
    432e:	f0 e0       	ldi	r31, 0x00	; 0
    4330:	80 81       	ld	r24, Z
    4332:	28 2f       	mov	r18, r24
    4334:	30 e0       	ldi	r19, 0x00	; 0
    4336:	8a 81       	ldd	r24, Y+2	; 0x02
    4338:	88 2f       	mov	r24, r24
    433a:	90 e0       	ldi	r25, 0x00	; 0
    433c:	a9 01       	movw	r20, r18
    433e:	02 c0       	rjmp	.+4      	; 0x4344 <GPIO_readPin+0x10c>
    4340:	55 95       	asr	r21
    4342:	47 95       	ror	r20
    4344:	8a 95       	dec	r24
    4346:	e2 f7       	brpl	.-8      	; 0x4340 <GPIO_readPin+0x108>
    4348:	ca 01       	movw	r24, r20
    434a:	81 70       	andi	r24, 0x01	; 1
    434c:	90 70       	andi	r25, 0x00	; 0
    434e:	88 23       	and	r24, r24
    4350:	19 f0       	breq	.+6      	; 0x4358 <GPIO_readPin+0x120>
					{
					return LOGIC_HIGH;
    4352:	51 e0       	ldi	r21, 0x01	; 1
    4354:	5b 83       	std	Y+3, r21	; 0x03
    4356:	05 c0       	rjmp	.+10     	; 0x4362 <GPIO_readPin+0x12a>
					}
				else
					return LOGIC_LOW;
    4358:	1b 82       	std	Y+3, r1	; 0x03
    435a:	03 c0       	rjmp	.+6      	; 0x4362 <GPIO_readPin+0x12a>
				break;
			default :
				return LOGIC_LOW; /*To solve syntax error on return !*/
    435c:	1b 82       	std	Y+3, r1	; 0x03
    435e:	01 c0       	rjmp	.+2      	; 0x4362 <GPIO_readPin+0x12a>
    4360:	02 c0       	rjmp	.+4      	; 0x4366 <GPIO_readPin+0x12e>
			}
		}
	}
    4362:	8b 81       	ldd	r24, Y+3	; 0x03
    4364:	8e 83       	std	Y+6, r24	; 0x06
    4366:	8e 81       	ldd	r24, Y+6	; 0x06
    4368:	26 96       	adiw	r28, 0x06	; 6
    436a:	0f b6       	in	r0, 0x3f	; 63
    436c:	f8 94       	cli
    436e:	de bf       	out	0x3e, r29	; 62
    4370:	0f be       	out	0x3f, r0	; 63
    4372:	cd bf       	out	0x3d, r28	; 61
    4374:	cf 91       	pop	r28
    4376:	df 91       	pop	r29
    4378:	08 95       	ret

0000437a <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    437a:	df 93       	push	r29
    437c:	cf 93       	push	r28
    437e:	00 d0       	rcall	.+0      	; 0x4380 <GPIO_setupPortDirection+0x6>
    4380:	00 d0       	rcall	.+0      	; 0x4382 <GPIO_setupPortDirection+0x8>
    4382:	cd b7       	in	r28, 0x3d	; 61
    4384:	de b7       	in	r29, 0x3e	; 62
    4386:	89 83       	std	Y+1, r24	; 0x01
    4388:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    438a:	89 81       	ldd	r24, Y+1	; 0x01
    438c:	84 30       	cpi	r24, 0x04	; 4
    438e:	90 f5       	brcc	.+100    	; 0x43f4 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    4390:	89 81       	ldd	r24, Y+1	; 0x01
    4392:	28 2f       	mov	r18, r24
    4394:	30 e0       	ldi	r19, 0x00	; 0
    4396:	3c 83       	std	Y+4, r19	; 0x04
    4398:	2b 83       	std	Y+3, r18	; 0x03
    439a:	8b 81       	ldd	r24, Y+3	; 0x03
    439c:	9c 81       	ldd	r25, Y+4	; 0x04
    439e:	81 30       	cpi	r24, 0x01	; 1
    43a0:	91 05       	cpc	r25, r1
    43a2:	d1 f0       	breq	.+52     	; 0x43d8 <GPIO_setupPortDirection+0x5e>
    43a4:	2b 81       	ldd	r18, Y+3	; 0x03
    43a6:	3c 81       	ldd	r19, Y+4	; 0x04
    43a8:	22 30       	cpi	r18, 0x02	; 2
    43aa:	31 05       	cpc	r19, r1
    43ac:	2c f4       	brge	.+10     	; 0x43b8 <GPIO_setupPortDirection+0x3e>
    43ae:	8b 81       	ldd	r24, Y+3	; 0x03
    43b0:	9c 81       	ldd	r25, Y+4	; 0x04
    43b2:	00 97       	sbiw	r24, 0x00	; 0
    43b4:	61 f0       	breq	.+24     	; 0x43ce <GPIO_setupPortDirection+0x54>
    43b6:	1e c0       	rjmp	.+60     	; 0x43f4 <GPIO_setupPortDirection+0x7a>
    43b8:	2b 81       	ldd	r18, Y+3	; 0x03
    43ba:	3c 81       	ldd	r19, Y+4	; 0x04
    43bc:	22 30       	cpi	r18, 0x02	; 2
    43be:	31 05       	cpc	r19, r1
    43c0:	81 f0       	breq	.+32     	; 0x43e2 <GPIO_setupPortDirection+0x68>
    43c2:	8b 81       	ldd	r24, Y+3	; 0x03
    43c4:	9c 81       	ldd	r25, Y+4	; 0x04
    43c6:	83 30       	cpi	r24, 0x03	; 3
    43c8:	91 05       	cpc	r25, r1
    43ca:	81 f0       	breq	.+32     	; 0x43ec <GPIO_setupPortDirection+0x72>
    43cc:	13 c0       	rjmp	.+38     	; 0x43f4 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    43ce:	ea e3       	ldi	r30, 0x3A	; 58
    43d0:	f0 e0       	ldi	r31, 0x00	; 0
    43d2:	8a 81       	ldd	r24, Y+2	; 0x02
    43d4:	80 83       	st	Z, r24
    43d6:	0e c0       	rjmp	.+28     	; 0x43f4 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    43d8:	e7 e3       	ldi	r30, 0x37	; 55
    43da:	f0 e0       	ldi	r31, 0x00	; 0
    43dc:	8a 81       	ldd	r24, Y+2	; 0x02
    43de:	80 83       	st	Z, r24
    43e0:	09 c0       	rjmp	.+18     	; 0x43f4 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    43e2:	e4 e3       	ldi	r30, 0x34	; 52
    43e4:	f0 e0       	ldi	r31, 0x00	; 0
    43e6:	8a 81       	ldd	r24, Y+2	; 0x02
    43e8:	80 83       	st	Z, r24
    43ea:	04 c0       	rjmp	.+8      	; 0x43f4 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    43ec:	e1 e3       	ldi	r30, 0x31	; 49
    43ee:	f0 e0       	ldi	r31, 0x00	; 0
    43f0:	8a 81       	ldd	r24, Y+2	; 0x02
    43f2:	80 83       	st	Z, r24
			break;
		}
	}
}
    43f4:	0f 90       	pop	r0
    43f6:	0f 90       	pop	r0
    43f8:	0f 90       	pop	r0
    43fa:	0f 90       	pop	r0
    43fc:	cf 91       	pop	r28
    43fe:	df 91       	pop	r29
    4400:	08 95       	ret

00004402 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    4402:	df 93       	push	r29
    4404:	cf 93       	push	r28
    4406:	00 d0       	rcall	.+0      	; 0x4408 <GPIO_writePort+0x6>
    4408:	00 d0       	rcall	.+0      	; 0x440a <GPIO_writePort+0x8>
    440a:	cd b7       	in	r28, 0x3d	; 61
    440c:	de b7       	in	r29, 0x3e	; 62
    440e:	89 83       	std	Y+1, r24	; 0x01
    4410:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num >= NUM_OF_PORTS)
    4412:	89 81       	ldd	r24, Y+1	; 0x01
    4414:	84 30       	cpi	r24, 0x04	; 4
    4416:	90 f5       	brcc	.+100    	; 0x447c <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    4418:	89 81       	ldd	r24, Y+1	; 0x01
    441a:	28 2f       	mov	r18, r24
    441c:	30 e0       	ldi	r19, 0x00	; 0
    441e:	3c 83       	std	Y+4, r19	; 0x04
    4420:	2b 83       	std	Y+3, r18	; 0x03
    4422:	8b 81       	ldd	r24, Y+3	; 0x03
    4424:	9c 81       	ldd	r25, Y+4	; 0x04
    4426:	81 30       	cpi	r24, 0x01	; 1
    4428:	91 05       	cpc	r25, r1
    442a:	d1 f0       	breq	.+52     	; 0x4460 <GPIO_writePort+0x5e>
    442c:	2b 81       	ldd	r18, Y+3	; 0x03
    442e:	3c 81       	ldd	r19, Y+4	; 0x04
    4430:	22 30       	cpi	r18, 0x02	; 2
    4432:	31 05       	cpc	r19, r1
    4434:	2c f4       	brge	.+10     	; 0x4440 <GPIO_writePort+0x3e>
    4436:	8b 81       	ldd	r24, Y+3	; 0x03
    4438:	9c 81       	ldd	r25, Y+4	; 0x04
    443a:	00 97       	sbiw	r24, 0x00	; 0
    443c:	61 f0       	breq	.+24     	; 0x4456 <GPIO_writePort+0x54>
    443e:	1e c0       	rjmp	.+60     	; 0x447c <GPIO_writePort+0x7a>
    4440:	2b 81       	ldd	r18, Y+3	; 0x03
    4442:	3c 81       	ldd	r19, Y+4	; 0x04
    4444:	22 30       	cpi	r18, 0x02	; 2
    4446:	31 05       	cpc	r19, r1
    4448:	81 f0       	breq	.+32     	; 0x446a <GPIO_writePort+0x68>
    444a:	8b 81       	ldd	r24, Y+3	; 0x03
    444c:	9c 81       	ldd	r25, Y+4	; 0x04
    444e:	83 30       	cpi	r24, 0x03	; 3
    4450:	91 05       	cpc	r25, r1
    4452:	81 f0       	breq	.+32     	; 0x4474 <GPIO_writePort+0x72>
    4454:	13 c0       	rjmp	.+38     	; 0x447c <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    4456:	eb e3       	ldi	r30, 0x3B	; 59
    4458:	f0 e0       	ldi	r31, 0x00	; 0
    445a:	8a 81       	ldd	r24, Y+2	; 0x02
    445c:	80 83       	st	Z, r24
    445e:	0e c0       	rjmp	.+28     	; 0x447c <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    4460:	e8 e3       	ldi	r30, 0x38	; 56
    4462:	f0 e0       	ldi	r31, 0x00	; 0
    4464:	8a 81       	ldd	r24, Y+2	; 0x02
    4466:	80 83       	st	Z, r24
    4468:	09 c0       	rjmp	.+18     	; 0x447c <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    446a:	e5 e3       	ldi	r30, 0x35	; 53
    446c:	f0 e0       	ldi	r31, 0x00	; 0
    446e:	8a 81       	ldd	r24, Y+2	; 0x02
    4470:	80 83       	st	Z, r24
    4472:	04 c0       	rjmp	.+8      	; 0x447c <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    4474:	e2 e3       	ldi	r30, 0x32	; 50
    4476:	f0 e0       	ldi	r31, 0x00	; 0
    4478:	8a 81       	ldd	r24, Y+2	; 0x02
    447a:	80 83       	st	Z, r24
			break;
		}
	}
}
    447c:	0f 90       	pop	r0
    447e:	0f 90       	pop	r0
    4480:	0f 90       	pop	r0
    4482:	0f 90       	pop	r0
    4484:	cf 91       	pop	r28
    4486:	df 91       	pop	r29
    4488:	08 95       	ret

0000448a <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    448a:	df 93       	push	r29
    448c:	cf 93       	push	r28
    448e:	00 d0       	rcall	.+0      	; 0x4490 <GPIO_readPort+0x6>
    4490:	00 d0       	rcall	.+0      	; 0x4492 <GPIO_readPort+0x8>
    4492:	0f 92       	push	r0
    4494:	cd b7       	in	r28, 0x3d	; 61
    4496:	de b7       	in	r29, 0x3e	; 62
    4498:	89 83       	std	Y+1, r24	; 0x01
	if(port_num >= NUM_OF_PORTS)
    449a:	89 81       	ldd	r24, Y+1	; 0x01
    449c:	84 30       	cpi	r24, 0x04	; 4
    449e:	10 f0       	brcs	.+4      	; 0x44a4 <GPIO_readPort+0x1a>
		{
			return 0;
    44a0:	1c 82       	std	Y+4, r1	; 0x04
    44a2:	34 c0       	rjmp	.+104    	; 0x450c <GPIO_readPort+0x82>
		}
		else
		{
			/* Setup the port direction as required */
			switch(port_num)
    44a4:	89 81       	ldd	r24, Y+1	; 0x01
    44a6:	28 2f       	mov	r18, r24
    44a8:	30 e0       	ldi	r19, 0x00	; 0
    44aa:	3b 83       	std	Y+3, r19	; 0x03
    44ac:	2a 83       	std	Y+2, r18	; 0x02
    44ae:	8a 81       	ldd	r24, Y+2	; 0x02
    44b0:	9b 81       	ldd	r25, Y+3	; 0x03
    44b2:	81 30       	cpi	r24, 0x01	; 1
    44b4:	91 05       	cpc	r25, r1
    44b6:	d1 f0       	breq	.+52     	; 0x44ec <GPIO_readPort+0x62>
    44b8:	2a 81       	ldd	r18, Y+2	; 0x02
    44ba:	3b 81       	ldd	r19, Y+3	; 0x03
    44bc:	22 30       	cpi	r18, 0x02	; 2
    44be:	31 05       	cpc	r19, r1
    44c0:	2c f4       	brge	.+10     	; 0x44cc <GPIO_readPort+0x42>
    44c2:	8a 81       	ldd	r24, Y+2	; 0x02
    44c4:	9b 81       	ldd	r25, Y+3	; 0x03
    44c6:	00 97       	sbiw	r24, 0x00	; 0
    44c8:	61 f0       	breq	.+24     	; 0x44e2 <GPIO_readPort+0x58>
    44ca:	1f c0       	rjmp	.+62     	; 0x450a <GPIO_readPort+0x80>
    44cc:	2a 81       	ldd	r18, Y+2	; 0x02
    44ce:	3b 81       	ldd	r19, Y+3	; 0x03
    44d0:	22 30       	cpi	r18, 0x02	; 2
    44d2:	31 05       	cpc	r19, r1
    44d4:	81 f0       	breq	.+32     	; 0x44f6 <GPIO_readPort+0x6c>
    44d6:	8a 81       	ldd	r24, Y+2	; 0x02
    44d8:	9b 81       	ldd	r25, Y+3	; 0x03
    44da:	83 30       	cpi	r24, 0x03	; 3
    44dc:	91 05       	cpc	r25, r1
    44de:	81 f0       	breq	.+32     	; 0x4500 <GPIO_readPort+0x76>
    44e0:	14 c0       	rjmp	.+40     	; 0x450a <GPIO_readPort+0x80>
			{
			case PORTA_ID:
				return PINA;
    44e2:	e9 e3       	ldi	r30, 0x39	; 57
    44e4:	f0 e0       	ldi	r31, 0x00	; 0
    44e6:	90 81       	ld	r25, Z
    44e8:	9c 83       	std	Y+4, r25	; 0x04
    44ea:	10 c0       	rjmp	.+32     	; 0x450c <GPIO_readPort+0x82>
				break;
			case PORTB_ID:
				return PINB;
    44ec:	e6 e3       	ldi	r30, 0x36	; 54
    44ee:	f0 e0       	ldi	r31, 0x00	; 0
    44f0:	20 81       	ld	r18, Z
    44f2:	2c 83       	std	Y+4, r18	; 0x04
    44f4:	0b c0       	rjmp	.+22     	; 0x450c <GPIO_readPort+0x82>
				break;
			case PORTC_ID:
				return PINC;
    44f6:	e3 e3       	ldi	r30, 0x33	; 51
    44f8:	f0 e0       	ldi	r31, 0x00	; 0
    44fa:	30 81       	ld	r19, Z
    44fc:	3c 83       	std	Y+4, r19	; 0x04
    44fe:	06 c0       	rjmp	.+12     	; 0x450c <GPIO_readPort+0x82>
				break;
			case PORTD_ID:
				return PIND; /*value = PIND*/
    4500:	e0 e3       	ldi	r30, 0x30	; 48
    4502:	f0 e0       	ldi	r31, 0x00	; 0
    4504:	80 81       	ld	r24, Z
    4506:	8c 83       	std	Y+4, r24	; 0x04
    4508:	01 c0       	rjmp	.+2      	; 0x450c <GPIO_readPort+0x82>
    450a:	02 c0       	rjmp	.+4      	; 0x4510 <GPIO_readPort+0x86>
				break;
			}
		}
	/*return the value here */
}
    450c:	9c 81       	ldd	r25, Y+4	; 0x04
    450e:	9d 83       	std	Y+5, r25	; 0x05
    4510:	8d 81       	ldd	r24, Y+5	; 0x05
    4512:	0f 90       	pop	r0
    4514:	0f 90       	pop	r0
    4516:	0f 90       	pop	r0
    4518:	0f 90       	pop	r0
    451a:	0f 90       	pop	r0
    451c:	cf 91       	pop	r28
    451e:	df 91       	pop	r29
    4520:	08 95       	ret

00004522 <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    4522:	df 93       	push	r29
    4524:	cf 93       	push	r28
    4526:	cd b7       	in	r28, 0x3d	; 61
    4528:	de b7       	in	r29, 0x3e	; 62
    452a:	60 97       	sbiw	r28, 0x10	; 16
    452c:	0f b6       	in	r0, 0x3f	; 63
    452e:	f8 94       	cli
    4530:	de bf       	out	0x3e, r29	; 62
    4532:	0f be       	out	0x3f, r0	; 63
    4534:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    4536:	81 e0       	ldi	r24, 0x01	; 1
    4538:	64 e0       	ldi	r22, 0x04	; 4
    453a:	40 e0       	ldi	r20, 0x00	; 0
    453c:	0e 94 46 1f 	call	0x3e8c	; 0x3e8c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    4540:	81 e0       	ldi	r24, 0x01	; 1
    4542:	65 e0       	ldi	r22, 0x05	; 5
    4544:	40 e0       	ldi	r20, 0x00	; 0
    4546:	0e 94 46 1f 	call	0x3e8c	; 0x3e8c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    454a:	81 e0       	ldi	r24, 0x01	; 1
    454c:	66 e0       	ldi	r22, 0x06	; 6
    454e:	40 e0       	ldi	r20, 0x00	; 0
    4550:	0e 94 46 1f 	call	0x3e8c	; 0x3e8c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    4554:	81 e0       	ldi	r24, 0x01	; 1
    4556:	67 e0       	ldi	r22, 0x07	; 7
    4558:	40 e0       	ldi	r20, 0x00	; 0
    455a:	0e 94 46 1f 	call	0x3e8c	; 0x3e8c <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    455e:	83 e0       	ldi	r24, 0x03	; 3
    4560:	62 e0       	ldi	r22, 0x02	; 2
    4562:	40 e0       	ldi	r20, 0x00	; 0
    4564:	0e 94 46 1f 	call	0x3e8c	; 0x3e8c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    4568:	83 e0       	ldi	r24, 0x03	; 3
    456a:	63 e0       	ldi	r22, 0x03	; 3
    456c:	40 e0       	ldi	r20, 0x00	; 0
    456e:	0e 94 46 1f 	call	0x3e8c	; 0x3e8c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    4572:	83 e0       	ldi	r24, 0x03	; 3
    4574:	64 e0       	ldi	r22, 0x04	; 4
    4576:	40 e0       	ldi	r20, 0x00	; 0
    4578:	0e 94 46 1f 	call	0x3e8c	; 0x3e8c <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    457c:	83 e0       	ldi	r24, 0x03	; 3
    457e:	65 e0       	ldi	r22, 0x05	; 5
    4580:	40 e0       	ldi	r20, 0x00	; 0
    4582:	0e 94 46 1f 	call	0x3e8c	; 0x3e8c <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    4586:	1f 86       	std	Y+15, r1	; 0x0f
    4588:	b4 c0       	rjmp	.+360    	; 0x46f2 <KEYPAD_getPressedKey+0x1d0>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    458a:	8f 85       	ldd	r24, Y+15	; 0x0f
    458c:	98 2f       	mov	r25, r24
    458e:	9c 5f       	subi	r25, 0xFC	; 252
    4590:	81 e0       	ldi	r24, 0x01	; 1
    4592:	69 2f       	mov	r22, r25
    4594:	41 e0       	ldi	r20, 0x01	; 1
    4596:	0e 94 46 1f 	call	0x3e8c	; 0x3e8c <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    459a:	8f 85       	ldd	r24, Y+15	; 0x0f
    459c:	98 2f       	mov	r25, r24
    459e:	9c 5f       	subi	r25, 0xFC	; 252
    45a0:	81 e0       	ldi	r24, 0x01	; 1
    45a2:	69 2f       	mov	r22, r25
    45a4:	40 e0       	ldi	r20, 0x00	; 0
    45a6:	0e 94 31 20 	call	0x4062	; 0x4062 <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    45aa:	18 8a       	std	Y+16, r1	; 0x10
    45ac:	22 c0       	rjmp	.+68     	; 0x45f2 <KEYPAD_getPressedKey+0xd0>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    45ae:	88 89       	ldd	r24, Y+16	; 0x10
    45b0:	98 2f       	mov	r25, r24
    45b2:	9e 5f       	subi	r25, 0xFE	; 254
    45b4:	83 e0       	ldi	r24, 0x03	; 3
    45b6:	69 2f       	mov	r22, r25
    45b8:	0e 94 1c 21 	call	0x4238	; 0x4238 <GPIO_readPin>
    45bc:	88 23       	and	r24, r24
    45be:	b1 f4       	brne	.+44     	; 0x45ec <KEYPAD_getPressedKey+0xca>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    45c0:	8f 85       	ldd	r24, Y+15	; 0x0f
    45c2:	88 2f       	mov	r24, r24
    45c4:	90 e0       	ldi	r25, 0x00	; 0
    45c6:	88 0f       	add	r24, r24
    45c8:	99 1f       	adc	r25, r25
    45ca:	88 0f       	add	r24, r24
    45cc:	99 1f       	adc	r25, r25
    45ce:	98 2f       	mov	r25, r24
    45d0:	88 89       	ldd	r24, Y+16	; 0x10
    45d2:	89 0f       	add	r24, r25
    45d4:	8f 5f       	subi	r24, 0xFF	; 255
    45d6:	0e 94 7e 23 	call	0x46fc	; 0x46fc <KEYPAD_4x4_adjustKeyNumber>
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			_delay_ms(5); /* Add small delay to fix CPU load issue in proteus */
		}
	}	
}
    45da:	60 96       	adiw	r28, 0x10	; 16
    45dc:	0f b6       	in	r0, 0x3f	; 63
    45de:	f8 94       	cli
    45e0:	de bf       	out	0x3e, r29	; 62
    45e2:	0f be       	out	0x3f, r0	; 63
    45e4:	cd bf       	out	0x3d, r28	; 61
    45e6:	cf 91       	pop	r28
    45e8:	df 91       	pop	r29
    45ea:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    45ec:	88 89       	ldd	r24, Y+16	; 0x10
    45ee:	8f 5f       	subi	r24, 0xFF	; 255
    45f0:	88 8b       	std	Y+16, r24	; 0x10
    45f2:	88 89       	ldd	r24, Y+16	; 0x10
    45f4:	84 30       	cpi	r24, 0x04	; 4
    45f6:	d8 f2       	brcs	.-74     	; 0x45ae <KEYPAD_getPressedKey+0x8c>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    45f8:	8f 85       	ldd	r24, Y+15	; 0x0f
    45fa:	98 2f       	mov	r25, r24
    45fc:	9c 5f       	subi	r25, 0xFC	; 252
    45fe:	81 e0       	ldi	r24, 0x01	; 1
    4600:	69 2f       	mov	r22, r25
    4602:	40 e0       	ldi	r20, 0x00	; 0
    4604:	0e 94 46 1f 	call	0x3e8c	; 0x3e8c <GPIO_setupPinDirection>
    4608:	80 e0       	ldi	r24, 0x00	; 0
    460a:	90 e0       	ldi	r25, 0x00	; 0
    460c:	a0 ea       	ldi	r26, 0xA0	; 160
    460e:	b0 e4       	ldi	r27, 0x40	; 64
    4610:	8b 87       	std	Y+11, r24	; 0x0b
    4612:	9c 87       	std	Y+12, r25	; 0x0c
    4614:	ad 87       	std	Y+13, r26	; 0x0d
    4616:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4618:	6b 85       	ldd	r22, Y+11	; 0x0b
    461a:	7c 85       	ldd	r23, Y+12	; 0x0c
    461c:	8d 85       	ldd	r24, Y+13	; 0x0d
    461e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4620:	20 e0       	ldi	r18, 0x00	; 0
    4622:	30 e0       	ldi	r19, 0x00	; 0
    4624:	4a ef       	ldi	r20, 0xFA	; 250
    4626:	54 e4       	ldi	r21, 0x44	; 68
    4628:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    462c:	dc 01       	movw	r26, r24
    462e:	cb 01       	movw	r24, r22
    4630:	8f 83       	std	Y+7, r24	; 0x07
    4632:	98 87       	std	Y+8, r25	; 0x08
    4634:	a9 87       	std	Y+9, r26	; 0x09
    4636:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4638:	6f 81       	ldd	r22, Y+7	; 0x07
    463a:	78 85       	ldd	r23, Y+8	; 0x08
    463c:	89 85       	ldd	r24, Y+9	; 0x09
    463e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4640:	20 e0       	ldi	r18, 0x00	; 0
    4642:	30 e0       	ldi	r19, 0x00	; 0
    4644:	40 e8       	ldi	r20, 0x80	; 128
    4646:	5f e3       	ldi	r21, 0x3F	; 63
    4648:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    464c:	88 23       	and	r24, r24
    464e:	2c f4       	brge	.+10     	; 0x465a <KEYPAD_getPressedKey+0x138>
		__ticks = 1;
    4650:	81 e0       	ldi	r24, 0x01	; 1
    4652:	90 e0       	ldi	r25, 0x00	; 0
    4654:	9e 83       	std	Y+6, r25	; 0x06
    4656:	8d 83       	std	Y+5, r24	; 0x05
    4658:	3f c0       	rjmp	.+126    	; 0x46d8 <KEYPAD_getPressedKey+0x1b6>
	else if (__tmp > 65535)
    465a:	6f 81       	ldd	r22, Y+7	; 0x07
    465c:	78 85       	ldd	r23, Y+8	; 0x08
    465e:	89 85       	ldd	r24, Y+9	; 0x09
    4660:	9a 85       	ldd	r25, Y+10	; 0x0a
    4662:	20 e0       	ldi	r18, 0x00	; 0
    4664:	3f ef       	ldi	r19, 0xFF	; 255
    4666:	4f e7       	ldi	r20, 0x7F	; 127
    4668:	57 e4       	ldi	r21, 0x47	; 71
    466a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    466e:	18 16       	cp	r1, r24
    4670:	4c f5       	brge	.+82     	; 0x46c4 <KEYPAD_getPressedKey+0x1a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4672:	6b 85       	ldd	r22, Y+11	; 0x0b
    4674:	7c 85       	ldd	r23, Y+12	; 0x0c
    4676:	8d 85       	ldd	r24, Y+13	; 0x0d
    4678:	9e 85       	ldd	r25, Y+14	; 0x0e
    467a:	20 e0       	ldi	r18, 0x00	; 0
    467c:	30 e0       	ldi	r19, 0x00	; 0
    467e:	40 e2       	ldi	r20, 0x20	; 32
    4680:	51 e4       	ldi	r21, 0x41	; 65
    4682:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4686:	dc 01       	movw	r26, r24
    4688:	cb 01       	movw	r24, r22
    468a:	bc 01       	movw	r22, r24
    468c:	cd 01       	movw	r24, r26
    468e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4692:	dc 01       	movw	r26, r24
    4694:	cb 01       	movw	r24, r22
    4696:	9e 83       	std	Y+6, r25	; 0x06
    4698:	8d 83       	std	Y+5, r24	; 0x05
    469a:	0f c0       	rjmp	.+30     	; 0x46ba <KEYPAD_getPressedKey+0x198>
    469c:	88 ec       	ldi	r24, 0xC8	; 200
    469e:	90 e0       	ldi	r25, 0x00	; 0
    46a0:	9c 83       	std	Y+4, r25	; 0x04
    46a2:	8b 83       	std	Y+3, r24	; 0x03
    46a4:	8b 81       	ldd	r24, Y+3	; 0x03
    46a6:	9c 81       	ldd	r25, Y+4	; 0x04
    46a8:	01 97       	sbiw	r24, 0x01	; 1
    46aa:	f1 f7       	brne	.-4      	; 0x46a8 <KEYPAD_getPressedKey+0x186>
    46ac:	9c 83       	std	Y+4, r25	; 0x04
    46ae:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    46b0:	8d 81       	ldd	r24, Y+5	; 0x05
    46b2:	9e 81       	ldd	r25, Y+6	; 0x06
    46b4:	01 97       	sbiw	r24, 0x01	; 1
    46b6:	9e 83       	std	Y+6, r25	; 0x06
    46b8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    46ba:	8d 81       	ldd	r24, Y+5	; 0x05
    46bc:	9e 81       	ldd	r25, Y+6	; 0x06
    46be:	00 97       	sbiw	r24, 0x00	; 0
    46c0:	69 f7       	brne	.-38     	; 0x469c <KEYPAD_getPressedKey+0x17a>
    46c2:	14 c0       	rjmp	.+40     	; 0x46ec <KEYPAD_getPressedKey+0x1ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    46c4:	6f 81       	ldd	r22, Y+7	; 0x07
    46c6:	78 85       	ldd	r23, Y+8	; 0x08
    46c8:	89 85       	ldd	r24, Y+9	; 0x09
    46ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    46cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46d0:	dc 01       	movw	r26, r24
    46d2:	cb 01       	movw	r24, r22
    46d4:	9e 83       	std	Y+6, r25	; 0x06
    46d6:	8d 83       	std	Y+5, r24	; 0x05
    46d8:	8d 81       	ldd	r24, Y+5	; 0x05
    46da:	9e 81       	ldd	r25, Y+6	; 0x06
    46dc:	9a 83       	std	Y+2, r25	; 0x02
    46de:	89 83       	std	Y+1, r24	; 0x01
    46e0:	89 81       	ldd	r24, Y+1	; 0x01
    46e2:	9a 81       	ldd	r25, Y+2	; 0x02
    46e4:	01 97       	sbiw	r24, 0x01	; 1
    46e6:	f1 f7       	brne	.-4      	; 0x46e4 <KEYPAD_getPressedKey+0x1c2>
    46e8:	9a 83       	std	Y+2, r25	; 0x02
    46ea:	89 83       	std	Y+1, r24	; 0x01
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    46ec:	8f 85       	ldd	r24, Y+15	; 0x0f
    46ee:	8f 5f       	subi	r24, 0xFF	; 255
    46f0:	8f 87       	std	Y+15, r24	; 0x0f
    46f2:	8f 85       	ldd	r24, Y+15	; 0x0f
    46f4:	84 30       	cpi	r24, 0x04	; 4
    46f6:	08 f4       	brcc	.+2      	; 0x46fa <KEYPAD_getPressedKey+0x1d8>
    46f8:	48 cf       	rjmp	.-368    	; 0x458a <KEYPAD_getPressedKey+0x68>
    46fa:	45 cf       	rjmp	.-374    	; 0x4586 <KEYPAD_getPressedKey+0x64>

000046fc <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    46fc:	df 93       	push	r29
    46fe:	cf 93       	push	r28
    4700:	00 d0       	rcall	.+0      	; 0x4702 <KEYPAD_4x4_adjustKeyNumber+0x6>
    4702:	00 d0       	rcall	.+0      	; 0x4704 <KEYPAD_4x4_adjustKeyNumber+0x8>
    4704:	cd b7       	in	r28, 0x3d	; 61
    4706:	de b7       	in	r29, 0x3e	; 62
    4708:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    470a:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    470c:	8a 81       	ldd	r24, Y+2	; 0x02
    470e:	28 2f       	mov	r18, r24
    4710:	30 e0       	ldi	r19, 0x00	; 0
    4712:	3c 83       	std	Y+4, r19	; 0x04
    4714:	2b 83       	std	Y+3, r18	; 0x03
    4716:	8b 81       	ldd	r24, Y+3	; 0x03
    4718:	9c 81       	ldd	r25, Y+4	; 0x04
    471a:	88 30       	cpi	r24, 0x08	; 8
    471c:	91 05       	cpc	r25, r1
    471e:	09 f4       	brne	.+2      	; 0x4722 <KEYPAD_4x4_adjustKeyNumber+0x26>
    4720:	70 c0       	rjmp	.+224    	; 0x4802 <KEYPAD_4x4_adjustKeyNumber+0x106>
    4722:	2b 81       	ldd	r18, Y+3	; 0x03
    4724:	3c 81       	ldd	r19, Y+4	; 0x04
    4726:	29 30       	cpi	r18, 0x09	; 9
    4728:	31 05       	cpc	r19, r1
    472a:	5c f5       	brge	.+86     	; 0x4782 <KEYPAD_4x4_adjustKeyNumber+0x86>
    472c:	8b 81       	ldd	r24, Y+3	; 0x03
    472e:	9c 81       	ldd	r25, Y+4	; 0x04
    4730:	84 30       	cpi	r24, 0x04	; 4
    4732:	91 05       	cpc	r25, r1
    4734:	09 f4       	brne	.+2      	; 0x4738 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    4736:	59 c0       	rjmp	.+178    	; 0x47ea <KEYPAD_4x4_adjustKeyNumber+0xee>
    4738:	2b 81       	ldd	r18, Y+3	; 0x03
    473a:	3c 81       	ldd	r19, Y+4	; 0x04
    473c:	25 30       	cpi	r18, 0x05	; 5
    473e:	31 05       	cpc	r19, r1
    4740:	9c f4       	brge	.+38     	; 0x4768 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    4742:	8b 81       	ldd	r24, Y+3	; 0x03
    4744:	9c 81       	ldd	r25, Y+4	; 0x04
    4746:	82 30       	cpi	r24, 0x02	; 2
    4748:	91 05       	cpc	r25, r1
    474a:	09 f4       	brne	.+2      	; 0x474e <KEYPAD_4x4_adjustKeyNumber+0x52>
    474c:	48 c0       	rjmp	.+144    	; 0x47de <KEYPAD_4x4_adjustKeyNumber+0xe2>
    474e:	2b 81       	ldd	r18, Y+3	; 0x03
    4750:	3c 81       	ldd	r19, Y+4	; 0x04
    4752:	23 30       	cpi	r18, 0x03	; 3
    4754:	31 05       	cpc	r19, r1
    4756:	0c f0       	brlt	.+2      	; 0x475a <KEYPAD_4x4_adjustKeyNumber+0x5e>
    4758:	45 c0       	rjmp	.+138    	; 0x47e4 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    475a:	8b 81       	ldd	r24, Y+3	; 0x03
    475c:	9c 81       	ldd	r25, Y+4	; 0x04
    475e:	81 30       	cpi	r24, 0x01	; 1
    4760:	91 05       	cpc	r25, r1
    4762:	09 f4       	brne	.+2      	; 0x4766 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    4764:	39 c0       	rjmp	.+114    	; 0x47d8 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    4766:	67 c0       	rjmp	.+206    	; 0x4836 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    4768:	2b 81       	ldd	r18, Y+3	; 0x03
    476a:	3c 81       	ldd	r19, Y+4	; 0x04
    476c:	26 30       	cpi	r18, 0x06	; 6
    476e:	31 05       	cpc	r19, r1
    4770:	09 f4       	brne	.+2      	; 0x4774 <KEYPAD_4x4_adjustKeyNumber+0x78>
    4772:	41 c0       	rjmp	.+130    	; 0x47f6 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    4774:	8b 81       	ldd	r24, Y+3	; 0x03
    4776:	9c 81       	ldd	r25, Y+4	; 0x04
    4778:	87 30       	cpi	r24, 0x07	; 7
    477a:	91 05       	cpc	r25, r1
    477c:	0c f0       	brlt	.+2      	; 0x4780 <KEYPAD_4x4_adjustKeyNumber+0x84>
    477e:	3e c0       	rjmp	.+124    	; 0x47fc <KEYPAD_4x4_adjustKeyNumber+0x100>
    4780:	37 c0       	rjmp	.+110    	; 0x47f0 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    4782:	2b 81       	ldd	r18, Y+3	; 0x03
    4784:	3c 81       	ldd	r19, Y+4	; 0x04
    4786:	2c 30       	cpi	r18, 0x0C	; 12
    4788:	31 05       	cpc	r19, r1
    478a:	09 f4       	brne	.+2      	; 0x478e <KEYPAD_4x4_adjustKeyNumber+0x92>
    478c:	46 c0       	rjmp	.+140    	; 0x481a <KEYPAD_4x4_adjustKeyNumber+0x11e>
    478e:	8b 81       	ldd	r24, Y+3	; 0x03
    4790:	9c 81       	ldd	r25, Y+4	; 0x04
    4792:	8d 30       	cpi	r24, 0x0D	; 13
    4794:	91 05       	cpc	r25, r1
    4796:	5c f4       	brge	.+22     	; 0x47ae <KEYPAD_4x4_adjustKeyNumber+0xb2>
    4798:	2b 81       	ldd	r18, Y+3	; 0x03
    479a:	3c 81       	ldd	r19, Y+4	; 0x04
    479c:	2a 30       	cpi	r18, 0x0A	; 10
    479e:	31 05       	cpc	r19, r1
    47a0:	b1 f1       	breq	.+108    	; 0x480e <KEYPAD_4x4_adjustKeyNumber+0x112>
    47a2:	8b 81       	ldd	r24, Y+3	; 0x03
    47a4:	9c 81       	ldd	r25, Y+4	; 0x04
    47a6:	8b 30       	cpi	r24, 0x0B	; 11
    47a8:	91 05       	cpc	r25, r1
    47aa:	a4 f5       	brge	.+104    	; 0x4814 <KEYPAD_4x4_adjustKeyNumber+0x118>
    47ac:	2d c0       	rjmp	.+90     	; 0x4808 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    47ae:	2b 81       	ldd	r18, Y+3	; 0x03
    47b0:	3c 81       	ldd	r19, Y+4	; 0x04
    47b2:	2e 30       	cpi	r18, 0x0E	; 14
    47b4:	31 05       	cpc	r19, r1
    47b6:	b9 f1       	breq	.+110    	; 0x4826 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    47b8:	8b 81       	ldd	r24, Y+3	; 0x03
    47ba:	9c 81       	ldd	r25, Y+4	; 0x04
    47bc:	8e 30       	cpi	r24, 0x0E	; 14
    47be:	91 05       	cpc	r25, r1
    47c0:	7c f1       	brlt	.+94     	; 0x4820 <KEYPAD_4x4_adjustKeyNumber+0x124>
    47c2:	2b 81       	ldd	r18, Y+3	; 0x03
    47c4:	3c 81       	ldd	r19, Y+4	; 0x04
    47c6:	2f 30       	cpi	r18, 0x0F	; 15
    47c8:	31 05       	cpc	r19, r1
    47ca:	79 f1       	breq	.+94     	; 0x482a <KEYPAD_4x4_adjustKeyNumber+0x12e>
    47cc:	8b 81       	ldd	r24, Y+3	; 0x03
    47ce:	9c 81       	ldd	r25, Y+4	; 0x04
    47d0:	80 31       	cpi	r24, 0x10	; 16
    47d2:	91 05       	cpc	r25, r1
    47d4:	69 f1       	breq	.+90     	; 0x4830 <KEYPAD_4x4_adjustKeyNumber+0x134>
    47d6:	2f c0       	rjmp	.+94     	; 0x4836 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    47d8:	87 e0       	ldi	r24, 0x07	; 7
    47da:	89 83       	std	Y+1, r24	; 0x01
    47dc:	2e c0       	rjmp	.+92     	; 0x483a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    47de:	88 e0       	ldi	r24, 0x08	; 8
    47e0:	89 83       	std	Y+1, r24	; 0x01
    47e2:	2b c0       	rjmp	.+86     	; 0x483a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    47e4:	89 e0       	ldi	r24, 0x09	; 9
    47e6:	89 83       	std	Y+1, r24	; 0x01
    47e8:	28 c0       	rjmp	.+80     	; 0x483a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    47ea:	85 e2       	ldi	r24, 0x25	; 37
    47ec:	89 83       	std	Y+1, r24	; 0x01
    47ee:	25 c0       	rjmp	.+74     	; 0x483a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    47f0:	84 e0       	ldi	r24, 0x04	; 4
    47f2:	89 83       	std	Y+1, r24	; 0x01
    47f4:	22 c0       	rjmp	.+68     	; 0x483a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    47f6:	85 e0       	ldi	r24, 0x05	; 5
    47f8:	89 83       	std	Y+1, r24	; 0x01
    47fa:	1f c0       	rjmp	.+62     	; 0x483a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    47fc:	86 e0       	ldi	r24, 0x06	; 6
    47fe:	89 83       	std	Y+1, r24	; 0x01
    4800:	1c c0       	rjmp	.+56     	; 0x483a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    4802:	8a e2       	ldi	r24, 0x2A	; 42
    4804:	89 83       	std	Y+1, r24	; 0x01
    4806:	19 c0       	rjmp	.+50     	; 0x483a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    4808:	81 e0       	ldi	r24, 0x01	; 1
    480a:	89 83       	std	Y+1, r24	; 0x01
    480c:	16 c0       	rjmp	.+44     	; 0x483a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    480e:	82 e0       	ldi	r24, 0x02	; 2
    4810:	89 83       	std	Y+1, r24	; 0x01
    4812:	13 c0       	rjmp	.+38     	; 0x483a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    4814:	83 e0       	ldi	r24, 0x03	; 3
    4816:	89 83       	std	Y+1, r24	; 0x01
    4818:	10 c0       	rjmp	.+32     	; 0x483a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    481a:	8d e2       	ldi	r24, 0x2D	; 45
    481c:	89 83       	std	Y+1, r24	; 0x01
    481e:	0d c0       	rjmp	.+26     	; 0x483a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    4820:	8d e0       	ldi	r24, 0x0D	; 13
    4822:	89 83       	std	Y+1, r24	; 0x01
    4824:	0a c0       	rjmp	.+20     	; 0x483a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    4826:	19 82       	std	Y+1, r1	; 0x01
    4828:	08 c0       	rjmp	.+16     	; 0x483a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    482a:	8d e3       	ldi	r24, 0x3D	; 61
    482c:	89 83       	std	Y+1, r24	; 0x01
    482e:	05 c0       	rjmp	.+10     	; 0x483a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    4830:	8b e2       	ldi	r24, 0x2B	; 43
    4832:	89 83       	std	Y+1, r24	; 0x01
    4834:	02 c0       	rjmp	.+4      	; 0x483a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    4836:	8a 81       	ldd	r24, Y+2	; 0x02
    4838:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    483a:	89 81       	ldd	r24, Y+1	; 0x01
} 
    483c:	0f 90       	pop	r0
    483e:	0f 90       	pop	r0
    4840:	0f 90       	pop	r0
    4842:	0f 90       	pop	r0
    4844:	cf 91       	pop	r28
    4846:	df 91       	pop	r29
    4848:	08 95       	ret

0000484a <__udivmodsi4>:
    484a:	a1 e2       	ldi	r26, 0x21	; 33
    484c:	1a 2e       	mov	r1, r26
    484e:	aa 1b       	sub	r26, r26
    4850:	bb 1b       	sub	r27, r27
    4852:	fd 01       	movw	r30, r26
    4854:	0d c0       	rjmp	.+26     	; 0x4870 <__udivmodsi4_ep>

00004856 <__udivmodsi4_loop>:
    4856:	aa 1f       	adc	r26, r26
    4858:	bb 1f       	adc	r27, r27
    485a:	ee 1f       	adc	r30, r30
    485c:	ff 1f       	adc	r31, r31
    485e:	a2 17       	cp	r26, r18
    4860:	b3 07       	cpc	r27, r19
    4862:	e4 07       	cpc	r30, r20
    4864:	f5 07       	cpc	r31, r21
    4866:	20 f0       	brcs	.+8      	; 0x4870 <__udivmodsi4_ep>
    4868:	a2 1b       	sub	r26, r18
    486a:	b3 0b       	sbc	r27, r19
    486c:	e4 0b       	sbc	r30, r20
    486e:	f5 0b       	sbc	r31, r21

00004870 <__udivmodsi4_ep>:
    4870:	66 1f       	adc	r22, r22
    4872:	77 1f       	adc	r23, r23
    4874:	88 1f       	adc	r24, r24
    4876:	99 1f       	adc	r25, r25
    4878:	1a 94       	dec	r1
    487a:	69 f7       	brne	.-38     	; 0x4856 <__udivmodsi4_loop>
    487c:	60 95       	com	r22
    487e:	70 95       	com	r23
    4880:	80 95       	com	r24
    4882:	90 95       	com	r25
    4884:	9b 01       	movw	r18, r22
    4886:	ac 01       	movw	r20, r24
    4888:	bd 01       	movw	r22, r26
    488a:	cf 01       	movw	r24, r30
    488c:	08 95       	ret

0000488e <__prologue_saves__>:
    488e:	2f 92       	push	r2
    4890:	3f 92       	push	r3
    4892:	4f 92       	push	r4
    4894:	5f 92       	push	r5
    4896:	6f 92       	push	r6
    4898:	7f 92       	push	r7
    489a:	8f 92       	push	r8
    489c:	9f 92       	push	r9
    489e:	af 92       	push	r10
    48a0:	bf 92       	push	r11
    48a2:	cf 92       	push	r12
    48a4:	df 92       	push	r13
    48a6:	ef 92       	push	r14
    48a8:	ff 92       	push	r15
    48aa:	0f 93       	push	r16
    48ac:	1f 93       	push	r17
    48ae:	cf 93       	push	r28
    48b0:	df 93       	push	r29
    48b2:	cd b7       	in	r28, 0x3d	; 61
    48b4:	de b7       	in	r29, 0x3e	; 62
    48b6:	ca 1b       	sub	r28, r26
    48b8:	db 0b       	sbc	r29, r27
    48ba:	0f b6       	in	r0, 0x3f	; 63
    48bc:	f8 94       	cli
    48be:	de bf       	out	0x3e, r29	; 62
    48c0:	0f be       	out	0x3f, r0	; 63
    48c2:	cd bf       	out	0x3d, r28	; 61
    48c4:	09 94       	ijmp

000048c6 <__epilogue_restores__>:
    48c6:	2a 88       	ldd	r2, Y+18	; 0x12
    48c8:	39 88       	ldd	r3, Y+17	; 0x11
    48ca:	48 88       	ldd	r4, Y+16	; 0x10
    48cc:	5f 84       	ldd	r5, Y+15	; 0x0f
    48ce:	6e 84       	ldd	r6, Y+14	; 0x0e
    48d0:	7d 84       	ldd	r7, Y+13	; 0x0d
    48d2:	8c 84       	ldd	r8, Y+12	; 0x0c
    48d4:	9b 84       	ldd	r9, Y+11	; 0x0b
    48d6:	aa 84       	ldd	r10, Y+10	; 0x0a
    48d8:	b9 84       	ldd	r11, Y+9	; 0x09
    48da:	c8 84       	ldd	r12, Y+8	; 0x08
    48dc:	df 80       	ldd	r13, Y+7	; 0x07
    48de:	ee 80       	ldd	r14, Y+6	; 0x06
    48e0:	fd 80       	ldd	r15, Y+5	; 0x05
    48e2:	0c 81       	ldd	r16, Y+4	; 0x04
    48e4:	1b 81       	ldd	r17, Y+3	; 0x03
    48e6:	aa 81       	ldd	r26, Y+2	; 0x02
    48e8:	b9 81       	ldd	r27, Y+1	; 0x01
    48ea:	ce 0f       	add	r28, r30
    48ec:	d1 1d       	adc	r29, r1
    48ee:	0f b6       	in	r0, 0x3f	; 63
    48f0:	f8 94       	cli
    48f2:	de bf       	out	0x3e, r29	; 62
    48f4:	0f be       	out	0x3f, r0	; 63
    48f6:	cd bf       	out	0x3d, r28	; 61
    48f8:	ed 01       	movw	r28, r26
    48fa:	08 95       	ret

000048fc <itoa>:
    48fc:	fb 01       	movw	r30, r22
    48fe:	9f 01       	movw	r18, r30
    4900:	e8 94       	clt
    4902:	42 30       	cpi	r20, 0x02	; 2
    4904:	c4 f0       	brlt	.+48     	; 0x4936 <itoa+0x3a>
    4906:	45 32       	cpi	r20, 0x25	; 37
    4908:	b4 f4       	brge	.+44     	; 0x4936 <itoa+0x3a>
    490a:	4a 30       	cpi	r20, 0x0A	; 10
    490c:	29 f4       	brne	.+10     	; 0x4918 <itoa+0x1c>
    490e:	97 fb       	bst	r25, 7
    4910:	1e f4       	brtc	.+6      	; 0x4918 <itoa+0x1c>
    4912:	90 95       	com	r25
    4914:	81 95       	neg	r24
    4916:	9f 4f       	sbci	r25, 0xFF	; 255
    4918:	64 2f       	mov	r22, r20
    491a:	77 27       	eor	r23, r23
    491c:	0e 94 af 24 	call	0x495e	; 0x495e <__udivmodhi4>
    4920:	80 5d       	subi	r24, 0xD0	; 208
    4922:	8a 33       	cpi	r24, 0x3A	; 58
    4924:	0c f0       	brlt	.+2      	; 0x4928 <itoa+0x2c>
    4926:	89 5d       	subi	r24, 0xD9	; 217
    4928:	81 93       	st	Z+, r24
    492a:	cb 01       	movw	r24, r22
    492c:	00 97       	sbiw	r24, 0x00	; 0
    492e:	a1 f7       	brne	.-24     	; 0x4918 <itoa+0x1c>
    4930:	16 f4       	brtc	.+4      	; 0x4936 <itoa+0x3a>
    4932:	5d e2       	ldi	r21, 0x2D	; 45
    4934:	51 93       	st	Z+, r21
    4936:	10 82       	st	Z, r1
    4938:	c9 01       	movw	r24, r18
    493a:	0c 94 9f 24 	jmp	0x493e	; 0x493e <strrev>

0000493e <strrev>:
    493e:	dc 01       	movw	r26, r24
    4940:	fc 01       	movw	r30, r24
    4942:	67 2f       	mov	r22, r23
    4944:	71 91       	ld	r23, Z+
    4946:	77 23       	and	r23, r23
    4948:	e1 f7       	brne	.-8      	; 0x4942 <strrev+0x4>
    494a:	32 97       	sbiw	r30, 0x02	; 2
    494c:	04 c0       	rjmp	.+8      	; 0x4956 <strrev+0x18>
    494e:	7c 91       	ld	r23, X
    4950:	6d 93       	st	X+, r22
    4952:	70 83       	st	Z, r23
    4954:	62 91       	ld	r22, -Z
    4956:	ae 17       	cp	r26, r30
    4958:	bf 07       	cpc	r27, r31
    495a:	c8 f3       	brcs	.-14     	; 0x494e <strrev+0x10>
    495c:	08 95       	ret

0000495e <__udivmodhi4>:
    495e:	aa 1b       	sub	r26, r26
    4960:	bb 1b       	sub	r27, r27
    4962:	51 e1       	ldi	r21, 0x11	; 17
    4964:	07 c0       	rjmp	.+14     	; 0x4974 <__udivmodhi4_ep>

00004966 <__udivmodhi4_loop>:
    4966:	aa 1f       	adc	r26, r26
    4968:	bb 1f       	adc	r27, r27
    496a:	a6 17       	cp	r26, r22
    496c:	b7 07       	cpc	r27, r23
    496e:	10 f0       	brcs	.+4      	; 0x4974 <__udivmodhi4_ep>
    4970:	a6 1b       	sub	r26, r22
    4972:	b7 0b       	sbc	r27, r23

00004974 <__udivmodhi4_ep>:
    4974:	88 1f       	adc	r24, r24
    4976:	99 1f       	adc	r25, r25
    4978:	5a 95       	dec	r21
    497a:	a9 f7       	brne	.-22     	; 0x4966 <__udivmodhi4_loop>
    497c:	80 95       	com	r24
    497e:	90 95       	com	r25
    4980:	bc 01       	movw	r22, r24
    4982:	cd 01       	movw	r24, r26
    4984:	08 95       	ret

00004986 <_exit>:
    4986:	f8 94       	cli

00004988 <__stop_program>:
    4988:	ff cf       	rjmp	.-2      	; 0x4988 <__stop_program>
